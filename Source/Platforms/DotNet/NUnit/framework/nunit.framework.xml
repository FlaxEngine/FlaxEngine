<?xml version="1.0"?>
<doc>
    <assembly>
        <name>nunit.framework</name>
    </assembly>
    <members>
        <member name="T:NUnit.Framework.ActionTargets">
            <summary>
            The different targets a test action attribute can be applied to
            </summary>
        </member>
        <member name="F:NUnit.Framework.ActionTargets.Default">
            <summary>
            Default target, which is determined by where the action attribute is attached
            </summary>
        </member>
        <member name="F:NUnit.Framework.ActionTargets.Test">
            <summary>
            Target a individual test case
            </summary>
        </member>
        <member name="F:NUnit.Framework.ActionTargets.Suite">
            <summary>
            Target a suite of test cases
            </summary>
        </member>
        <member name="T:NUnit.Framework.Api.DefaultTestAssemblyBuilder">
            <summary>
            DefaultTestAssemblyBuilder loads a single assembly and builds a TestSuite
            containing test fixtures present in the assembly.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Api.DefaultTestAssemblyBuilder._defaultSuiteBuilder">
            <summary>
            The default suite builder used by the test assembly builder.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.DefaultTestAssemblyBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Api.DefaultTestAssemblyBuilder"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.DefaultTestAssemblyBuilder.Build(System.Reflection.Assembly,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Build a suite of tests from a provided assembly
            </summary>
            <param name="assembly">The assembly from which tests are to be built</param>
            <param name="options">A dictionary of options to use in building the suite</param>
            <returns>
            A TestSuite containing the tests found in the assembly
            </returns>
        </member>
        <member name="M:NUnit.Framework.Api.DefaultTestAssemblyBuilder.Build(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Build a suite of tests given the name or the location of an assembly
            </summary>
            <param name="assemblyNameOrPath">The name or the location of the assembly.</param>
            <param name="options">A dictionary of options to use in building the suite</param>
            <returns>
            A TestSuite containing the tests found in the assembly
            </returns>
        </member>
        <member name="T:NUnit.Framework.Api.FrameworkController">
             <summary>
             FrameworkController provides a facade for use in loading, browsing
             and running tests without requiring a reference to the NUnit
             framework. All calls are encapsulated in constructors for
             this class and its nested classes, which only require the
             types of the Common Type System as arguments.
            
             The controller supports four actions: Load, Explore, Count and Run.
             They are intended to be called by a driver, which should allow for
             proper sequencing of calls. Load must be called before any of the
             other actions. The driver may support other actions, such as
             reload on run, by combining these calls.
             </summary>
        </member>
        <member name="M:NUnit.Framework.Api.FrameworkController.#ctor(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Construct a FrameworkController using the default builder and runner.
            </summary>
            <param name="assemblyNameOrPath">The AssemblyName or path to the test assembly</param>
            <param name="idPrefix">A prefix used for all test ids created under this controller.</param>
            <param name="settings">A Dictionary of settings to use in loading and running the tests</param>
        </member>
        <member name="M:NUnit.Framework.Api.FrameworkController.#ctor(System.Reflection.Assembly,System.String,System.Collections.IDictionary)">
            <summary>
            Construct a FrameworkController using the default builder and runner.
            </summary>
            <param name="assembly">The test assembly</param>
            <param name="idPrefix">A prefix used for all test ids created under this controller.</param>
            <param name="settings">A Dictionary of settings to use in loading and running the tests</param>
        </member>
        <member name="M:NUnit.Framework.Api.FrameworkController.#ctor(System.String,System.String,System.Collections.IDictionary,System.String,System.String)">
            <summary>
            Construct a FrameworkController, specifying the types to be used
            for the runner and builder. This constructor is provided for
            purposes of development.
            </summary>
            <param name="assemblyNameOrPath">The full AssemblyName or the path to the test assembly</param>
            <param name="idPrefix">A prefix used for all test ids created under this controller.</param>
            <param name="settings">A Dictionary of settings to use in loading and running the tests</param>
            <param name="runnerType">The Type of the test runner</param>
            <param name="builderType">The Type of the test builder</param>
        </member>
        <member name="M:NUnit.Framework.Api.FrameworkController.#ctor(System.Reflection.Assembly,System.String,System.Collections.IDictionary,System.String,System.String)">
            <summary>
            Construct a FrameworkController, specifying the types to be used
            for the runner and builder. This constructor is provided for
            purposes of development.
            </summary>
            <param name="assembly">The test assembly</param>
            <param name="idPrefix">A prefix used for all test ids created under this controller.</param>
            <param name="settings">A Dictionary of settings to use in loading and running the tests</param>
            <param name="runnerType">The Type of the test runner</param>
            <param name="builderType">The Type of the test builder</param>
        </member>
        <member name="P:NUnit.Framework.Api.FrameworkController.Builder">
            <summary>
            Gets the ITestAssemblyBuilder used by this controller instance.
            </summary>
            <value>The builder.</value>
        </member>
        <member name="P:NUnit.Framework.Api.FrameworkController.Runner">
            <summary>
            Gets the ITestAssemblyRunner used by this controller instance.
            </summary>
            <value>The runner.</value>
        </member>
        <member name="P:NUnit.Framework.Api.FrameworkController.AssemblyNameOrPath">
            <summary>
            Gets the AssemblyName or the path for which this FrameworkController was created
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.FrameworkController.Assembly">
            <summary>
            Gets the Assembly for which this
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.FrameworkController.Settings">
            <summary>
            Gets a dictionary of settings for the FrameworkController
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.FrameworkController.LoadTests">
            <summary>
            Loads the tests in the assembly
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Api.FrameworkController.ExploreTests(System.String)">
            <summary>
            Returns info about the tests in an assembly
            </summary>
            <param name="filter">A string containing the XML representation of the filter to use</param>
            <returns>The XML result of exploring the tests</returns>
        </member>
        <member name="M:NUnit.Framework.Api.FrameworkController.RunTests(System.String)">
            <summary>
            Runs the tests in an assembly
            </summary>
            <param name="filter">A string containing the XML representation of the filter to use</param>
            <returns>The XML result of the test run</returns>
        </member>
        <member name="M:NUnit.Framework.Api.FrameworkController.RunTests(System.Action{System.String},System.String)">
            <summary>
            Runs the tests in an assembly synchronously reporting back the test results through the callback
            or through the return value
            </summary>
            <param name="callback">The callback that receives the test results</param>
            <param name="filter">A string containing the XML representation of the filter to use</param>
            <returns>The XML result of the test run</returns>
        </member>
        <member name="M:NUnit.Framework.Api.FrameworkController.RunAsync(System.Action{System.String},System.String)">
            <summary>
            Runs the tests in an assembly asynchronously reporting back the test results through the callback
            </summary>
            <param name="callback">The callback that receives the test results</param>
            <param name="filter">A string containing the XML representation of the filter to use</param>
        </member>
        <member name="M:NUnit.Framework.Api.FrameworkController.StopRun(System.Boolean)">
            <summary>
            Stops the test run
            </summary>
            <param name="force">True to force the stop, false for a cooperative stop</param>
        </member>
        <member name="M:NUnit.Framework.Api.FrameworkController.CountTests(System.String)">
            <summary>
            Counts the number of test cases in the loaded TestSuite
            </summary>
            <param name="filter">A string containing the XML representation of the filter to use</param>
            <returns>The number of tests</returns>
        </member>
        <member name="M:NUnit.Framework.Api.FrameworkController.InsertChildElements(NUnit.Framework.Interfaces.TNode)">
            <summary>
            Inserts the environment and settings elements
            </summary>
            <param name="targetNode">Target node</param>
            <returns>The updated target node</returns>
        </member>
        <member name="M:NUnit.Framework.Api.FrameworkController.InsertEnvironmentElement(NUnit.Framework.Interfaces.TNode)">
            <summary>
            Inserts environment element
            </summary>
            <param name="targetNode">Target node</param>
            <returns>The new node</returns>
        </member>
        <member name="M:NUnit.Framework.Api.FrameworkController.InsertSettingsElement(NUnit.Framework.Interfaces.TNode,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Inserts settings element
            </summary>
            <param name="targetNode">Target node</param>
            <param name="settings">Settings dictionary</param>
            <returns>The new node</returns>
        </member>
        <member name="T:NUnit.Framework.Api.FrameworkController.FrameworkControllerAction">
            <summary>
            FrameworkControllerAction is the base class for all actions
            performed against a FrameworkController.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Api.FrameworkController.LoadTestsAction">
            <summary>
            LoadTestsAction loads a test into the FrameworkController
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.FrameworkController.LoadTestsAction.#ctor(NUnit.Framework.Api.FrameworkController,System.Object)">
            <summary>
            LoadTestsAction loads the tests in an assembly.
            </summary>
            <param name="controller">The controller.</param>
            <param name="handler">The callback handler.</param>
        </member>
        <member name="T:NUnit.Framework.Api.FrameworkController.ExploreTestsAction">
            <summary>
            ExploreTestsAction returns info about the tests in an assembly
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.FrameworkController.ExploreTestsAction.#ctor(NUnit.Framework.Api.FrameworkController,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Api.FrameworkController.ExploreTestsAction"/> class.
            </summary>
            <param name="controller">The controller for which this action is being performed.</param>
            <param name="filter">Filter used to control which tests are included (NYI)</param>
            <param name="handler">The callback handler.</param>
        </member>
        <member name="T:NUnit.Framework.Api.FrameworkController.CountTestsAction">
            <summary>
            CountTestsAction counts the number of test cases in the loaded TestSuite
            held by the FrameworkController.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.FrameworkController.CountTestsAction.#ctor(NUnit.Framework.Api.FrameworkController,System.String,System.Object)">
            <summary>
            Construct a CountsTestAction and perform the count of test cases.
            </summary>
            <param name="controller">A FrameworkController holding the TestSuite whose cases are to be counted</param>
            <param name="filter">A string containing the XML representation of the filter to use</param>
            <param name="handler">A callback handler used to report results</param>
        </member>
        <member name="T:NUnit.Framework.Api.FrameworkController.RunTestsAction">
            <summary>
            RunTestsAction runs the loaded TestSuite held by the FrameworkController.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.FrameworkController.RunTestsAction.#ctor(NUnit.Framework.Api.FrameworkController,System.String,System.Object)">
            <summary>
            Construct a RunTestsAction and run all tests in the loaded TestSuite.
            </summary>
            <param name="controller">A FrameworkController holding the TestSuite to run</param>
            <param name="filter">A string containing the XML representation of the filter to use</param>
            <param name="handler">A callback handler used to report results</param>
        </member>
        <member name="T:NUnit.Framework.Api.FrameworkController.RunAsyncAction">
            <summary>
            RunAsyncAction initiates an asynchronous test run, returning immediately
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.FrameworkController.RunAsyncAction.#ctor(NUnit.Framework.Api.FrameworkController,System.String,System.Object)">
            <summary>
            Construct a RunAsyncAction and run all tests in the loaded TestSuite.
            </summary>
            <param name="controller">A FrameworkController holding the TestSuite to run</param>
            <param name="filter">A string containing the XML representation of the filter to use</param>
            <param name="handler">A callback handler used to report results</param>
        </member>
        <member name="T:NUnit.Framework.Api.FrameworkController.StopRunAction">
            <summary>
            StopRunAction stops an ongoing run.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.FrameworkController.StopRunAction.#ctor(NUnit.Framework.Api.FrameworkController,System.Boolean,System.Object)">
            <summary>
            Construct a StopRunAction and stop any ongoing run. If no
            run is in process, no error is raised.
            </summary>
            <param name="controller">The FrameworkController for which a run is to be stopped.</param>
            <param name="force">True the stop should be forced, false for a cooperative stop.</param>
            <param name="handler">>A callback handler used to report results</param>
            <remarks>A forced stop will cause threads and processes to be killed as needed.</remarks>
        </member>
        <member name="T:NUnit.Framework.Api.ITestAssemblyBuilder">
            <summary>
            The ITestAssemblyBuilder interface is implemented by a class
            that is able to build a suite of tests given an assembly or 
            an assembly filename.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.ITestAssemblyBuilder.Build(System.Reflection.Assembly,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Build a suite of tests from a provided assembly
            </summary>
            <param name="assembly">The assembly from which tests are to be built</param>
            <param name="options">A dictionary of options to use in building the suite</param>
            <returns>A TestSuite containing the tests found in the assembly</returns>
        </member>
        <member name="M:NUnit.Framework.Api.ITestAssemblyBuilder.Build(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Build a suite of tests given the filename of an assembly
            </summary>
            <param name="assemblyName">The filename of the assembly from which tests are to be built</param>
            <param name="options">A dictionary of options to use in building the suite</param>
            <returns>A TestSuite containing the tests found in the assembly</returns>
        </member>
        <member name="T:NUnit.Framework.Api.ITestAssemblyRunner">
            <summary>
            The ITestAssemblyRunner interface is implemented by classes
            that are able to execute a suite of tests loaded
            from an assembly.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITestAssemblyRunner.LoadedTest">
            <summary>
            Gets the tree of loaded tests, or null if
            no tests have been loaded.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITestAssemblyRunner.Result">
            <summary>
            Gets the tree of test results, if the test
            run is completed, otherwise null.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITestAssemblyRunner.IsTestLoaded">
            <summary>
            Indicates whether a test has been loaded
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITestAssemblyRunner.IsTestRunning">
            <summary>
            Indicates whether a test is currently running
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.ITestAssemblyRunner.IsTestComplete">
            <summary>
            Indicates whether a test run is complete
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.ITestAssemblyRunner.Load(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Loads the tests found in an Assembly, returning an
            indication of whether or not the load succeeded.
            </summary>
            <param name="assemblyName">File name of the assembly to load</param>
            <param name="settings">Dictionary of options to use in loading the test</param>
            <returns>An ITest representing the loaded tests</returns>
        </member>
        <member name="M:NUnit.Framework.Api.ITestAssemblyRunner.Load(System.Reflection.Assembly,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Loads the tests found in an Assembly, returning an
            indication of whether or not the load succeeded.
            </summary>
            <param name="assembly">The assembly to load</param>
            <param name="settings">Dictionary of options to use in loading the test</param>
            <returns>An ITest representing the loaded tests</returns>
        </member>
        <member name="M:NUnit.Framework.Api.ITestAssemblyRunner.CountTestCases(NUnit.Framework.Interfaces.ITestFilter)">
            <summary>
            Count Test Cases using a filter
            </summary>
            <param name="filter">The filter to apply</param>
            <returns>The number of test cases found</returns>
        </member>
        <member name="M:NUnit.Framework.Api.ITestAssemblyRunner.ExploreTests(NUnit.Framework.Interfaces.ITestFilter)">
            <summary>
            Explore the test cases using a filter
            </summary>
            <param name="filter">The filter to apply</param>
            <returns>Test Assembly with test cases that matches the filter</returns>
        </member>
        <member name="M:NUnit.Framework.Api.ITestAssemblyRunner.Run(NUnit.Framework.Interfaces.ITestListener,NUnit.Framework.Interfaces.ITestFilter)">
            <summary>
            Run selected tests and return a test result. The test is run synchronously,
            and the listener interface is notified as it progresses.
            </summary>
            <param name="listener">Interface to receive ITestListener notifications.</param>
            <param name="filter">A test filter used to select tests to be run</param>
        </member>
        <member name="M:NUnit.Framework.Api.ITestAssemblyRunner.RunAsync(NUnit.Framework.Interfaces.ITestListener,NUnit.Framework.Interfaces.ITestFilter)">
            <summary>
            Run selected tests asynchronously, notifying the listener interface as it progresses.
            </summary>
            <param name="listener">Interface to receive EventListener notifications.</param>
            <param name="filter">A test filter used to select tests to be run</param>
        </member>
        <member name="M:NUnit.Framework.Api.ITestAssemblyRunner.WaitForCompletion(System.Int32)">
            <summary>
            Wait for the ongoing run to complete.
            </summary>
            <param name="timeout">Time to wait in milliseconds</param>
            <returns>True if the run completed, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Api.ITestAssemblyRunner.StopRun(System.Boolean)">
            <summary>
            Signal any test run that is in process to stop. Return without error if no test is running.
            </summary>
            <param name="force">If true, kill any test-running threads</param>
        </member>
        <member name="T:NUnit.Framework.Api.NUnitTestAssemblyRunner">
            <summary>
            Implementation of ITestAssemblyRunner
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.NUnitTestAssemblyRunner.#ctor(NUnit.Framework.Api.ITestAssemblyBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Api.NUnitTestAssemblyRunner"/> class.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="P:NUnit.Framework.Api.NUnitTestAssemblyRunner.DefaultLevelOfParallelism">
            <summary>
            Gets the default level of parallel execution (worker threads)
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.NUnitTestAssemblyRunner.LoadedTest">
            <summary>
            The tree of tests that was loaded by the builder
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.NUnitTestAssemblyRunner.Result">
            <summary>
            The test result, if a run has completed
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.NUnitTestAssemblyRunner.IsTestLoaded">
            <summary>
            Indicates whether a test is loaded
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.NUnitTestAssemblyRunner.IsTestRunning">
            <summary>
            Indicates whether a test is running
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.NUnitTestAssemblyRunner.IsTestComplete">
            <summary>
            Indicates whether a test run is complete
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.NUnitTestAssemblyRunner.Settings">
            <summary>
            Our settings, specified when loading the assembly
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.NUnitTestAssemblyRunner.TopLevelWorkItem">
            <summary>
            The top level WorkItem created for the assembly as a whole
            </summary>
        </member>
        <member name="P:NUnit.Framework.Api.NUnitTestAssemblyRunner.Context">
            <summary>
            The TestExecutionContext for the top level WorkItem
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.NUnitTestAssemblyRunner.Load(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Loads the tests found in an Assembly
            </summary>
            <param name="assemblyNameOrPath">File name or path of the assembly to load</param>
            <param name="settings">Dictionary of option settings for loading the assembly</param>
            <returns>A Test Assembly containing all loaded tests</returns>
        </member>
        <member name="M:NUnit.Framework.Api.NUnitTestAssemblyRunner.Load(System.Reflection.Assembly,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Loads the tests found in an Assembly
            </summary>
            <param name="assembly">The assembly to load</param>
            <param name="settings">Dictionary of option settings for loading the assembly</param>
            <returns>A Test Assembly containing all loaded tests</returns>
        </member>
        <member name="M:NUnit.Framework.Api.NUnitTestAssemblyRunner.CountTestCases(NUnit.Framework.Interfaces.ITestFilter)">
            <summary>
            Count Test Cases using a filter
            </summary>
            <param name="filter">The filter to apply</param>
            <returns>The number of test cases found</returns>
        </member>
        <member name="M:NUnit.Framework.Api.NUnitTestAssemblyRunner.ExploreTests(NUnit.Framework.Interfaces.ITestFilter)">
            <summary>
            Explore the test cases using a filter
            </summary>
            <param name="filter">The filter to apply</param>
            <returns>Test Assembly with test cases that matches the filter</returns>
        </member>
        <member name="M:NUnit.Framework.Api.NUnitTestAssemblyRunner.Run(NUnit.Framework.Interfaces.ITestListener,NUnit.Framework.Interfaces.ITestFilter)">
            <summary>
            Run selected tests and return a test result. The test is run synchronously,
            and the listener interface is notified as it progresses.
            </summary>
            <param name="listener">Interface to receive EventListener notifications.</param>
            <param name="filter">A test filter used to select tests to be run</param>
            <returns>The test results from the run</returns>
        </member>
        <member name="M:NUnit.Framework.Api.NUnitTestAssemblyRunner.RunAsync(NUnit.Framework.Interfaces.ITestListener,NUnit.Framework.Interfaces.ITestFilter)">
            <summary>
            Run selected tests asynchronously, notifying the listener interface as it progresses.
            </summary>
            <param name="listener">Interface to receive EventListener notifications.</param>
            <param name="filter">A test filter used to select tests to be run</param>
            <remarks>
            RunAsync is a template method, calling various abstract and
            virtual methods to be overridden by derived classes.
            </remarks>
        </member>
        <member name="M:NUnit.Framework.Api.NUnitTestAssemblyRunner.WaitForCompletion(System.Int32)">
            <summary>
            Wait for the ongoing run to complete.
            </summary>
            <param name="timeout">Time to wait in milliseconds</param>
            <returns>True if the run completed, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Api.NUnitTestAssemblyRunner.StopRun(System.Boolean)">
            <summary>
            Signal any test run that is in process to stop. Return without error if no test is running.
            </summary>
            <param name="force">If true, kill any tests that are currently running</param>
        </member>
        <member name="M:NUnit.Framework.Api.NUnitTestAssemblyRunner.StartRun(NUnit.Framework.Interfaces.ITestListener)">
            <summary>
            Initiate the test run.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.NUnitTestAssemblyRunner.CreateTestExecutionContext(NUnit.Framework.Interfaces.ITestListener)">
            <summary>
            Create the initial TestExecutionContext used to run tests
            </summary>
            <param name="listener">The ITestListener specified in the RunAsync call</param>
        </member>
        <member name="M:NUnit.Framework.Api.NUnitTestAssemblyRunner.OnRunCompleted(System.Object,System.EventArgs)">
            <summary>
            Handle the Completed event for the top level work item
            </summary>
        </member>
        <member name="M:NUnit.Framework.Api.NUnitTestAssemblyRunner.WrapInNUnitCallContext(System.Action)">
            <summary>
            This method is a no-op in .NET Standard builds.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Assert">
            <summary>
            The Assert class contains a collection of static methods that
            implement the most common assertions used in NUnit.
            </summary>
            <summary>
            The Assert class contains a collection of static methods that
            implement the most common assertions used in NUnit.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that the first int is greater than the second
            int. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Int32,System.Int32)">
            <summary>
            Verifies that the first int is greater than the second
            int. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.UInt32,System.UInt32)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Int64,System.Int64)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.UInt64,System.UInt64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.UInt64,System.UInt64)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Decimal,System.Decimal)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Double,System.Double)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.Single,System.Single)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Greater(System.IComparable,System.IComparable)">
            <summary>
            Verifies that the first value is greater than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Int32,System.Int32)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.UInt32,System.UInt32)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Int64,System.Int64)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.UInt64,System.UInt64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.UInt64,System.UInt64)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Decimal,System.Decimal)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Double,System.Double)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.Single,System.Single)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Less(System.IComparable,System.IComparable)">
            <summary>
            Verifies that the first value is less than the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Int32,System.Int32)">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.UInt32,System.UInt32)">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Int64,System.Int64)">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.UInt64,System.UInt64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.UInt64,System.UInt64)">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Decimal,System.Decimal)">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Double,System.Double)">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.Single,System.Single)">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GreaterOrEqual(System.IComparable,System.IComparable)">
            <summary>
            Verifies that the first value is greater than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be greater</param>
            <param name="arg2">The second value, expected to be less</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Int32,System.Int32)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.UInt32,System.UInt32,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.UInt32,System.UInt32)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Int64,System.Int64)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.UInt64,System.UInt64,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.UInt64,System.UInt64)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Decimal,System.Decimal,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Decimal,System.Decimal)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Double,System.Double)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Single,System.Single,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.Single,System.Single)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.IComparable,System.IComparable,System.String,System.Object[])">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.LessOrEqual(System.IComparable,System.IComparable)">
            <summary>
            Verifies that the first value is less than or equal to the second
            value. If it is not, then an
            <see cref="T:NUnit.Framework.AssertionException"/> is thrown. 
            </summary>
            <param name="arg1">The first value, expected to be less</param>
            <param name="arg2">The second value, expected to be greater</param>
        </member>
        <member name="M:NUnit.Framework.Assert.True(System.Nullable{System.Boolean},System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.True(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.True(System.Nullable{System.Boolean})">
            <summary>
            Asserts that a condition is true. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.True(System.Boolean)">
            <summary>
            Asserts that a condition is true. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsTrue(System.Nullable{System.Boolean},System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsTrue(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsTrue(System.Nullable{System.Boolean})">
            <summary>
            Asserts that a condition is true. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsTrue(System.Boolean)">
            <summary>
            Asserts that a condition is true. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.False(System.Nullable{System.Boolean},System.String,System.Object[])">
            <summary>
            Asserts that a condition is false. Returns without throwing an exception when inside a multiple assert
            block.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.False(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is false. Returns without throwing an exception when inside a multiple assert
            block.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.False(System.Nullable{System.Boolean})">
            <summary>
            Asserts that a condition is false. Returns without throwing an exception when inside a multiple assert block.
            </summary> 
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.False(System.Boolean)">
            <summary>
            Asserts that a condition is false. Returns without throwing an exception when inside a multiple assert
            block.
            </summary> 
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsFalse(System.Nullable{System.Boolean},System.String,System.Object[])">
            <summary>
            Asserts that a condition is false. Returns without throwing an exception when inside a multiple assert
            block.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsFalse(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is false. Returns without throwing an exception when inside a multiple assert
            block.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsFalse(System.Nullable{System.Boolean})">
            <summary>
            Asserts that a condition is false. Returns without throwing an exception when inside a multiple assert
            block.
            </summary> 
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsFalse(System.Boolean)">
            <summary>
            Asserts that a condition is false. Returns without throwing an exception when inside a multiple assert
            block.
            </summary> 
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.NotNull(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the object that is passed in is not equal to <see langword="null"/>. Returns without throwing an
            exception when inside a multiple assert block.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.NotNull(System.Object)">
            <summary>
            Verifies that the object that is passed in is not equal to <see langword="null"/>. Returns without throwing an
            exception when inside a multiple assert block.
            </summary>
            <param name="anObject">The object that is to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotNull(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the object that is passed in is not equal to <see langword="null"/>. Returns without throwing an
            exception when inside a multiple assert block.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotNull(System.Object)">
            <summary>
            Verifies that the object that is passed in is not equal to <see langword="null"/>. Returns without throwing an
            exception when inside a multiple assert block.
            </summary>
            <param name="anObject">The object that is to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Null(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the object that is passed in is equal to <see langword="null"/>. Returns without throwing an
            exception when inside a multiple assert block.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Null(System.Object)">
            <summary>
            Verifies that the object that is passed in is equal to <see langword="null"/>. Returns without throwing an
            exception when inside a multiple assert block.
            </summary>
            <param name="anObject">The object that is to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNull(System.Object,System.String,System.Object[])">
            <summary>
            Verifies that the object that is passed in is equal to <see langword="null"/>. Returns without throwing an
            exception when inside a multiple assert block.
            </summary>
            <param name="anObject">The object that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNull(System.Object)">
            <summary>
            Verifies that the object that is passed in is equal to <see langword="null"/>. Returns without throwing an
            exception when inside a multiple assert block.
            </summary>
            <param name="anObject">The object that is to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNaN(System.Double,System.String,System.Object[])">
            <summary>
            Verifies that the double that is passed in is an <c>NaN</c>. Returns without throwing an
            exception when inside a multiple assert block.
            </summary>
            <param name="aDouble">The value that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNaN(System.Double)">
            <summary>
            Verifies that the double that is passed in is an <c>NaN</c> value. Returns without throwing an
            exception when inside a multiple assert block.
            </summary>
            <param name="aDouble">The value that is to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNaN(System.Nullable{System.Double},System.String,System.Object[])">
            <summary>
            Verifies that the double that is passed in is an <c>NaN</c> value. Returns without throwing an
            exception when inside a multiple assert block.
            </summary>
            <param name="aDouble">The value that is to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNaN(System.Nullable{System.Double})">
            <summary>
            Verifies that the double that is passed in is an <c>NaN</c> value. Returns without throwing an
            exception when inside a multiple assert block.
            </summary>
            <param name="aDouble">The value that is to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsEmpty(System.String,System.String,System.Object[])">
            <summary>
            Assert that a string is empty. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="aString">The string to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsEmpty(System.String)">
            <summary>
            Assert that a string is empty. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="aString">The string to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsEmpty(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is empty. Returns without throwing an exception when inside a
            multiple assert block.
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsEmpty(System.Collections.IEnumerable)">
            <summary>
            Assert that an array, list or other collection is empty. Returns without throwing an exception when inside a
            multiple assert block.
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotEmpty(System.String,System.String,System.Object[])">
            <summary>
            Assert that a string is not empty. Returns without throwing an exception when inside a multiple assert
            block.
            </summary>
            <param name="aString">The string to be tested</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotEmpty(System.String)">
            <summary>
            Assert that a string is not empty. Returns without throwing an exception when inside a multiple assert
            block.
            </summary>
            <param name="aString">The string to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotEmpty(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is not empty. Returns without throwing an exception when
            inside a multiple assert block.
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotEmpty(System.Collections.IEnumerable)">
            <summary>
            Assert that an array, list or other collection is not empty. Returns without throwing an exception when
            inside a multiple assert block.
            </summary>
            <param name="collection">An array, list or other collection implementing ICollection</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Zero(System.Int32)">
            <summary>
            Asserts that an int is zero. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="actual">The number to be examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Zero(System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that an int is zero. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="actual">The number to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Zero(System.UInt32)">
            <summary>
            Asserts that an unsigned int is zero. Returns without throwing an exception when inside a multiple assert
            block.
            </summary>
            <param name="actual">The number to be examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Zero(System.UInt32,System.String,System.Object[])">
            <summary>
            Asserts that an unsigned int is zero. Returns without throwing an exception when inside a multiple assert
            block.
            </summary>
            <param name="actual">The number to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Zero(System.Int64)">
            <summary>
            Asserts that a Long is zero. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="actual">The number to be examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Zero(System.Int64,System.String,System.Object[])">
            <summary>
            Asserts that a Long is zero. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="actual">The number to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Zero(System.UInt64)">
            <summary>
            Asserts that an unsigned Long is zero. Returns without throwing an exception when inside a multiple assert
            block.
            </summary>
            <param name="actual">The number to be examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Zero(System.UInt64,System.String,System.Object[])">
            <summary>
            Asserts that an unsigned Long is zero. Returns without throwing an exception when inside a multiple assert
            block.
            </summary>
            <param name="actual">The number to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Zero(System.Decimal)">
            <summary>
            Asserts that a decimal is zero. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="actual">The number to be examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Zero(System.Decimal,System.String,System.Object[])">
            <summary>
            Asserts that a decimal is zero. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="actual">The number to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Zero(System.Double)">
            <summary>
            Asserts that a double is zero. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="actual">The number to be examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Zero(System.Double,System.String,System.Object[])">
            <summary>
            Asserts that a double is zero. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="actual">The number to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Zero(System.Single)">
            <summary>
            Asserts that a float is zero. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="actual">The number to be examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Zero(System.Single,System.String,System.Object[])">
            <summary>
            Asserts that a float is zero. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="actual">The number to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.NotZero(System.Int32)">
            <summary>
            Asserts that an int is not zero. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="actual">The number to be examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.NotZero(System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that an int is not zero. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="actual">The number to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.NotZero(System.UInt32)">
            <summary>
            Asserts that an unsigned int is not zero. Returns without throwing an exception when inside a multiple
            assert block.
            </summary>
            <param name="actual">The number to be examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.NotZero(System.UInt32,System.String,System.Object[])">
            <summary>
            Asserts that an unsigned int is not zero. Returns without throwing an exception when inside a multiple
            assert block.
            </summary>
            <param name="actual">The number to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.NotZero(System.Int64)">
            <summary>
            Asserts that a Long is not zero. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="actual">The number to be examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.NotZero(System.Int64,System.String,System.Object[])">
            <summary>
            Asserts that a Long is not zero. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="actual">The number to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.NotZero(System.UInt64)">
            <summary>
            Asserts that an unsigned Long is not zero. Returns without throwing an exception when inside a multiple
            assert block.
            </summary>
            <param name="actual">The number to be examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.NotZero(System.UInt64,System.String,System.Object[])">
            <summary>
            Asserts that an unsigned Long is not zero. Returns without throwing an exception when inside a multiple
            assert block.
            </summary>
            <param name="actual">The number to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.NotZero(System.Decimal)">
            <summary>
            Asserts that a decimal is zero. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="actual">The number to be examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.NotZero(System.Decimal,System.String,System.Object[])">
            <summary>
            Asserts that a decimal is zero. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="actual">The number to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.NotZero(System.Double)">
            <summary>
            Asserts that a double is zero. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="actual">The number to be examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.NotZero(System.Double,System.String,System.Object[])">
            <summary>
            Asserts that a double is zero. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="actual">The number to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.NotZero(System.Single)">
            <summary>
            Asserts that a float is zero. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="actual">The number to be examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.NotZero(System.Single,System.String,System.Object[])">
            <summary>
            Asserts that a float is zero. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="actual">The number to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Positive(System.Int32)">
            <summary>
            Asserts that an int is positive. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="actual">The number to be examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Positive(System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that an int is positive. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="actual">The number to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Positive(System.UInt32)">
            <summary>
            Asserts that an unsigned int is positive. Returns without throwing an exception when inside a multiple
            assert block.
            </summary>
            <param name="actual">The number to be examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Positive(System.UInt32,System.String,System.Object[])">
            <summary>
            Asserts that an unsigned int is positive. Returns without throwing an exception when inside a multiple
            assert block.
            </summary>
            <param name="actual">The number to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Positive(System.Int64)">
            <summary>
            Asserts that a Long is positive. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="actual">The number to be examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Positive(System.Int64,System.String,System.Object[])">
            <summary>
            Asserts that a Long is positive. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="actual">The number to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Positive(System.UInt64)">
            <summary>
            Asserts that an unsigned Long is positive. Returns without throwing an exception when inside a multiple
            assert block.
            </summary>
            <param name="actual">The number to be examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Positive(System.UInt64,System.String,System.Object[])">
            <summary>
            Asserts that an unsigned Long is positive. Returns without throwing an exception when inside a multiple
            assert block.
            </summary>
            <param name="actual">The number to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Positive(System.Decimal)">
            <summary>
            Asserts that a decimal is positive. Returns without throwing an exception when inside a multiple assert
            block.
            </summary>
            <param name="actual">The number to be examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Positive(System.Decimal,System.String,System.Object[])">
            <summary>
            Asserts that a decimal is positive. Returns without throwing an exception when inside a multiple assert
            block.
            </summary>
            <param name="actual">The number to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Positive(System.Double)">
            <summary>
            Asserts that a double is positive. Returns without throwing an exception when inside a multiple assert
            block.
            </summary>
            <param name="actual">The number to be examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Positive(System.Double,System.String,System.Object[])">
            <summary>
            Asserts that a double is positive. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="actual">The number to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Positive(System.Single)">
            <summary>
            Asserts that a float is positive. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="actual">The number to be examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Positive(System.Single,System.String,System.Object[])">
            <summary>
            Asserts that a float is positive. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="actual">The number to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Negative(System.Int32)">
            <summary>
            Asserts that an int is negative. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="actual">The number to be examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Negative(System.Int32,System.String,System.Object[])">
            <summary>
            Asserts that an int is negative. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="actual">The number to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Negative(System.UInt32)">
            <summary>
            Asserts that an unsigned int is negative. Returns without throwing an exception when inside a multiple
            assert block.
            </summary>
            <param name="actual">The number to be examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Negative(System.UInt32,System.String,System.Object[])">
            <summary>
            Asserts that an unsigned int is negative. Returns without throwing an exception when inside a multiple
            assert block.
            </summary>
            <param name="actual">The number to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Negative(System.Int64)">
            <summary>
            Asserts that a Long is negative. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="actual">The number to be examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Negative(System.Int64,System.String,System.Object[])">
            <summary>
            Asserts that a Long is negative. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="actual">The number to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Negative(System.UInt64)">
            <summary>
            Asserts that an unsigned Long is negative. Returns without throwing an exception when inside a multiple
            assert block.
            </summary>
            <param name="actual">The number to be examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Negative(System.UInt64,System.String,System.Object[])">
            <summary>
            Asserts that an unsigned Long is negative. Returns without throwing an exception when inside a multiple
            assert block.
            </summary>
            <param name="actual">The number to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Negative(System.Decimal)">
            <summary>
            Asserts that a decimal is negative. Returns without throwing an exception when inside a multiple assert
            block.
            </summary>
            <param name="actual">The number to be examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Negative(System.Decimal,System.String,System.Object[])">
            <summary>
            Asserts that a decimal is negative. Returns without throwing an exception when inside a multiple assert
            block.
            </summary>
            <param name="actual">The number to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Negative(System.Double)">
            <summary>
            Asserts that a double is negative. Returns without throwing an exception when inside a multiple assert
            block.
            </summary>
            <param name="actual">The number to be examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Negative(System.Double,System.String,System.Object[])">
            <summary>
            Asserts that a double is negative. Returns without throwing an exception when inside a multiple assert
            block.
            </summary>
            <param name="actual">The number to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Negative(System.Single)">
            <summary>
            Asserts that a float is negative. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="actual">The number to be examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Negative(System.Single,System.String,System.Object[])">
            <summary>
            Asserts that a float is negative. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="actual">The number to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Equals(System.Object,System.Object)">
            <summary>
            DO NOT USE! Use Assert.AreEqual(...) instead.
            The Equals method throws an InvalidOperationException. This is done
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.Assert.ReferenceEquals(System.Object,System.Object)">
            <summary>
            DO NOT USE!
            The ReferenceEquals method throws an InvalidOperationException. This is done
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.Assert.Pass(System.String,System.Object[])">
            <summary>
            Throws a <see cref="T:NUnit.Framework.SuccessException"/> with the message and arguments
            that are passed in. This allows a test to be cut short, with a result
            of success returned to NUnit.
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Pass(System.String)">
            <summary>
            Throws a <see cref="T:NUnit.Framework.SuccessException"/> with the message and arguments
            that are passed in. This allows a test to be cut short, with a result
            of success returned to NUnit.
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Pass">
            <summary>
            Throws a <see cref="T:NUnit.Framework.SuccessException"/> with the message and arguments
            that are passed in. This allows a test to be cut short, with a result
            of success returned to NUnit.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.Fail(System.String,System.Object[])">
            <summary>
            Marks the test as failed with the message and arguments that are passed in. Returns without throwing an
            exception when inside a multiple assert block.
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Fail(System.String)">
            <summary>
            Marks the test as failed with the message that is passed in. Returns without throwing an exception when
            inside a multiple assert block.
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Fail">
            <summary>
            Marks the test as failed. Returns without throwing an exception when inside a multiple assert block.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.Warn(System.String,System.Object[])">
            <summary>
            Issues a warning using the message and arguments provided.
            </summary>
            <param name="message">The message to display.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Warn(System.String)">
            <summary>
            Issues a warning using the message provided.
            </summary>
            <param name="message">The message to display.</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Ignore(System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:NUnit.Framework.IgnoreException"/> with the message and arguments
            that are passed in.  This causes the test to be reported as ignored.
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Ignore(System.String)">
            <summary>
            Throws an <see cref="T:NUnit.Framework.IgnoreException"/> with the message that is
            passed in. This causes the test to be reported as ignored.
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.AssertionException"/> with.</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Ignore">
            <summary>
            Throws an <see cref="T:NUnit.Framework.IgnoreException"/>.
            This causes the test to be reported as ignored.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.Inconclusive(System.String,System.Object[])">
            <summary>
            Throws an <see cref="T:NUnit.Framework.InconclusiveException"/> with the message and arguments
            that are passed in.  This causes the test to be reported as inconclusive.
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.InconclusiveException"/> with.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Inconclusive(System.String)">
            <summary>
            Throws an <see cref="T:NUnit.Framework.InconclusiveException"/> with the message that is
            passed in. This causes the test to be reported as inconclusive.
            </summary>
            <param name="message">The message to initialize the <see cref="T:NUnit.Framework.InconclusiveException"/> with.</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Inconclusive">
            <summary>
            Throws an <see cref="T:NUnit.Framework.InconclusiveException"/>.
            This causes the test to be reported as Inconclusive.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.Contains(System.Object,System.Collections.ICollection,System.String,System.Object[])">
            <summary>
            Asserts that an object is contained in a collection. Returns without throwing an exception when inside a
            multiple assert block.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The collection to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Contains(System.Object,System.Collections.ICollection)">
            <summary>
            Asserts that an object is contained in a collection. Returns without throwing an exception when inside a
            multiple assert block.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The collection to be examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Multiple(NUnit.Framework.TestDelegate)">
            <summary>
            Wraps code containing a series of assertions, which should all
            be executed, even if they fail. Failed results are saved and
            reported at the end of the code block.
            </summary>
            <param name="testDelegate">A TestDelegate to be executed in Multiple Assertion mode.</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Multiple(NUnit.Framework.AsyncTestDelegate)">
            <summary>
            Wraps code containing a series of assertions, which should all
            be executed, even if they fail. Failed results are saved and
            reported at the end of the code block.
            </summary>
            <param name="testDelegate">A TestDelegate to be executed in Multiple Assertion mode.</param>
        </member>
        <member name="M:NUnit.Framework.Assert.GetEnvironmentStackTraceWithoutThrowing">
            <summary>
            If <see cref="P:System.Exception.StackTrace"/> throws, returns "SomeException was thrown by the
            Environment.StackTrace property." See also <see cref="M:NUnit.Framework.ExceptionExtensions.GetStackTraceWithoutThrowing(System.Exception)"/>.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Verifies that two doubles are equal considering a delta. If the expected value is infinity then the delta
            value is ignored. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the the expected and the actual</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Double,System.Double)">
            <summary>
            Verifies that two doubles are equal considering a delta. If the expected value is infinity then the delta
            value is ignored. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the the expected and the actual</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Nullable{System.Double},System.Double,System.String,System.Object[])">
            <summary>
            Verifies that two doubles are equal considering a delta. If the expected value is infinity then the delta
            value is ignored. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the the expected and the actual</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Double,System.Nullable{System.Double},System.Double)">
            <summary>
            Verifies that two doubles are equal considering a delta. If the expected value is infinity then the delta
            value is ignored. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the the expected and the actual</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Verifies that two objects are equal. Two objects are considered equal if both are null, or if both have the
            same value. NUnit has special semantics for some object types. Returns without throwing an exception when
            inside a multiple assert block.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreEqual(System.Object,System.Object)">
            <summary>
            Verifies that two objects are equal. Two objects are considered equal if both are null, or if both have the
            same value. NUnit has special semantics for some object types. Returns without throwing an exception when
            inside a multiple assert block.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Verifies that two objects are not equal. Two objects are considered equal if both are null, or if both have
            the same value. NUnit has special semantics for some object types. Returns without throwing an exception
            when inside a multiple assert block.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotEqual(System.Object,System.Object)">
            <summary>
            Verifies that two objects are not equal. Two objects are considered equal if both are null, or if both have
            the same value. NUnit has special semantics for some object types. Returns without throwing an exception
            when inside a multiple assert block.
            </summary>
            <param name="expected">The value that is expected</param>
            <param name="actual">The actual value</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreSame(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that two objects refer to the same object. Returns without throwing an exception when inside a
            multiple assert block.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreSame(System.Object,System.Object)">
            <summary>
            Asserts that two objects refer to the same object. Returns without throwing an exception when inside a
            multiple assert block.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotSame(System.Object,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that two objects do not refer to the same object. Returns without throwing an exception when inside
            a multiple assert block.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AreNotSame(System.Object,System.Object)">
            <summary>
            Asserts that two objects do not refer to the same object. Returns without throwing an exception when inside
            a multiple assert block.
            </summary>
            <param name="expected">The expected object</param>
            <param name="actual">The actual object</param>
        </member>
        <member name="M:NUnit.Framework.Assert.AssertDoublesAreEqual(System.Double,System.Double,System.Double,System.String,System.Object[])">
            <summary>
            Helper for Assert.AreEqual(double expected, double actual, ...)
            allowing code generation to work consistently.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="delta">The maximum acceptable difference between the
            the expected and the actual</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.ThrowsAsync(NUnit.Framework.Constraints.IResolveConstraint,NUnit.Framework.AsyncTestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that an async delegate throws a particular exception when called. The returned exception may be
            <see langword="null"/> when inside a multiple assert block.
            </summary>
            <param name="expression">A constraint to be satisfied by the exception</param>
            <param name="code">A TestSnippet delegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.ThrowsAsync(NUnit.Framework.Constraints.IResolveConstraint,NUnit.Framework.AsyncTestDelegate)">
            <summary>
            Verifies that an async delegate throws a particular exception when called. The returned exception may be
            <see langword="null"/> when inside a multiple assert block.
            </summary>
            <param name="expression">A constraint to be satisfied by the exception</param>
            <param name="code">A TestSnippet delegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.ThrowsAsync(System.Type,NUnit.Framework.AsyncTestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that an async delegate throws a particular exception when called. The returned exception may be
            <see langword="null"/> when inside a multiple assert block.
            </summary>
            <param name="expectedExceptionType">The exception Type expected</param>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.ThrowsAsync(System.Type,NUnit.Framework.AsyncTestDelegate)">
            <summary>
            Verifies that an async delegate throws a particular exception when called. The returned exception may be
            <see langword="null"/> when inside a multiple assert block.
            </summary>
            <param name="expectedExceptionType">The exception Type expected</param>
            <param name="code">A TestDelegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.ThrowsAsync``1(NUnit.Framework.AsyncTestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that an async delegate throws a particular exception when called. The returned exception may be
            <see langword="null"/> when inside a multiple assert block.
            </summary>
            <typeparam name="TActual">Type of the expected exception</typeparam>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.ThrowsAsync``1(NUnit.Framework.AsyncTestDelegate)">
            <summary>
            Verifies that an async delegate throws a particular exception when called. The returned exception may be
            <see langword="null"/> when inside a multiple assert block.
            </summary>
            <typeparam name="TActual">Type of the expected exception</typeparam>
            <param name="code">A TestDelegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.CatchAsync(NUnit.Framework.AsyncTestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that an async delegate throws an exception when called and returns it. The returned exception may
            be <see langword="null"/> when inside a multiple assert block.
            </summary>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.CatchAsync(NUnit.Framework.AsyncTestDelegate)">
            <summary>
            Verifies that an async delegate throws an exception when called and returns it. The returned exception may
            be <see langword="null"/> when inside a multiple assert block.
            </summary>
            <param name="code">A TestDelegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.CatchAsync(System.Type,NUnit.Framework.AsyncTestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that an async delegate throws an exception of a certain Type or one derived from it when called and
            returns it. The returned exception may be <see langword="null"/> when inside a multiple assert block.
            </summary>
            <param name="expectedExceptionType">The expected Exception Type</param>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.CatchAsync(System.Type,NUnit.Framework.AsyncTestDelegate)">
            <summary>
            Verifies that an async delegate throws an exception of a certain Type or one derived from it when called and
            returns it. The returned exception may be <see langword="null"/> when inside a multiple assert block.
            </summary>
            <param name="expectedExceptionType">The expected Exception Type</param>
            <param name="code">A TestDelegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.CatchAsync``1(NUnit.Framework.AsyncTestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that an async delegate throws an exception of a certain Type or one derived from it when called and
            returns it. The returned exception may be <see langword="null"/> when inside a multiple assert block.
            </summary>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.CatchAsync``1(NUnit.Framework.AsyncTestDelegate)">
            <summary>
            Verifies that an async delegate throws an exception of a certain Type or one derived from it when called and
            returns it. The returned exception may be <see langword="null"/> when inside a multiple assert block.
            </summary>
            <param name="code">A TestDelegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.DoesNotThrowAsync(NUnit.Framework.AsyncTestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that an async delegate does not throw an exception
            </summary>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.DoesNotThrowAsync(NUnit.Framework.AsyncTestDelegate)">
            <summary>
            Verifies that an async delegate does not throw an exception.
            </summary>
            <param name="code">A TestDelegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws(NUnit.Framework.Constraints.IResolveConstraint,NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws a particular exception when called. The returned exception may be <see
            langword="null"/> when inside a multiple assert block.
            </summary>
            <param name="expression">A constraint to be satisfied by the exception</param>
            <param name="code">A TestSnippet delegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws(NUnit.Framework.Constraints.IResolveConstraint,NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate throws a particular exception when called. The returned exception may be <see
            langword="null"/> when inside a multiple assert block.
            </summary>
            <param name="expression">A constraint to be satisfied by the exception</param>
            <param name="code">A TestSnippet delegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws(System.Type,NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws a particular exception when called. The returned exception may be <see
            langword="null"/> when inside a multiple assert block.
            </summary>
            <param name="expectedExceptionType">The exception Type expected</param>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws(System.Type,NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate throws a particular exception when called. The returned exception may be <see
            langword="null"/> when inside a multiple assert block.
            </summary>
            <param name="expectedExceptionType">The exception Type expected</param>
            <param name="code">A TestDelegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws``1(NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws a particular exception when called. The returned exception may be <see
            langword="null"/> when inside a multiple assert block.
            </summary>
            <typeparam name="TActual">Type of the expected exception</typeparam>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Throws``1(NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate throws a particular exception when called. The returned exception may be <see
            langword="null"/> when inside a multiple assert block.
            </summary>
            <typeparam name="TActual">Type of the expected exception</typeparam>
            <param name="code">A TestDelegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch(NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws an exception when called and returns it. The returned exception may be <see
            langword="null"/> when inside a multiple assert block.
            </summary>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch(NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate throws an exception when called and returns it. The returned exception may be <see
            langword="null"/> when inside a multiple assert block.
            </summary>
            <param name="code">A TestDelegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch(System.Type,NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws an exception of a certain Type or one derived from it when called and
            returns it. The returned exception may be <see langword="null"/> when inside a multiple assert block.
            </summary>
            <param name="expectedExceptionType">The expected Exception Type</param>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch(System.Type,NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate throws an exception of a certain Type or one derived from it when called and
            returns it. The returned exception may be <see langword="null"/> when inside a multiple assert block.
            </summary>
            <param name="expectedExceptionType">The expected Exception Type</param>
            <param name="code">A TestDelegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch``1(NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate throws an exception of a certain Type or one derived from it when called and
            returns it. The returned exception may be <see langword="null"/> when inside a multiple assert block.
            </summary>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.Catch``1(NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate throws an exception of a certain Type or one derived from it when called and
            returns it. The returned exception may be <see langword="null"/> when inside a multiple assert block.
            </summary>
            <param name="code">A TestDelegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.DoesNotThrow(NUnit.Framework.TestDelegate,System.String,System.Object[])">
            <summary>
            Verifies that a delegate does not throw an exception
            </summary>
            <param name="code">A TestDelegate</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.DoesNotThrow(NUnit.Framework.TestDelegate)">
            <summary>
            Verifies that a delegate does not throw an exception.
            </summary>
            <param name="code">A TestDelegate</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. Returns without throwing an exception when inside a multiple assert block.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is false</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(System.Boolean)">
            <summary>
            Asserts that a condition is true. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(System.Boolean,System.Func{System.String})">
            <summary>
            Asserts that a condition is true. Returns without throwing an exception when inside a multiple assert block.
            </summary> 
            <param name="condition">The evaluated condition</param>
            <param name="getExceptionMessage">A function to build the message included with the Exception</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(System.Func{System.Boolean},System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. Returns without throwing an exception when inside a multiple assert block.
            </summary> 
            <param name="condition">A lambda that returns a Boolean</param>
            <param name="message">The message to display if the condition is false</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(System.Func{System.Boolean})">
            <summary>
            Asserts that a condition is true. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="condition">A lambda that returns a Boolean</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(System.Func{System.Boolean},System.Func{System.String})">
            <summary>
            Asserts that a condition is true. Returns without throwing an exception when inside a multiple assert block.
            </summary> 
            <param name="condition">A lambda that returns a Boolean</param>
            <param name="getExceptionMessage">A function to build the message included with the Exception</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That``1(NUnit.Framework.Constraints.ActualValueDelegate{``0},NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to a delegate. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <typeparam name="TActual">The Type being compared.</typeparam>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
            <param name="expr">A Constraint expression to be applied</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That``1(NUnit.Framework.Constraints.ActualValueDelegate{``0},NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to a delegate. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <typeparam name="TActual">The Type being compared.</typeparam>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That``1(NUnit.Framework.Constraints.ActualValueDelegate{``0},NUnit.Framework.Constraints.IResolveConstraint,System.Func{System.String})">
            <summary>
            Apply a constraint to a delegate. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <typeparam name="TActual">The Type being compared.</typeparam>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="getExceptionMessage">A function to build the message included with the Exception</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(NUnit.Framework.TestDelegate,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to a delegate. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="code">A TestDelegate to be executed</param>
            <param name="constraint">A Constraint expression to be applied</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(NUnit.Framework.TestDelegate,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to a delegate. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="code">A TestDelegate to be executed</param>
            <param name="constraint">A Constraint expression to be applied</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That(NUnit.Framework.TestDelegate,NUnit.Framework.Constraints.IResolveConstraint,System.Func{System.String})">
            <summary>
            Apply a constraint to a delegate. Returns without throwing an exception when inside a multiple assert block.
            </summary>
            <param name="code">A TestDelegate to be executed</param>
            <param name="constraint">A Constraint expression to be applied</param>
            <param name="getExceptionMessage">A function to build the message included with the Exception</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That``1(``0,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value. Returns without throwing an exception when inside a multiple assert
            block.
            </summary>
            <typeparam name="TActual">The Type being compared.</typeparam>
            <param name="actual">The actual value to test</param>
            <param name="expression">A Constraint expression to be applied</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That``1(``0,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value. Returns without throwing an exception when inside a multiple assert
            block.
            </summary>
            <typeparam name="TActual">The Type being compared.</typeparam>
            <param name="actual">The actual value to test</param>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.That``1(``0,NUnit.Framework.Constraints.IResolveConstraint,System.Func{System.String})">
            <summary>
            Apply a constraint to an actual value. Returns without throwing an exception when inside a multiple assert
            block.
            </summary>
            <typeparam name="TActual">The Type being compared.</typeparam>
            <param name="actual">The actual value to test</param>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="getExceptionMessage">A function to build the message included with the Exception</param>
        </member>
        <member name="M:NUnit.Framework.Assert.ByVal(System.Object,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value. Returns without throwing an exception when inside a multiple assert
            block. Used as a synonym for That in rare cases where a private setter causes a Visual Basic compilation
            error.
            </summary>
            <param name="actual">The actual value to test</param>
            <param name="expression">A Constraint expression to be applied</param>
        </member>
        <member name="M:NUnit.Framework.Assert.ByVal(System.Object,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value. Returns without throwing an exception when inside a multiple assert
            block. Used as a synonym for That in rare cases where a private setter causes a Visual Basic compilation
            error.
            </summary>
            <remarks>
            This method is provided for use by VB developers needing to test the value of properties with private
            setters.
            </remarks>
            <param name="actual">The actual value to test</param>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsAssignableFrom(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object may be assigned a value of a given Type. Returns without throwing an exception when
            inside a multiple assert block.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsAssignableFrom(System.Type,System.Object)">
            <summary>
            Asserts that an object may be assigned a value of a given Type. Returns without throwing an exception when
            inside a multiple assert block.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsAssignableFrom``1(System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object may be assigned a value of a given Type. Returns without throwing an exception when
            inside a multiple assert block.
            </summary>
            <typeparam name="TExpected">The expected Type.</typeparam>
            <param name="actual">The object under examination</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsAssignableFrom``1(System.Object)">
            <summary>
            Asserts that an object may be assigned a value of a given Type. Returns without throwing an exception when
            inside a multiple assert block.
            </summary>
            <typeparam name="TExpected">The expected Type.</typeparam>
            <param name="actual">The object under examination</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotAssignableFrom(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object may not be assigned a value of a given Type. Returns without throwing an exception
            when inside a multiple assert block.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotAssignableFrom(System.Type,System.Object)">
            <summary>
            Asserts that an object may not be assigned a value of a given Type. Returns without throwing an exception
            when inside a multiple assert block.
            </summary>
            <param name="expected">The expected Type.</param>
            <param name="actual">The object under examination</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotAssignableFrom``1(System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object may not be assigned a value of a given Type. Returns without throwing an exception
            when inside a multiple assert block.
            </summary>
            <typeparam name="TExpected">The expected Type.</typeparam>
            <param name="actual">The object under examination</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotAssignableFrom``1(System.Object)">
            <summary>
            Asserts that an object may not be assigned a value of a given Type. Returns without throwing an exception
            when inside a multiple assert block.
            </summary>
            <typeparam name="TExpected">The expected Type.</typeparam>
            <param name="actual">The object under examination</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsInstanceOf(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object is an instance of a given type. Returns without throwing an exception when inside a
            multiple assert block.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsInstanceOf(System.Type,System.Object)">
            <summary>
            Asserts that an object is an instance of a given type. Returns without throwing an exception when inside a
            multiple assert block.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsInstanceOf``1(System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object is an instance of a given type. Returns without throwing an exception when inside a
            multiple assert block.
            </summary>
            <typeparam name="TExpected">The expected Type</typeparam>
            <param name="actual">The object being examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsInstanceOf``1(System.Object)">
            <summary>
            Asserts that an object is an instance of a given type. Returns without throwing an exception when inside a
            multiple assert block.
            </summary>
            <typeparam name="TExpected">The expected Type</typeparam>
            <param name="actual">The object being examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotInstanceOf(System.Type,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object is not an instance of a given type. Returns without throwing an exception when inside
            a multiple assert block.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotInstanceOf(System.Type,System.Object)">
            <summary>
            Asserts that an object is not an instance of a given type. Returns without throwing an exception when inside
            a multiple assert block.
            </summary>
            <param name="expected">The expected Type</param>
            <param name="actual">The object being examined</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotInstanceOf``1(System.Object,System.String,System.Object[])">
            <summary>
            Asserts that an object is not an instance of a given type. Returns without throwing an exception when inside
            a multiple assert block.
            </summary>
            <typeparam name="TExpected">The expected Type</typeparam>
            <param name="actual">The object being examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Array of objects to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assert.IsNotInstanceOf``1(System.Object)">
            <summary>
            Asserts that an object is not an instance of a given type. Returns without throwing an exception when inside
            a multiple assert block.
            </summary>
            <typeparam name="TExpected">The expected Type</typeparam>
            <param name="actual">The object being examined</param>
        </member>
        <member name="T:NUnit.Framework.TestDelegate">
            <summary>
            Delegate used by tests that execute code and
            capture any thrown exception.
            </summary>
        </member>
        <member name="T:NUnit.Framework.AsyncTestDelegate">
            <summary>
            Delegate used by tests that execute async code and
            capture any thrown exception.
            </summary>
        </member>
        <member name="T:NUnit.Framework.AssertionHelper">
            <summary>
            AssertionHelper is an optional base class for user tests,
            allowing the use of shorter names in making asserts.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>. Works Identically to
            <see cref="M:NUnit.Framework.Assert.That(System.Boolean,System.String,System.Object[])"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is false</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(System.Boolean)">
            <summary>
            Asserts that a condition is true. If the condition is false the method throws
            an <see cref="T:NUnit.Framework.AssertionException"/>. Works Identically to <see cref="M:NUnit.Framework.Assert.That(System.Boolean)"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect``1(NUnit.Framework.Constraints.ActualValueDelegate{``0},NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect``1(NUnit.Framework.Constraints.ActualValueDelegate{``0},NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect(NUnit.Framework.TestDelegate,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Asserts that the code represented by a delegate throws an exception
            that satisfies the constraint provided.
            </summary>
            <param name="code">A TestDelegate to be executed</param>
            <param name="constraint">A Constraint expression to be applied</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect``1(``0,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="actual">The actual value to test</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Expect``1(``0,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an assertion exception on failure.
            </summary>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="actual">The actual value to test</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Map(System.Collections.ICollection)">
            <summary>
            Returns a ListMapper based on a collection.
            </summary>
            <param name="original">The original collection</param>
        </member>
        <member name="P:NUnit.Framework.AssertionHelper.Not">
            <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.AssertionHelper.No">
            <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.AssertionHelper.All">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them succeed.
            </summary>
        </member>
        <member name="P:NUnit.Framework.AssertionHelper.Some">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if at least one of them succeeds.
            </summary>
        </member>
        <member name="P:NUnit.Framework.AssertionHelper.None">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them fail.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Exactly(System.Int32)">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding only if a specified number of them succeed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Property(System.String)">
            <summary>
            Returns a new PropertyConstraintExpression, which will either
            test for the existence of the named property on the object
            being tested or apply any following constraint to that property.
            </summary>
        </member>
        <member name="P:NUnit.Framework.AssertionHelper.Length">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Length property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.AssertionHelper.Count">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Count property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.AssertionHelper.Message">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Message property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.AssertionHelper.InnerException">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the InnerException property of the object being tested.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Attribute(System.Type)">
            <summary>
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Attribute``1">
            <summary>
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            </summary>
        </member>
        <member name="P:NUnit.Framework.AssertionHelper.Null">
            <summary>
            Returns a constraint that tests for null
            </summary>
        </member>
        <member name="P:NUnit.Framework.AssertionHelper.True">
            <summary>
            Returns a constraint that tests for True
            </summary>
        </member>
        <member name="P:NUnit.Framework.AssertionHelper.False">
            <summary>
            Returns a constraint that tests for False
            </summary>
        </member>
        <member name="P:NUnit.Framework.AssertionHelper.Positive">
            <summary>
            Returns a constraint that tests for a positive value
            </summary>
        </member>
        <member name="P:NUnit.Framework.AssertionHelper.Negative">
            <summary>
            Returns a constraint that tests for a negative value
            </summary>
        </member>
        <member name="P:NUnit.Framework.AssertionHelper.Zero">
            <summary>
            Returns a constraint that tests for equality with zero
            </summary>
        </member>
        <member name="P:NUnit.Framework.AssertionHelper.NaN">
            <summary>
            Returns a constraint that tests for NaN
            </summary>
        </member>
        <member name="P:NUnit.Framework.AssertionHelper.Empty">
            <summary>
            Returns a constraint that tests for empty
            </summary>
        </member>
        <member name="P:NUnit.Framework.AssertionHelper.Unique">
            <summary>
            Returns a constraint that tests whether a collection
            contains all unique items.
            </summary>
        </member>
        <member name="P:NUnit.Framework.AssertionHelper.BinarySerializable">
            <summary>
            Returns a constraint that tests whether an object graph is serializable in binary format.
            </summary>
        </member>
        <member name="P:NUnit.Framework.AssertionHelper.XmlSerializable">
            <summary>
            Returns a constraint that tests whether an object graph is serializable in XML format.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.EqualTo(System.Object)">
            <summary>
            Returns a constraint that tests two items for equality
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.SameAs(System.Object)">
            <summary>
            Returns a constraint that tests that two references are the same object
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.GreaterThan(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.GreaterThanOrEqualTo(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than or equal to the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.AtLeast(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than or equal to the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.LessThan(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.LessThanOrEqualTo(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than or equal to the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.AtMost(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than or equal to the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.TypeOf(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.TypeOf``1">
            <summary>
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.InstanceOf(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.InstanceOf``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.AssignableFrom(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.AssignableFrom``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.AssignableTo(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.AssignableTo``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.EquivalentTo(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a collection containing the same elements as the
            collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.SubsetOf(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a subset of the collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.SupersetOf(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a superset of the collection supplied as an argument.
            </summary>
        </member>
        <member name="P:NUnit.Framework.AssertionHelper.Ordered">
            <summary>
            Returns a constraint that tests whether a collection is ordered
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Member(System.Object)">
            <summary>
            Returns a new <see cref="T:NUnit.Framework.Constraints.SomeItemsConstraint"/> checking for the
            presence of a particular object in the collection.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Contains(System.Object)">
            <summary>
            <para>
            Returns a new <see cref="T:NUnit.Framework.Constraints.SomeItemsConstraint"/> checking for the
            presence of a particular object in the collection.
            </para>
            <para>
            To search for a substring instead of a collection element, use the
            <see cref="M:NUnit.Framework.AssertionHelper.Contains(System.String)"/> overload.
            </para>
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Contains(System.String)">
            <summary>
            <para>
            Returns a new ContainsConstraint. This constraint
            will, in turn, make use of the appropriate second-level
            constraint, depending on the type of the actual argument.
            </para>
            <para>
            To search for a collection element instead of a substring, use the
            <see cref="M:NUnit.Framework.AssertionHelper.Contains(System.Object)"/> overload.
            </para>
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.StringContaining(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.ContainsSubstring(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.DoesNotContain(System.String)">
            <summary>
            Returns a constraint that fails if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.StartWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.StartsWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.StringStarting(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.DoesNotStartWith(System.String)">
            <summary>
            Returns a constraint that fails if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.EndWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.EndsWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.StringEnding(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.DoesNotEndWith(System.String)">
            <summary>
            Returns a constraint that fails if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Match(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value matches the regular expression supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.Matches(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value matches the regular expression supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.StringMatching(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value matches the regular expression supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.DoesNotMatch(System.String)">
            <summary>
            Returns a constraint that fails if the actual
            value matches the pattern supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.SamePath(System.String)">
            <summary>
            Returns a constraint that tests whether the path provided
            is the same as an expected path after canonicalization.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.SubPathOf(System.String)">
            <summary>
            Returns a constraint that tests whether the path provided
            is a subpath of the expected path after canonicalization.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.SamePathOrUnder(System.String)">
            <summary>
            Returns a constraint that tests whether the path provided
            is the same path or under an expected path after canonicalization.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionHelper.InRange(System.Object,System.Object)">
            <summary>
            Returns a constraint that tests whether the actual value falls
            within a specified range.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Assume">
            <summary>
            Provides static methods to express the assumptions
            that must be met for a test to give a meaningful
            result. If an assumption is not met, the test
            should produce an inconclusive result.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Assume.Equals(System.Object,System.Object)">
            <summary>
            DO NOT USE!
            The Equals method throws an InvalidOperationException. This is done
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a">The left object.</param>
            <param name="b">The right object.</param>
            <returns>Not applicable</returns>
        </member>
        <member name="M:NUnit.Framework.Assume.ReferenceEquals(System.Object,System.Object)">
            <summary>
            DO NOT USE!
            The ReferenceEquals method throws an InvalidOperationException. This is done
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a">The left object.</param>
            <param name="b">The right object.</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That``1(NUnit.Framework.Constraints.ActualValueDelegate{``0},NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <typeparam name="TActual">The Type being compared.</typeparam>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
            <param name="expr">A Constraint expression to be applied</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That``1(NUnit.Framework.Constraints.ActualValueDelegate{``0},NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <typeparam name="TActual">The Type being compared.</typeparam>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That``1(NUnit.Framework.Constraints.ActualValueDelegate{``0},NUnit.Framework.Constraints.IResolveConstraint,System.Func{System.String})">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <typeparam name="TActual">The Type being compared.</typeparam>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="getExceptionMessage">A function to build the message included with the Exception</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false, the method throws
            an <see cref="T:NUnit.Framework.InconclusiveException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is false</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(System.Boolean)">
            <summary>
            Asserts that a condition is true. If the condition is false, the
            method throws an <see cref="T:NUnit.Framework.InconclusiveException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(System.Boolean,System.Func{System.String})">
            <summary>
            Asserts that a condition is true. If the condition is false, the method throws
            an <see cref="T:NUnit.Framework.InconclusiveException"/>.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="getExceptionMessage">A function to build the message included with the Exception</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(System.Func{System.Boolean},System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false, the method throws
            an <see cref="T:NUnit.Framework.InconclusiveException"/>.
            </summary>
            <param name="condition">A lambda that returns a Boolean</param>
            <param name="message">The message to display if the condition is false</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(System.Func{System.Boolean})">
            <summary>
            Asserts that a condition is true. If the condition is false, the method throws
            an <see cref="T:NUnit.Framework.InconclusiveException"/>.
            </summary>
            <param name="condition">A lambda that returns a Boolean</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(System.Func{System.Boolean},System.Func{System.String})">
            <summary>
            Asserts that a condition is true. If the condition is false, the method throws
            an <see cref="T:NUnit.Framework.InconclusiveException"/>.
            </summary>
            <param name="condition">A lambda that returns a Boolean</param>
            <param name="getExceptionMessage">A function to build the message included with the Exception</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That(NUnit.Framework.TestDelegate,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Asserts that the code represented by a delegate throws an exception
            that satisfies the constraint provided.
            </summary>
            <param name="code">A TestDelegate to be executed</param>
            <param name="constraint">A ThrowsConstraint used in the test</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That``1(``0,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <typeparam name="TActual">The Type being compared.</typeparam>
            <param name="actual">The actual value to test</param>
            <param name="expression">A Constraint expression to be applied</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That``1(``0,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <typeparam name="TActual">The Type being compared.</typeparam>
            <param name="actual">The actual value to test</param>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Assume.That``1(``0,NUnit.Framework.Constraints.IResolveConstraint,System.Func{System.String})">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and throwing an InconclusiveException on failure.
            </summary>
            <typeparam name="TActual">The Type being compared.</typeparam>
            <param name="actual">The actual value to test</param>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="getExceptionMessage">A function to build the message included with the Exception</param>
        </member>
        <member name="T:NUnit.Framework.ApartmentAttribute">
            <summary>
            Marks a test as needing to be run in a particular threading apartment state. This will cause it
            to run in a separate thread if necessary.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ApartmentAttribute.#ctor(System.Threading.ApartmentState)">
            <summary>
            Construct an ApartmentAttribute
            </summary>
            <param name="apartmentState">The apartment state that this test must be run under. You must pass in a valid apartment state.</param>
        </member>
        <member name="T:NUnit.Framework.AuthorAttribute">
            <summary>
            Provides the author of a test or test fixture. 
            </summary>
        </member>
        <member name="M:NUnit.Framework.AuthorAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.AuthorAttribute"/> class.
            </summary>
            <param name="name">The name of the author.</param>
        </member>
        <member name="M:NUnit.Framework.AuthorAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.AuthorAttribute"/> class.
            </summary>
            <param name="name">The name of the author.</param>
            <param name="email">The email address of the author.</param>
        </member>
        <member name="T:NUnit.Framework.CategoryAttribute">
            <summary>
            Applies a category to a test
            </summary>
        </member>
        <member name="F:NUnit.Framework.CategoryAttribute.categoryName">
            <summary>
            The name of the category
            </summary>
        </member>
        <member name="M:NUnit.Framework.CategoryAttribute.#ctor(System.String)">
            <summary>
            Construct attribute for a given category based on
            a name. The name may not contain the characters ',',
            '+', '-' or '!'. However, this is not checked in the
            constructor since it would cause an error to arise at
            as the test was loaded without giving a clear indication
            of where the problem is located. The error is handled
            in NUnitFramework.cs by marking the test as not
            runnable.
            </summary>
            <param name="name">The name of the category</param>
        </member>
        <member name="M:NUnit.Framework.CategoryAttribute.#ctor">
            <summary>
            Protected constructor uses the Type name as the name
            of the category.
            </summary>
        </member>
        <member name="P:NUnit.Framework.CategoryAttribute.Name">
            <summary>
            The name of the category
            </summary>
        </member>
        <member name="M:NUnit.Framework.CategoryAttribute.ApplyToTest(NUnit.Framework.Internal.Test)">
            <summary>
            Modifies a test by adding a category to it.
            </summary>
            <param name="test">The test to modify</param>
        </member>
        <member name="T:NUnit.Framework.CombinatorialAttribute">
            <summary>
            Marks a test to use a combinatorial join of any argument data provided. 
            Since this is the default, the attribute is optional.
            </summary>
        </member>
        <member name="M:NUnit.Framework.CombinatorialAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.CombiningStrategyAttribute">
            <summary>
            Marks a test as using a particular CombiningStrategy to join any supplied parameter data.
            Since this is the default, the attribute is optional.
            </summary>
        </member>
        <member name="M:NUnit.Framework.CombiningStrategyAttribute.#ctor(NUnit.Framework.Interfaces.ICombiningStrategy,NUnit.Framework.Interfaces.IParameterDataProvider)">
            <summary>
            Construct a CombiningStrategyAttribute incorporating an
            ICombiningStrategy and an IParameterDataProvider.
            </summary>
            <param name="strategy">Combining strategy to be used in combining data</param>
            <param name="provider">An IParameterDataProvider to supply data</param>
        </member>
        <member name="M:NUnit.Framework.CombiningStrategyAttribute.#ctor(System.Object,System.Object)">
            <summary>
            Construct a CombiningStrategyAttribute incorporating an object
            that implements ICombiningStrategy and an IParameterDataProvider.
            This constructor is provided for CLS compliance.
            </summary>
            <param name="strategy">Combining strategy to be used in combining data</param>
            <param name="provider">An IParameterDataProvider to supply data</param>
        </member>
        <member name="M:NUnit.Framework.CombiningStrategyAttribute.BuildFrom(NUnit.Framework.Interfaces.IMethodInfo,NUnit.Framework.Internal.Test)">
            <summary>
            Builds any number of tests from the specified method and context.
            </summary>
            <param name="method">The MethodInfo for which tests are to be constructed.</param>
            <param name="suite">The suite to which the tests will be added.</param>
        </member>
        <member name="M:NUnit.Framework.CombiningStrategyAttribute.ApplyToTest(NUnit.Framework.Internal.Test)">
            <summary>
            Modify the test by adding the name of the combining strategy
            to the properties.
            </summary>
            <param name="test">The test to modify</param>
        </member>
        <member name="T:NUnit.Framework.CultureAttribute">
            <summary>
            Marks an assembly, test fixture or test method as applying to a specific Culture.
            </summary>
        </member>
        <member name="M:NUnit.Framework.CultureAttribute.#ctor">
            <summary>
            Constructor with no cultures specified, for use
            with named property syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.CultureAttribute.#ctor(System.String)">
            <summary>
            Constructor taking one or more cultures
            </summary>
            <param name="cultures">Comma-delimited list of cultures</param>
        </member>
        <member name="M:NUnit.Framework.CultureAttribute.ApplyToTest(NUnit.Framework.Internal.Test)">
            <summary>
            Causes a test to be skipped if this CultureAttribute is not satisfied.
            </summary>
            <param name="test">The test to modify</param>
        </member>
        <member name="M:NUnit.Framework.CultureAttribute.IsCultureSupported(System.String@)">
            <summary>
            Tests to determine if the current culture is supported
            based on the properties of this attribute.
            </summary>
            <returns>True, if the current culture is supported</returns>
        </member>
        <member name="M:NUnit.Framework.CultureAttribute.IsCultureSupported(System.String)">
            <summary>
            Test to determine if the a particular culture or comma-
            delimited set of cultures is in use.
            </summary>
            <param name="culture">Name of the culture or comma-separated list of culture ids</param>
            <returns>True if the culture is in use on the system</returns>
        </member>
        <member name="M:NUnit.Framework.CultureAttribute.IsCultureSupported(System.String[])">
            <summary>
            Test to determine if one of a collection of cultures
            is being used currently.
            </summary>
            <param name="cultures"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.DataAttribute">
            <summary>
            Abstract base class for all data-providing attributes defined by NUnit.
            Used to select all data sources for a method, class or parameter.
            </summary>
        </member>
        <member name="M:NUnit.Framework.DataAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.DatapointAttribute">
            <summary>
            Marks a field for use as a datapoint when executing a theory within 
            the same fixture that requires an argument of the field's Type.
            </summary>
        </member>
        <member name="T:NUnit.Framework.DatapointsAttribute">
            <summary>
            Marks a field, property or method as providing a set of datapoints for use
            in executing any theories within the same fixture that require an argument of 
            the provided Type. The data source may provide an array of the required Type 
            or an <see cref="T:System.Collections.Generic.IEnumerable`1"/>. Synonymous with <see cref="T:NUnit.Framework.DatapointSourceAttribute"/>.
            </summary>
        </member>
        <member name="T:NUnit.Framework.DatapointSourceAttribute">
            <summary>
            Marks a field, property or method as providing a set of datapoints for use 
            in executing any theories within the same fixture that require an argument 
            of the provided type. The data source may provide an array of the required 
            Type or an <see cref="T:System.Collections.Generic.IEnumerable`1"/>. Synonymous with <see cref="T:NUnit.Framework.DatapointsAttribute"/>.
            </summary>
        </member>
        <member name="T:NUnit.Framework.DefaultFloatingPointToleranceAttribute">
            <summary>
            Sets the tolerance used by default when checking the equality of floating point values
            within the test assembly, fixture or method.
            </summary>
        </member>
        <member name="M:NUnit.Framework.DefaultFloatingPointToleranceAttribute.#ctor(System.Double)">
            <summary>
            Construct specifying an amount
            </summary>
            <param name="amount"></param>
        </member>
        <member name="M:NUnit.Framework.DefaultFloatingPointToleranceAttribute.ApplyToContext(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Apply changes to the TestExecutionContext
            </summary>
            <param name="context">The TestExecutionContext</param>
        </member>
        <member name="T:NUnit.Framework.DescriptionAttribute">
            <summary>
            Provides the descriptive text relating to the assembly, test fixture or test method.
            </summary>
        </member>
        <member name="M:NUnit.Framework.DescriptionAttribute.#ctor(System.String)">
            <summary>
            Construct a description Attribute
            </summary>
            <param name="description">The text of the description</param>
        </member>
        <member name="T:NUnit.Framework.ExplicitAttribute">
            <summary>
            Marks an assembly, test fixture or test method such that it will only run if explicitly 
            executed from the GUI, command line or included within a test filter. 
            The test will not be run simply because an enclosing suite is run.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ExplicitAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.ExplicitAttribute.#ctor(System.String)">
            <summary>
            Constructor with a reason
            </summary>
            <param name="reason">The reason test is marked explicit</param>
        </member>
        <member name="M:NUnit.Framework.ExplicitAttribute.ApplyToTest(NUnit.Framework.Internal.Test)">
            <summary>
            Modifies a test by marking it as explicit.
            </summary>
            <param name="test">The test to modify</param>
        </member>
        <member name="T:NUnit.Framework.FixtureLifeCycleAttribute">
            <summary>
            Specify the life cycle of a Fixture
            </summary>
        </member>
        <member name="M:NUnit.Framework.FixtureLifeCycleAttribute.#ctor(NUnit.Framework.LifeCycle)">
            <summary>
            Construct a FixtureLifeCycleAttribute with a specified <see cref="P:NUnit.Framework.FixtureLifeCycleAttribute.LifeCycle"/>.
            </summary>
        </member>
        <member name="P:NUnit.Framework.FixtureLifeCycleAttribute.LifeCycle">
            <summary>
            Defines the life cycle for this test fixture or assembly.
            </summary>
        </member>
        <member name="M:NUnit.Framework.FixtureLifeCycleAttribute.ApplyToTest(NUnit.Framework.Internal.Test)">
            <summary>
            Overridden to set a TestFixture's <see cref="P:NUnit.Framework.FixtureLifeCycleAttribute.LifeCycle"/>.
            </summary>
        </member>
        <member name="T:NUnit.Framework.IgnoreAttribute">
            <summary>
            Marks an assembly, test fixture or test method as being ignored. Ignored tests result in a warning message when the tests are run.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IgnoreAttribute.#ctor(System.String)">
            <summary>
            Constructs the attribute giving a reason for ignoring the test
            </summary>
            <param name="reason">The reason for ignoring the test</param>
        </member>
        <member name="P:NUnit.Framework.IgnoreAttribute.Until">
            <summary>
            The date in the future to stop ignoring the test as a string in UTC time. 
            For example for a date and time, "2014-12-25 08:10:00Z" or for just a date,
            "2014-12-25". If just a date is given, the Ignore will expire at midnight UTC.
            </summary>
            <remarks>
            Once the ignore until date has passed, the test will be marked
            as runnable. Tests with an ignore until date will have an IgnoreUntilDate
            property set which will appear in the test results.
            </remarks>
            <exception cref="T:System.FormatException">The string does not contain a valid string representation of a date and time.</exception> 
        </member>
        <member name="M:NUnit.Framework.IgnoreAttribute.ApplyToTest(NUnit.Framework.Internal.Test)">
            <summary>
            Modifies a test by marking it as Ignored.
            </summary>
            <param name="test">The test to modify</param>
        </member>
        <member name="T:NUnit.Framework.IncludeExcludeAttribute">
            <summary>
            Abstract base for attributes that are used to include tests in 
            the test run based on environmental settings.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IncludeExcludeAttribute.#ctor">
            <summary>
            Constructor with no included items specified, for use
            with named property syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IncludeExcludeAttribute.#ctor(System.String)">
            <summary>
            Constructor taking one or more included items
            </summary>
            <param name="include">Comma-delimited list of included items</param>
        </member>
        <member name="P:NUnit.Framework.IncludeExcludeAttribute.Include">
            <summary>
            Name of the item that is needed in order for
            a test to run. Multiple items may be given,
            separated by a comma.
            </summary>
        </member>
        <member name="P:NUnit.Framework.IncludeExcludeAttribute.Exclude">
            <summary>
            Name of the item to be excluded. Multiple items
            may be given, separated by a comma.
            </summary>
        </member>
        <member name="P:NUnit.Framework.IncludeExcludeAttribute.Reason">
            <summary>
            The reason for including or excluding the test
            </summary>
        </member>
        <member name="T:NUnit.Framework.LevelOfParallelismAttribute">
            <summary>
            Sets the number of worker threads that may be allocated by the framework 
            for running tests.
            </summary>
        </member>
        <member name="M:NUnit.Framework.LevelOfParallelismAttribute.#ctor(System.Int32)">
            <summary>
            Construct a LevelOfParallelismAttribute.
            </summary>
            <param name="level">The number of worker threads to be created by the framework.</param>
        </member>
        <member name="T:NUnit.Framework.LifeCycle">
            <summary>
            Specifies the life cycle for a test fixture.
            </summary>
        </member>
        <member name="F:NUnit.Framework.LifeCycle.SingleInstance">
            <summary>
            A single instance is created and shared for all test cases.
            </summary>
        </member>
        <member name="F:NUnit.Framework.LifeCycle.InstancePerTestCase">
            <summary>
            A new instance is created for each test case.
            </summary>
        </member>
        <member name="T:NUnit.Framework.MaxTimeAttribute">
            <summary>
            Specifies the maximum time (in milliseconds) for a test case to succeed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.MaxTimeAttribute.#ctor(System.Int32)">
            <summary>
            Construct a MaxTimeAttribute, given a time in milliseconds.
            </summary>
            <param name="milliseconds">The maximum elapsed time in milliseconds</param>
        </member>
        <member name="T:NUnit.Framework.NonParallelizableAttribute">
            <summary>
            Marks tests that should NOT be run in parallel.
            </summary>
        </member>
        <member name="M:NUnit.Framework.NonParallelizableAttribute.#ctor">
            <summary>
            Construct a NonParallelizableAttribute.
            </summary>
        </member>
        <member name="T:NUnit.Framework.NonTestAssemblyAttribute">
            <summary>
            Used by third-party frameworks, or other software, that reference 
            the NUnit framework but do not contain any tests. Applying the 
            attribute indicates that the assembly is not a test assembly and 
            may prevent errors if certain runners attempt to load the assembly. 
            Note that recognition of the attribute depends on each individual runner.
            </summary>
        </member>
        <member name="T:NUnit.Framework.NUnitAttribute">
            <summary>
            Abstract base class for all custom attributes defined by NUnit.
            </summary>
        </member>
        <member name="M:NUnit.Framework.NUnitAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.OneTimeSetUpAttribute">
            <summary>
            Identifies a method that is called once to perform setup before any child tests are run.
            </summary>
        </member>
        <member name="T:NUnit.Framework.OneTimeTearDownAttribute">
            <summary>
            Identifies a method to be called once after all the child tests have run. 
            The method is guaranteed to be called, even if an exception is thrown.
            </summary>
        </member>
        <member name="T:NUnit.Framework.OrderAttribute">
            <summary>
            Defines the order that the test will run in
            </summary>
        </member>
        <member name="F:NUnit.Framework.OrderAttribute.Order">
            <summary>
            Defines the order that the test will run in
            </summary>
        </member>
        <member name="M:NUnit.Framework.OrderAttribute.#ctor(System.Int32)">
            <summary>
            Defines the order that the test will run in
            </summary>
            <param name="order"></param>
        </member>
        <member name="M:NUnit.Framework.OrderAttribute.ApplyToTest(NUnit.Framework.Internal.Test)">
            <summary>
            Modifies a test as defined for the specific attribute.
            </summary>
            <param name="test">The test to modify</param>
        </member>
        <member name="T:NUnit.Framework.PairwiseAttribute">
            <summary>
            Marks a test as using a pairwise join of any supplied argument data. Arguments will be 
            combined in such a way that all possible pairs of arguments are used.
            </summary>
        </member>
        <member name="M:NUnit.Framework.PairwiseAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.ParallelizableAttribute">
            <summary>
            Marks a test assembly, fixture or method that may be run in parallel.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ParallelizableAttribute.#ctor">
            <summary>
            Construct a ParallelizableAttribute using default ParallelScope.Self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ParallelizableAttribute.#ctor(NUnit.Framework.ParallelScope)">
            <summary>
            Construct a ParallelizableAttribute with a specified scope.
            </summary>
            <param name="scope">The ParallelScope associated with this attribute.</param>
        </member>
        <member name="P:NUnit.Framework.ParallelizableAttribute.Scope">
            <summary>
            Defines the degree to which this test and its descendants may be run in parallel
            </summary>
        </member>
        <member name="M:NUnit.Framework.ParallelizableAttribute.ApplyToTest(NUnit.Framework.Internal.Test)">
            <summary>
            Overridden to check for invalid combinations of settings
            </summary>
            <param name="test"></param>
        </member>
        <member name="M:NUnit.Framework.ParallelizableAttribute.ApplyToContext(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Modify the context to be used for child tests
            </summary>
            <param name="context">The current TestExecutionContext</param>
        </member>
        <member name="T:NUnit.Framework.ParallelScope">
            <summary>
            Specifies the degree to which a test, and its descendants, 
            may be run in parallel.
            </summary>
        </member>
        <member name="F:NUnit.Framework.ParallelScope.Default">
            <summary>
            No ParallelScope was specified on the test
            </summary>
        </member>
        <member name="F:NUnit.Framework.ParallelScope.Self">
            <summary>
            The test may be run in parallel with others at the same level.
            Valid on classes and methods but has no effect on assemblies.
            </summary>
        </member>
        <member name="F:NUnit.Framework.ParallelScope.None">
            <summary>
            Test may not be run in parallel with any others. Valid on
            classes and methods but not assemblies.
            </summary>
        </member>
        <member name="F:NUnit.Framework.ParallelScope.ItemMask">
            <summary>
            Mask used to extract the flags that apply to the item on which a
            ParallelizableAttribute has been placed, as opposed to descendants.
            </summary>
        </member>
        <member name="F:NUnit.Framework.ParallelScope.Children">
            <summary>
            Descendants of the test may be run in parallel with one another.
            Valid on assemblies and classes but not on non-parameterized methods.
            </summary>
        </member>
        <member name="F:NUnit.Framework.ParallelScope.Fixtures">
            <summary>
            Descendants of the test down to the level of TestFixtures may be 
            run in parallel with one another. Valid on assemblies and classes
            but not on methods.
            </summary>
        </member>
        <member name="F:NUnit.Framework.ParallelScope.ContextMask">
            <summary>
            Mask used to extract all the flags that impact descendants of a 
            test and place them in the TestExecutionContext.
            </summary>
        </member>
        <member name="F:NUnit.Framework.ParallelScope.All">
            <summary>
            The test and its descendants may be run in parallel with others at
            the same level. Valid on classes and parameterized methods.
            For assemblies it is recommended to use <see cref="F:NUnit.Framework.ParallelScope.Children"/>
            instead, as <see cref="F:NUnit.Framework.ParallelScope.Self"/> has no effect on assemblies.
            </summary>
        </member>
        <member name="T:NUnit.Framework.PlatformAttribute">
            <summary>
            Marks an assembly, test fixture or test method as applying to a specific platform.
            </summary>
        </member>
        <member name="M:NUnit.Framework.PlatformAttribute.#ctor">
            <summary>
            Constructor with no platforms specified, for use
            with named property syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.PlatformAttribute.#ctor(System.String)">
            <summary>
            Constructor taking one or more platforms
            </summary>
            <param name="platforms">Comma-delimited list of platforms</param>
        </member>
        <member name="M:NUnit.Framework.PlatformAttribute.ApplyToTest(NUnit.Framework.Internal.Test)">
            <summary>
            Causes a test to be skipped if this PlatformAttribute is not satisfied.
            </summary>
            <param name="test">The test to modify</param>
        </member>
        <member name="T:NUnit.Framework.PropertyAttribute">
            <summary>
            Attaches information to a test assembly, fixture or method as a name/value pair.
            </summary>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor(System.String,System.String)">
            <summary>
            Construct a PropertyAttribute with a name and string value
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The property value</param>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Construct a PropertyAttribute with a name and int value
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The property value</param>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor(System.String,System.Double)">
            <summary>
            Construct a PropertyAttribute with a name and double value
            </summary>
            <param name="propertyName">The name of the property</param>
            <param name="propertyValue">The property value</param>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor">
            <summary>
            Constructor for derived classes that set the
            property dictionary directly.
            </summary>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.#ctor(System.Object)">
            <summary>
            Constructor for use by derived classes that use the
            name of the type as the property name. Derived classes
            must ensure that the Type of the property value is
            a standard type supported by the BCL. Any custom
            types will cause a serialization Exception when
            in the client.
            </summary>
        </member>
        <member name="P:NUnit.Framework.PropertyAttribute.Properties">
            <summary>
            Gets the property dictionary for this attribute
            </summary>
        </member>
        <member name="M:NUnit.Framework.PropertyAttribute.ApplyToTest(NUnit.Framework.Internal.Test)">
            <summary>
            Modifies a test by adding properties to it.
            </summary>
            <param name="test">The test to modify</param>
        </member>
        <member name="T:NUnit.Framework.RandomAttribute">
            <summary>
            Supplies a set of random values to a single parameter of a parameterized test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.RandomAttribute.Distinct">
            <summary>
            If true, no value will be repeated.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.Int32)">
            <summary>
            Construct a random set of values appropriate for the Type of the
            parameter on which the attribute appears, specifying only the count.
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates <see cref="T:System.Int32"/> values within a specified range.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            Generates <see cref="T:System.UInt32"/> values within a specified range.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.Int64,System.Int64,System.Int32)">
            <summary>
            Generates <see cref="T:System.Int64"/> values within a specified range.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.UInt64,System.UInt64,System.Int32)">
            <summary>
            Generates <see cref="T:System.UInt64"/> values within a specified range.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.Int16,System.Int16,System.Int32)">
            <summary>
            Generates <see cref="T:System.Int16"/> values within a specified range.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.UInt16,System.UInt16,System.Int32)">
            <summary>
            Generates <see cref="T:System.UInt16"/> values within a specified range.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.Double,System.Double,System.Int32)">
            <summary>
            Generates <see cref="T:System.Double"/> values within a specified range.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.Single,System.Single,System.Int32)">
            <summary>
            Generates <see cref="T:System.Single"/> values within a specified range.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.Byte,System.Byte,System.Int32)">
            <summary>
            Generates <see cref="T:System.Byte"/> values within a specified range.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.#ctor(System.SByte,System.SByte,System.Int32)">
            <summary>
            Generates <see cref="T:System.SByte"/> values within a specified range.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RandomAttribute.GetData(NUnit.Framework.Interfaces.IParameterInfo)">
            <summary>
            Retrieves a list of arguments which can be passed to the specified parameter.
            </summary>
            <param name="parameter">The parameter of a parameterized test.</param>
        </member>
        <member name="T:NUnit.Framework.RangeAttribute">
            <summary>
            Supplies a range of values to an individual parameter of a parameterized test.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a range of <see cref="T:System.Int32"/> values using the default step of 1.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a range of <see cref="T:System.Int32"/> values with the specified step size.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Constructs a range of <see cref="T:System.UInt32"/> values using the default step of 1.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Constructs a range of <see cref="T:System.UInt32"/> values with the specified step size.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Int64,System.Int64)">
            <summary>
            Constructs a range of <see cref="T:System.Int64"/> values using a default step of 1.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary>
            Constructs a range of <see cref="T:System.Int64"/> values with the specified step size.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Constructs a range of <see cref="T:System.UInt64"/> values using the default step of 1.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Constructs a range of <see cref="T:System.UInt64"/> values with the specified step size.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a range of <see cref="T:System.Double"/> values with the specified step size.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a range of <see cref="T:System.Single"/> values with the specified step size.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.GetData(NUnit.Framework.Interfaces.IParameterInfo)">
            <summary>
            Retrieves a list of arguments which can be passed to the specified parameter.
            </summary>
            <param name="parameter">The parameter of a parameterized test.</param>
        </member>
        <member name="M:NUnit.Framework.RangeAttribute.ToString">
            <summary>Returns a string that represents the current object.</summary>
        </member>
        <member name="T:NUnit.Framework.RepeatAttribute">
            <summary>
            Specifies that a test should be run multiple times.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RepeatAttribute.#ctor(System.Int32)">
            <summary>
            Construct a RepeatAttribute
            </summary>
            <param name="count">The number of times to run the test</param>
        </member>
        <member name="M:NUnit.Framework.RepeatAttribute.Wrap(NUnit.Framework.Internal.Commands.TestCommand)">
            <summary>
            Wrap a command and return the result.
            </summary>
            <param name="command">The command to be wrapped</param>
            <returns>The wrapped command</returns>
        </member>
        <member name="T:NUnit.Framework.RepeatAttribute.RepeatedTestCommand">
            <summary>
            The test command for the RepeatAttribute
            </summary>
        </member>
        <member name="M:NUnit.Framework.RepeatAttribute.RepeatedTestCommand.#ctor(NUnit.Framework.Internal.Commands.TestCommand,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.RepeatAttribute.RepeatedTestCommand"/> class.
            </summary>
            <param name="innerCommand">The inner command.</param>
            <param name="repeatCount">The number of repetitions</param>
        </member>
        <member name="M:NUnit.Framework.RepeatAttribute.RepeatedTestCommand.Execute(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Runs the test, saving a TestResult in the supplied TestExecutionContext.
            </summary>
            <param name="context">The context in which the test should run.</param>
            <returns>A TestResult</returns>
        </member>
        <member name="T:NUnit.Framework.RequiresThreadAttribute">
            <summary>
            Marks a test that must run on a separate thread.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RequiresThreadAttribute.#ctor">
            <summary>
            Construct a RequiresThreadAttribute
            </summary>
        </member>
        <member name="M:NUnit.Framework.RequiresThreadAttribute.#ctor(System.Threading.ApartmentState)">
            <summary>
            Construct a RequiresThreadAttribute, specifying the apartment
            </summary>
        </member>
        <member name="T:NUnit.Framework.RetryAttribute">
            <summary>
            Specifies that a test method should be rerun on failure up to the specified 
            maximum number of times.
            </summary>
        </member>
        <member name="M:NUnit.Framework.RetryAttribute.#ctor(System.Int32)">
            <summary>
            Construct a <see cref="T:NUnit.Framework.RetryAttribute" />
            </summary>
            <param name="tryCount">The maximum number of times the test should be run if it fails</param>
        </member>
        <member name="M:NUnit.Framework.RetryAttribute.Wrap(NUnit.Framework.Internal.Commands.TestCommand)">
            <summary>
            Wrap a command and return the result.
            </summary>
            <param name="command">The command to be wrapped</param>
            <returns>The wrapped command</returns>
        </member>
        <member name="T:NUnit.Framework.RetryAttribute.RetryCommand">
            <summary>
            The test command for the <see cref="T:NUnit.Framework.RetryAttribute"/>
            </summary>
        </member>
        <member name="M:NUnit.Framework.RetryAttribute.RetryCommand.#ctor(NUnit.Framework.Internal.Commands.TestCommand,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.RetryAttribute.RetryCommand"/> class.
            </summary>
            <param name="innerCommand">The inner command.</param>
            <param name="tryCount">The maximum number of repetitions</param>
        </member>
        <member name="M:NUnit.Framework.RetryAttribute.RetryCommand.Execute(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Runs the test, saving a TestResult in the supplied TestExecutionContext.
            </summary>
            <param name="context">The context in which the test should run.</param>
            <returns>A TestResult</returns>
        </member>
        <member name="T:NUnit.Framework.SequentialAttribute">
            <summary>
            Marks a test to use a sequential join of any provided argument data. 
            Arguments will be combined into test cases, taking the next value of 
            each argument until all are used.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SequentialAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.SetCultureAttribute">
            <summary>
            Sets the current Culture on an assembly, test fixture or test method for
            the duration of a test. The culture remains set until the test or fixture
            completes and is then reset to its original value.
            </summary>
            <seealso cref="T:NUnit.Framework.SetUICultureAttribute"/>
        </member>
        <member name="M:NUnit.Framework.SetCultureAttribute.#ctor(System.String)">
            <summary>
            Construct given the name of a culture
            </summary>
            <param name="culture"></param>
        </member>
        <member name="T:NUnit.Framework.SetUICultureAttribute">
            <summary>
            Sets the current UI Culture on an assembly, test fixture or test method
            for the duration of a test. The UI culture remains set until the test or
            fixture completes and is then reset to its original value.
            </summary>
            <seealso cref="T:NUnit.Framework.SetCultureAttribute"/>
        </member>
        <member name="M:NUnit.Framework.SetUICultureAttribute.#ctor(System.String)">
            <summary>
            Construct given the name of a culture
            </summary>
            <param name="culture"></param>
        </member>
        <member name="T:NUnit.Framework.SetUpAttribute">
            <summary>
            Identifies a method to be called immediately before each test is run.
            </summary>
        </member>
        <member name="T:NUnit.Framework.SetUpFixtureAttribute">
            <summary>
            Identifies a class as containing <see cref="T:NUnit.Framework.OneTimeSetUpAttribute" /> or
            <see cref="T:NUnit.Framework.OneTimeTearDownAttribute" /> methods for all the test fixtures
            under a given namespace.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SetUpFixtureAttribute.BuildFrom(NUnit.Framework.Interfaces.ITypeInfo)">
            <summary>
            Builds a <see cref="T:NUnit.Framework.Internal.SetUpFixture"/> from the specified type.
            </summary>
            <param name="typeInfo">The type info of the fixture to be used.</param>
        </member>
        <member name="T:NUnit.Framework.SingleThreadedAttribute">
            <summary>
            Marks a test fixture as requiring all child tests to be run on the 
            same thread as the OneTimeSetUp and OneTimeTearDown. A flag in the
            <see cref="T:NUnit.Framework.Internal.TestExecutionContext"/> is set forcing all child tests 
            to be run sequentially on the current thread. 
            Any <see cref="T:NUnit.Framework.ParallelScope"/> setting is ignored.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SingleThreadedAttribute.ApplyToContext(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Apply changes to the TestExecutionContext
            </summary>
            <param name="context">The TestExecutionContext</param>
        </member>
        <member name="T:NUnit.Framework.TearDownAttribute">
            <summary>
            Identifies a method to be called immediately after each test is run. 
            The method is guaranteed to be called, even if an exception is thrown.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestActionAttribute">
            <summary>
            Abstract attribute providing actions to execute before and after tests.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestActionAttribute.BeforeTest(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Executed before each test is run
            </summary>
            <param name="test">The test that is going to be run.</param>
        </member>
        <member name="M:NUnit.Framework.TestActionAttribute.AfterTest(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Executed after each test is run
            </summary>
            <param name="test">The test that has just been run.</param>
        </member>
        <member name="P:NUnit.Framework.TestActionAttribute.Targets">
            <summary>
            Provides the target for the action attribute
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestAssemblyDirectoryResolveAttribute">
            <summary>
            Marks a test assembly as needing a special assembly resolution hook that will 
            explicitly search the test assembly's directory for dependent assemblies. 
            This works around a conflict between mixed-mode assembly initialization and 
            tests running in their own AppDomain in some cases.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestAttribute">
             <summary>
             Marks the method as callable from the NUnit test runner.
             </summary>
            
             <example>
             [TestFixture]
             public class Fixture
             {
               [Test]
               public void MethodToTest()
               {}
            
               [Test(Description = "more detailed description")]
               public void TestDescriptionMethod()
               {}
             }
             </example>
            
        </member>
        <member name="P:NUnit.Framework.TestAttribute.Description">
            <summary>
            Descriptive text for this test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestAttribute.Author">
            <summary>
            The author of this test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestAttribute.TestOf">
            <summary>
            The type that this test is testing
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestAttribute.ExpectedResult">
            <summary>
            Gets or sets the expected result. Not valid if the test
            method has parameters.
            </summary>
            <value>The result.</value>
        </member>
        <member name="M:NUnit.Framework.TestAttribute.ApplyToTest(NUnit.Framework.Internal.Test)">
            <summary>
            Modifies a test by adding a description, if not already set.
            </summary>
            <param name="test">The test to modify</param>
        </member>
        <member name="M:NUnit.Framework.TestAttribute.BuildFrom(NUnit.Framework.Interfaces.IMethodInfo,NUnit.Framework.Internal.Test)">
            <summary>
            Builds a single test from the specified method and context.
            </summary>
            <param name="method">The method for which a test is to be constructed.</param>
            <param name="suite">The suite to which the test will be added.</param>
        </member>
        <member name="T:NUnit.Framework.TestCaseAttribute">
            <summary>
            Marks a method as a parameterized test suite and provides arguments for each test case.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestCaseAttribute.#ctor(System.Object[])">
            <summary>
            Construct a TestCaseAttribute with a list of arguments.
            This constructor is not CLS-Compliant
            </summary>
            <param name="arguments"></param>
        </member>
        <member name="M:NUnit.Framework.TestCaseAttribute.#ctor(System.Object)">
            <summary>
            Construct a TestCaseAttribute with a single argument
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:NUnit.Framework.TestCaseAttribute.#ctor(System.Object,System.Object)">
            <summary>
            Construct a TestCaseAttribute with a two arguments
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:NUnit.Framework.TestCaseAttribute.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Construct a TestCaseAttribute with a three arguments
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.TestName">
            <summary>
            Gets or sets the name of the test.
            </summary>
            <value>The name of the test.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.RunState">
            <summary>
            Gets or sets the RunState of this test case.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Arguments">
            <summary>
            Gets the list of arguments to a test case
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Properties">
            <summary>
            Gets the properties of the test case
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.ExpectedResult">
            <summary>
            Gets or sets the expected result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.HasExpectedResult">
            <summary>
            Returns true if the expected result has been set
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Author">
            <summary>
            The author of this test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.TestOf">
            <summary>
            The type that this test is testing
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Ignore">
            <summary>
            Gets or sets the reason for ignoring the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Explicit">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:NUnit.Framework.TestCaseAttribute"/> is explicit.
            </summary>
            <value>
            <see langword="true"/> if explicit; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Reason">
            <summary>
            Gets or sets the reason for not running the test.
            </summary>
            <value>The reason.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.IgnoreReason">
            <summary>
            Gets or sets the ignore reason. When set to a non-null
            non-empty value, the test is marked as ignored.
            </summary>
            <value>The ignore reason.</value>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.IncludePlatform">
            <summary>
            Comma-delimited list of platforms to run the test for
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.ExcludePlatform">
            <summary>
            Comma-delimited list of platforms to not run the test for
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Category">
            <summary>
            Gets and sets the category for this test case.
            May be a comma-separated list of categories.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseAttribute.Until">
            <summary>
            Gets and sets the ignore until date for this test case.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestCaseAttribute.PerformSpecialConversions(System.Object[],NUnit.Framework.Interfaces.IParameterInfo[])">
            <summary>
            Performs several special conversions allowed by NUnit in order to
            permit arguments with types that cannot be used in the constructor
            of an Attribute such as TestCaseAttribute or to simplify their use.
            </summary>
            <param name="arglist">The arguments to be converted</param>
            <param name="parameters">The ParameterInfo array for the method</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseAttribute.BuildFrom(NUnit.Framework.Interfaces.IMethodInfo,NUnit.Framework.Internal.Test)">
            <summary>
            Builds a single test from the specified method and context.
            </summary>
            <param name="method">The MethodInfo for which tests are to be constructed.</param>
            <param name="suite">The suite to which the tests will be added.</param>
        </member>
        <member name="T:NUnit.Framework.TestCaseSourceAttribute">
            <summary>
            Indicates the source to be used to provide test fixture instances for a test class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestCaseSourceAttribute.#ctor(System.String)">
            <summary>
            Construct with the name of the method, property or field that will provide data
            </summary>
            <param name="sourceName">The name of a static method, property or field that will provide data.</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseSourceAttribute.#ctor(System.Type,System.String,System.Object[])">
            <summary>
            Construct with a Type and name
            </summary>
            <param name="sourceType">The Type that will provide data</param>
            <param name="sourceName">The name of a static method, property or field that will provide data.</param>
            <param name="methodParams">A set of parameters passed to the method, works only if the Source Name is a method.
                                If the source name is a field or property has no effect.</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseSourceAttribute.#ctor(System.Type,System.String)">
            <summary>
            Construct with a Type and name
            </summary>
            <param name="sourceType">The Type that will provide data</param>
            <param name="sourceName">The name of a static method, property or field that will provide data.</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseSourceAttribute.#ctor(System.String,System.Object[])">
            <summary>
            Construct with a name
            </summary>
            <param name="sourceName">The name of a static method, property or field that will provide data.</param>
            <param name="methodParams">A set of parameters passed to the method, works only if the Source Name is a method.
                                If the source name is a field or property has no effect.</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseSourceAttribute.#ctor(System.Type)">
            <summary>
            Construct with a Type
            </summary>
            <param name="sourceType">The type that will provide data</param>
        </member>
        <member name="P:NUnit.Framework.TestCaseSourceAttribute.MethodParams">
            <summary>
            A set of parameters passed to the method, works only if the Source Name is a method.
            If the source name is a field or property has no effect.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseSourceAttribute.SourceName">
            <summary>
            The name of a the method, property or field to be used as a source
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseSourceAttribute.SourceType">
            <summary>
            A Type to be used as a source
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestCaseSourceAttribute.Category">
            <summary>
            Gets or sets the category associated with every fixture created from
            this attribute. May be a single category or a comma-separated list.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestCaseSourceAttribute.BuildFrom(NUnit.Framework.Interfaces.IMethodInfo,NUnit.Framework.Internal.Test)">
            <summary>
            Builds any number of tests from the specified method and context.
            </summary>
            <param name="method">The IMethod for which tests are to be constructed.</param>
            <param name="suite">The suite to which the tests will be added.</param>
        </member>
        <member name="T:NUnit.Framework.TestFixtureAttribute">
            <summary>
            Marks the class as a TestFixture.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestFixtureAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestFixtureAttribute.#ctor(System.Object[])">
            <summary>
            Construct with a object[] representing a set of arguments.
            The arguments may later be separated into type arguments and constructor arguments.
            </summary>
            <param name="arguments"></param>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.TestName">
            <summary>
            Gets or sets the name of the test.
            </summary>
            <value>The name of the test.</value>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.RunState">
            <summary>
            Gets or sets the RunState of this test fixture.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Arguments">
            <summary>
            The arguments originally provided to the attribute
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Properties">
            <summary>
            Properties pertaining to this fixture
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.TypeArgs">
            <summary>
            Get or set the type arguments. If not set
            explicitly, any leading arguments that are
            Types are taken as type arguments.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Description">
            <summary>
            Descriptive text for this fixture
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Author">
            <summary>
            The author of this fixture
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.TestOf">
            <summary>
            The type that this fixture is testing
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Ignore">
            <summary>
            Gets or sets the ignore reason. May set RunState as a side effect.
            </summary>
            <value>The ignore reason.</value>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Reason">
            <summary>
            Gets or sets the reason for not running the fixture.
            </summary>
            <value>The reason.</value>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.IgnoreReason">
            <summary>
            Gets or sets the ignore reason. When set to a non-null
            non-empty value, the test is marked as ignored.
            </summary>
            <value>The ignore reason.</value>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Explicit">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:NUnit.Framework.TestFixtureAttribute"/> is explicit.
            </summary>
            <value>
            <see langword="true"/> if explicit; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:NUnit.Framework.TestFixtureAttribute.Category">
            <summary>
            Gets and sets the category for this fixture.
            May be a comma-separated list of categories.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestFixtureAttribute.BuildFrom(NUnit.Framework.Interfaces.ITypeInfo)">
            <summary>
            Builds a single test fixture from the specified type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestFixtureAttribute.BuildFrom(NUnit.Framework.Interfaces.ITypeInfo,NUnit.Framework.Interfaces.IPreFilter)">
            <summary>
            Builds a single test fixture from the specified type.
            </summary>
            <param name="typeInfo">The type info of the fixture to be used.</param>
            <param name="filter">Filter used to select methods as tests.</param>
        </member>
        <member name="T:NUnit.Framework.TestFixtureSourceAttribute">
            <summary>
            Identifies the source used to provide test fixture instances for a test class.
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestFixtureSourceAttribute.MUST_BE_STATIC">
            <summary>
            Error message string is public so the tests can use it
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestFixtureSourceAttribute.#ctor(System.String)">
            <summary>
            Construct with the name of the method, property or field that will provide data
            </summary>
            <param name="sourceName">The name of a static method, property or field that will provide data.</param>
        </member>
        <member name="M:NUnit.Framework.TestFixtureSourceAttribute.#ctor(System.Type,System.String)">
            <summary>
            Construct with a Type and name
            </summary>
            <param name="sourceType">The Type that will provide data</param>
            <param name="sourceName">The name of a static method, property or field that will provide data.</param>
        </member>
        <member name="M:NUnit.Framework.TestFixtureSourceAttribute.#ctor(System.Type)">
            <summary>
            Construct with a Type
            </summary>
            <param name="sourceType">The type that will provide data</param>
        </member>
        <member name="P:NUnit.Framework.TestFixtureSourceAttribute.SourceName">
            <summary>
            The name of a the method, property or field to be used as a source
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestFixtureSourceAttribute.SourceType">
            <summary>
            A Type to be used as a source
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestFixtureSourceAttribute.Category">
            <summary>
            Gets or sets the category associated with every fixture created from
            this attribute. May be a single category or a comma-separated list.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestFixtureSourceAttribute.BuildFrom(NUnit.Framework.Interfaces.ITypeInfo)">
            <summary>
            Builds any number of test fixtures from the specified type.
            </summary>
            <param name="typeInfo">The TypeInfo for which fixtures are to be constructed.</param>
        </member>
        <member name="M:NUnit.Framework.TestFixtureSourceAttribute.BuildFrom(NUnit.Framework.Interfaces.ITypeInfo,NUnit.Framework.Interfaces.IPreFilter)">
            <summary>
            Builds any number of test fixtures from the specified type.
            </summary>
            <param name="typeInfo">The TypeInfo for which fixtures are to be constructed.</param>
            <param name="filter">PreFilter used to select methods as tests.</param>
        </member>
        <member name="M:NUnit.Framework.TestFixtureSourceAttribute.GetParametersFor(System.Type)">
            <summary>
            Returns a set of ITestFixtureData items for use as arguments
            to a parameterized test fixture.
            </summary>
            <param name="sourceType">The type for which data is needed.</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.TestOfAttribute">
            <summary>
            Indicates the method or class the assembly, test fixture or test method is testing.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestOfAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.TestOfAttribute"/> class.
            </summary>
            <param name="type">The type that is being tested.</param>
        </member>
        <member name="M:NUnit.Framework.TestOfAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.TestOfAttribute"/> class.
            </summary>
            <param name="typeName">The type that is being tested.</param>
        </member>
        <member name="T:NUnit.Framework.TheoryAttribute">
            <summary>
            Adding this attribute to a method within a <seealso cref="T:NUnit.Framework.TestFixtureAttribute"/> 
            class makes the method callable from the NUnit test runner. There is a property 
            called Description which is optional which you can provide a more detailed test
            description. This class cannot be inherited.
            </summary>
            
            <example>
            [TestFixture]
            public class Fixture
            {
              [Test]
              public void MethodToTest()
              {}
              
              [Test(Description = "more detailed description")]
              public void TestDescriptionMethod()
              {}
            }
            </example>
            
        </member>
        <member name="M:NUnit.Framework.TheoryAttribute.#ctor">
            <summary>
            Construct the attribute, specifying a combining strategy and source of parameter data.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TimeoutAttribute">
            <summary>
            Applies a timeout in milliseconds to a test. 
            When applied to a method, the test is cancelled if the timeout is exceeded. 
            When applied to a class or assembly, the default timeout is set for all contained test methods.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TimeoutAttribute.#ctor(System.Int32)">
            <summary>
            Construct a TimeoutAttribute given a time in milliseconds
            </summary>
            <param name="timeout">The timeout value in milliseconds</param>
        </member>
        <member name="T:NUnit.Framework.ValuesAttribute">
            <summary>
            Provides literal arguments for an individual parameter of a test.
            </summary>
        </member>
        <member name="F:NUnit.Framework.ValuesAttribute.data">
            <summary>
            The collection of data to be returned. Must
            be set by any derived attribute classes.
            We use an object[] so that the individual
            elements may have their type changed in GetData
            if necessary
            </summary>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.#ctor">
            <summary>
            Constructs for use with an Enum parameter. Will pass every enum
            value in to the test.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.#ctor(System.Object)">
            <summary>
            Construct with one argument
            </summary>
            <param name="arg1"></param>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.#ctor(System.Object,System.Object)">
            <summary>
            Construct with two arguments
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Construct with three arguments
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.#ctor(System.Object[])">
            <summary>
            Construct with an array of arguments
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.GetData(NUnit.Framework.Interfaces.IParameterInfo)">
            <summary>
            Retrieves a list of arguments which can be passed to the specified parameter.
            </summary>
            <param name="parameter">The parameter of a parameterized test.</param>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.GenerateData(System.Type)">
            <summary>
            To generate data for Values attribute, in case no data is provided.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ValuesAttribute.IsNullableEnum(System.Type)">
            <summary>
            To Check if type is nullable enum.
            </summary>
        </member>
        <member name="T:NUnit.Framework.ValueSourceAttribute">
            <summary>
            Indicates the source used to provide data for one parameter of a test method.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ValueSourceAttribute.#ctor(System.String)">
            <summary>
            Construct with the name of the factory - for use with languages
            that don't support params arrays.
            </summary>
            <param name="sourceName">The name of a static method, property or field that will provide data.</param>
        </member>
        <member name="M:NUnit.Framework.ValueSourceAttribute.#ctor(System.Type,System.String)">
            <summary>
            Construct with a Type and name - for use with languages
            that don't support params arrays.
            </summary>
            <param name="sourceType">The Type that will provide data</param>
            <param name="sourceName">The name of a static method, property or field that will provide data.</param>
        </member>
        <member name="P:NUnit.Framework.ValueSourceAttribute.SourceName">
            <summary>
            The name of a the method, property or field to be used as a source
            </summary>
        </member>
        <member name="P:NUnit.Framework.ValueSourceAttribute.SourceType">
            <summary>
            A Type to be used as a source
            </summary>
        </member>
        <member name="M:NUnit.Framework.ValueSourceAttribute.GetData(NUnit.Framework.Interfaces.IParameterInfo)">
            <summary>
            Retrieves a list of arguments which can be passed to the specified parameter.
            </summary>
            <param name="parameter">The parameter of a parameterized test.</param>
        </member>
        <member name="T:NUnit.Framework.CollectionAssert">
            <summary>
            A set of Assert methods operating on one or more collections
            </summary>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.Equals(System.Object,System.Object)">
            <summary>
            DO NOT USE! Use CollectionAssert.AreEqual(...) instead.
            The Equals method throws an InvalidOperationException. This is done
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.ReferenceEquals(System.Object,System.Object)">
            <summary>
            DO NOT USE!
            The ReferenceEquals method throws an InvalidOperationException. This is done
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.IEnumerable,System.Type)">
            <summary>
            Asserts that all items contained in collection are of the type specified by expectedType.
            </summary>
            <param name="collection">IEnumerable containing objects to be considered</param>
            <param name="expectedType">System.Type that all objects in collection must be instances of</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.IEnumerable,System.Type,System.String,System.Object[])">
            <summary>
            Asserts that all items contained in collection are of the type specified by expectedType.
            </summary>
            <param name="collection">IEnumerable containing objects to be considered</param>
            <param name="expectedType">System.Type that all objects in collection must be instances of</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreNotNull(System.Collections.IEnumerable)">
            <summary>
            Asserts that all items contained in collection are not equal to null.
            </summary>
            <param name="collection">IEnumerable containing objects to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreNotNull(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Asserts that all items contained in collection are not equal to null.
            </summary>
            <param name="collection">IEnumerable of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreUnique(System.Collections.IEnumerable)">
            <summary>
            Ensures that every object contained in collection exists within the collection
            once and only once.
            </summary>
            <param name="collection">IEnumerable of objects to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AllItemsAreUnique(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Ensures that every object contained in collection exists within the collection
            once and only once.
            </summary>
            <param name="collection">IEnumerable of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEqual(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Asserts that expected and actual are exactly equal.  The collections must have the same count,
            and contain the exact same objects in the same order.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IComparer)">
            <summary>
            Asserts that expected and actual are exactly equal.  The collections must have the same count,
            and contain the exact same objects in the same order.
            If comparer is not null then it will be used to compare the objects.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="comparer">The IComparer to use in comparing objects from each IEnumerable</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are exactly equal.  The collections must have the same count,
            and contain the exact same objects in the same order.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IComparer,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are exactly equal.  The collections must have the same count,
            and contain the exact same objects in the same order.
            If comparer is not null then it will be used to compare the objects.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="comparer">The IComparer to use in comparing objects from each IEnumerable</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEquivalent(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Asserts that expected and actual are equivalent, containing the same objects but the match may be in any order.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreEquivalent(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are equivalent, containing the same objects but the match may be in any order.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Asserts that expected and actual are not exactly equal.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IComparer)">
            <summary>
            Asserts that expected and actual are not exactly equal.
            If comparer is not null then it will be used to compare the objects.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="comparer">The IComparer to use in comparing objects from each IEnumerable</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are not exactly equal.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Collections.IComparer,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are not exactly equal.
            If comparer is not null then it will be used to compare the objects.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="comparer">The IComparer to use in comparing objects from each IEnumerable</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEquivalent(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Asserts that expected and actual are not equivalent.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.AreNotEquivalent(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Asserts that expected and actual are not equivalent.
            </summary>
            <param name="expected">The first IEnumerable of objects to be considered</param>
            <param name="actual">The second IEnumerable of objects to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.Contains(System.Collections.IEnumerable,System.Object)">
            <summary>
            Asserts that collection contains actual as an item.
            </summary>
            <param name="collection">IEnumerable of objects to be considered</param>
            <param name="actual">Object to be found within collection</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.Contains(System.Collections.IEnumerable,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that collection contains actual as an item.
            </summary>
            <param name="collection">IEnumerable of objects to be considered</param>
            <param name="actual">Object to be found within collection</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.DoesNotContain(System.Collections.IEnumerable,System.Object)">
            <summary>
            Asserts that collection does not contain actual as an item.
            </summary>
            <param name="collection">IEnumerable of objects to be considered</param>
            <param name="actual">Object that cannot exist within collection</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.DoesNotContain(System.Collections.IEnumerable,System.Object,System.String,System.Object[])">
            <summary>
            Asserts that collection does not contain actual as an item.
            </summary>
            <param name="collection">IEnumerable of objects to be considered</param>
            <param name="actual">Object that cannot exist within collection</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsNotSubsetOf(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Asserts that the superset does not contain the subset
            </summary>
            <param name="subset">The IEnumerable subset to be considered</param>
            <param name="superset">The IEnumerable superset to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsNotSubsetOf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Asserts that the superset does not contain the subset
            </summary>
            <param name="subset">The IEnumerable subset to be considered</param>
            <param name="superset">The IEnumerable superset to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsSubsetOf(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Asserts that the superset contains the subset.
            </summary>
            <param name="subset">The IEnumerable subset to be considered</param>
            <param name="superset">The IEnumerable superset to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsSubsetOf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Asserts that the superset contains the subset.
            </summary>
            <param name="subset">The IEnumerable subset to be considered</param>
            <param name="superset">The IEnumerable superset to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsNotSupersetOf(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Asserts that the subset does not contain the superset
            </summary>
            <param name="superset">The IEnumerable superset to be considered</param>
            <param name="subset">The IEnumerable subset to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsNotSupersetOf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Asserts that the subset does not contain the superset
            </summary>
            <param name="superset">The IEnumerable superset to be considered</param>
            <param name="subset">The IEnumerable subset to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsSupersetOf(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Asserts that the subset contains the superset.
            </summary>
            <param name="superset">The IEnumerable superset to be considered</param>
            <param name="subset">The IEnumerable subset to be considered</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsSupersetOf(System.Collections.IEnumerable,System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Asserts that the subset contains the superset.
            </summary>
            <param name="superset">The IEnumerable superset to be considered</param>
            <param name="subset">The IEnumerable subset to be considered</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsEmpty(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
            <param name="message">The message to be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsEmpty(System.Collections.IEnumerable)">
            <summary>
            Assert that an array,list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsNotEmpty(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
            <param name="message">The message to be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsNotEmpty(System.Collections.IEnumerable)">
            <summary>
            Assert that an array,list or other collection is empty
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsOrdered(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is ordered
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
            <param name="message">The message to be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsOrdered(System.Collections.IEnumerable)">
            <summary>
            Assert that an array, list or other collection is ordered
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsOrdered(System.Collections.IEnumerable,System.Collections.IComparer,System.String,System.Object[])">
            <summary>
            Assert that an array, list or other collection is ordered
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
            <param name="comparer">A custom comparer to perform the comparisons</param>
            <param name="message">The message to be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.CollectionAssert.IsOrdered(System.Collections.IEnumerable,System.Collections.IComparer)">
            <summary>
            Assert that an array, list or other collection is ordered
            </summary>
            <param name="collection">An array, list or other collection implementing IEnumerable</param>
            <param name="comparer">A custom comparer to perform the comparisons</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.AllItemsConstraint">
            <summary>
            AllItemsConstraint applies another constraint to each
            item in a collection, succeeding if they all succeed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AllItemsConstraint.#ctor(NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Construct an AllItemsConstraint on top of an existing constraint
            </summary>
            <param name="itemConstraint"></param>
        </member>
        <member name="P:NUnit.Framework.Constraints.AllItemsConstraint.DisplayName">
            <summary> 
            The display name of this Constraint for use by ToString().
            The default value is the name of the constraint with
            trailing "Constraint" removed. Derived classes may set
            this to another name in their constructors.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AllItemsConstraint.ApplyTo``1(``0)">
            <summary>
            Apply the item constraint to each item in the collection,
            failing if any item fails.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.AndConstraint">
            <summary>
            AndConstraint succeeds only if both members succeed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndConstraint.#ctor(NUnit.Framework.Constraints.IConstraint,NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Create an AndConstraint from two other constraints
            </summary>
            <param name="left">The first constraint</param>
            <param name="right">The second constraint</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.AndConstraint.Description">
            <summary>
            Gets text describing a constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndConstraint.ApplyTo``1(``0)">
            <summary>
            Apply both member constraints to an actual value, succeeding 
            succeeding only if both of them succeed.
            </summary>
            <param name="actual">The actual value</param>
            <returns>True if the constraints both succeeded</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndConstraint.AndConstraintResult.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.AnyOfConstraint">
            <summary>
            <see cref="T:NUnit.Framework.Constraints.AnyOfConstraint"/> is used to determine whether the value is equal to any of the expected values.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AnyOfConstraint.#ctor(System.Object[])">
            <summary>
            Construct a <see cref="T:NUnit.Framework.Constraints.AnyOfConstraint"/>
            </summary>
            <param name="expected">Collection of expected values</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.AnyOfConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AnyOfConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether item is present in expected collection
            </summary>
            <typeparam name="TActual">Actual item type</typeparam>
            <param name="actual">Actual item</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.AnyOfConstraint.IgnoreCase">
            <summary>
            Flag the constraint to ignore case and return self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AnyOfConstraint.Using(System.Collections.IComparer)">
            <summary>
            Flag the constraint to use the supplied IComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AnyOfConstraint.Using``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Flag the constraint to use the supplied IComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AnyOfConstraint.Using``1(System.Comparison{``0})">
            <summary>
            Flag the constraint to use the supplied Comparison object.
            </summary>
            <param name="comparer">The Comparison object to use.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AnyOfConstraint.Using(System.Collections.IEqualityComparer)">
            <summary>
            Flag the constraint to use the supplied IEqualityComparer object.
            </summary>
            <param name="comparer">The IEqualityComparer object to use.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AnyOfConstraint.Using``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Flag the constraint to use the supplied IEqualityComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AnyOfConstraint.Using``1(System.Func{``0,``0,System.Boolean})">
            <summary>
            Flag the constraint to use the supplied boolean-returning delegate.
            </summary>
            <param name="comparer">The supplied boolean-returning delegate to use.</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.AssignableFromConstraint">
            <summary>
            AssignableFromConstraint is used to test that an object
            can be assigned from a given Type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AssignableFromConstraint.#ctor(System.Type)">
            <summary>
            Construct an AssignableFromConstraint for the type provided
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AssignableFromConstraint.Matches(System.Object)">
            <summary>
            Apply the constraint to an actual value, returning true if it succeeds
            </summary>
            <param name="actual">The actual argument</param>
            <returns>True if the constraint succeeds, otherwise false.</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.AssignableToConstraint">
            <summary>
            AssignableToConstraint is used to test that an object
            can be assigned to a given Type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AssignableToConstraint.#ctor(System.Type)">
            <summary>
            Construct an AssignableToConstraint for the type provided
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AssignableToConstraint.Matches(System.Object)">
            <summary>
            Apply the constraint to an actual value, returning true if it succeeds
            </summary>
            <param name="actual">The actual argument</param>
            <returns>True if the constraint succeeds, otherwise false.</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.AttributeConstraint">
            <summary>
            AttributeConstraint tests that a specified attribute is present
            on a Type or other provider and that the value of the attribute
            satisfies some other constraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeConstraint.#ctor(System.Type,NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Constructs an AttributeConstraint for a specified attribute
            Type and base constraint.
            </summary>
            <param name="type"></param>
            <param name="baseConstraint"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeConstraint.ApplyTo``1(``0)">
            <summary>
            Determines whether the Type or other provider has the 
            expected attribute and if its value matches the
            additional constraint specified.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeConstraint.GetStringRepresentation">
            <summary>
            Returns a string representation of the constraint.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.AttributeExistsConstraint">
            <summary>
            AttributeExistsConstraint tests for the presence of a
            specified attribute on a Type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeExistsConstraint.#ctor(System.Type)">
            <summary>
            Constructs an AttributeExistsConstraint for a specific attribute Type
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:NUnit.Framework.Constraints.AttributeExistsConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeExistsConstraint.ApplyTo``1(``0)">
            <summary>
            Tests whether the object provides the expected attribute.
            </summary>
            <param name="actual">A Type, MethodInfo, or other ICustomAttributeProvider</param>
            <returns>True if the expected attribute is present, otherwise false</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.BinaryConstraint">
            <summary>
            BinaryConstraint is the abstract base of all constraints
            that combine two other constraints in some fashion.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.BinaryConstraint.Left">
            <summary>
            The first constraint being combined
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.BinaryConstraint.Right">
            <summary>
            The second constraint being combined
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.BinaryConstraint.#ctor(NUnit.Framework.Constraints.IConstraint,NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Construct a BinaryConstraint from two other constraints
            </summary>
            <param name="left">The first constraint</param>
            <param name="right">The second constraint</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.BinarySerializableConstraint">
            <summary>
            BinarySerializableConstraint tests whether
            an object is serializable in binary format.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.BinarySerializableConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.BinarySerializableConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.BinarySerializableConstraint.GetStringRepresentation">
            <summary>
            Returns the string representation
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionConstraint">
            <summary>
            CollectionConstraint is the abstract base class for
            constraints that operate on collections.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.#ctor">
            <summary>
            Construct an empty CollectionConstraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.#ctor(System.Object)">
            <summary>
            Construct a CollectionConstraint
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.IsEmpty(System.Collections.IEnumerable)">
            <summary>
            Determines whether the specified enumerable is empty.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <returns>
            <see langword="true"/> if the specified enumerable is empty; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionConstraint.Matches(System.Collections.IEnumerable)">
            <summary>
            Protected method to be implemented by derived classes
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionContainsConstraint">
            <summary>
            CollectionContainsConstraint is used to test whether a collection
            contains an expected object as a member.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionContainsConstraint.#ctor(System.Object)">
            <summary>
            Construct a CollectionContainsConstraint
            </summary>
            <param name="expected"></param>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionContainsConstraint.DisplayName">
            <summary>
            The display name of this Constraint for use by ToString().
            The default value is the name of the constraint with
            trailing "Constraint" removed. Derived classes may set
            this to another name in their constructors.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionContainsConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionContainsConstraint.Expected">
            <summary>
            Gets the expected object
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionContainsConstraint.Matches(System.Collections.IEnumerable)">
            <summary>
            Test whether the expected item is contained in the collection
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionContainsConstraint.Using``2(System.Func{``0,``1,System.Boolean})">
            <summary>
            Flag the constraint to use the supplied predicate function
            </summary>
            <param name="comparison">The comparison function to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionEquivalentConstraint">
            <summary>
            CollectionEquivalentConstraint is used to determine whether two
            collections are equivalent.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.CollectionEquivalentConstraint._tallyResult">
            <summary>The result of the <see cref="T:NUnit.Framework.Constraints.CollectionTally"/> from the collections
            under comparison.</summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionEquivalentConstraint.#ctor(System.Collections.IEnumerable)">
            <summary>Construct a CollectionEquivalentConstraint</summary>
            <param name="expected">Expected collection.</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionEquivalentConstraint.DisplayName">
            <summary> 
            The display name of this Constraint for use by ToString().
            The default value is the name of the constraint with
            trailing "Constraint" removed. Derived classes may set
            this to another name in their constructors.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionEquivalentConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionEquivalentConstraint.Matches(System.Collections.IEnumerable)">
            <summary>
            Test whether two collections are equivalent
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionEquivalentConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the collection is equivalent to the expected.
            </summary>
            <typeparam name="TActual">
            Actual collection type.
            </typeparam>
            <param name="actual">
            Actual collection to compare.
            </param>
            <returns>
            A <see cref="T:NUnit.Framework.Constraints.CollectionEquivalentConstraintResult"/> indicating whether or not
            the two collections are equivalent.
            </returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionEquivalentConstraint.Using``2(System.Func{``0,``1,System.Boolean})">
            <summary>
            Flag the constraint to use the supplied predicate function
            </summary>
            <param name="comparison">The comparison function to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionEquivalentConstraintResult">
            <summary>Provides a <see cref="T:NUnit.Framework.Constraints.ConstraintResult"/> for the <see cref="T:NUnit.Framework.Constraints.CollectionEquivalentConstraint"/>.</summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.CollectionEquivalentConstraintResult._tallyResult">
            <summary>Result of a <see cref="T:NUnit.Framework.Constraints.CollectionTally"/> of the collections to compare for equivalence.</summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionEquivalentConstraintResult.#ctor(NUnit.Framework.Constraints.CollectionEquivalentConstraint,NUnit.Framework.Constraints.CollectionTally.CollectionTallyResult,System.Object,System.Boolean)">
            <summary>Construct a <see cref="T:NUnit.Framework.Constraints.CollectionEquivalentConstraintResult"/> using a <see cref="T:NUnit.Framework.Constraints.CollectionTally.CollectionTallyResult"/>.</summary>
            <param name="constraint">Source <see cref="T:NUnit.Framework.Constraints.CollectionEquivalentConstraint"/>.</param>
            <param name="tallyResult">Result of the collection comparison.</param>
            <param name="actual">Actual collection to compare.</param>
            <param name="isSuccess">Whether or not the <see cref="T:NUnit.Framework.Constraints.CollectionEquivalentConstraint"/> succeeded.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionEquivalentConstraintResult.WriteAdditionalLinesTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>Write any additional lines (following <c>Expected:</c> and <c>But was:</c>) for a failing constraint.</summary>
            <param name="writer">The <see cref="T:NUnit.Framework.Constraints.MessageWriter"/> to write the failure message to.</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionItemsEqualConstraint">
            <summary>
            CollectionItemsEqualConstraint is the abstract base class for all
            collection constraints that apply some notion of item equality
            as a part of their operation.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.CollectionItemsEqualConstraint._comparer">
            <summary>
            The NUnitEqualityComparer in use for this constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.#ctor">
            <summary>
            Construct an empty CollectionConstraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.#ctor(System.Object)">
            <summary>
            Construct a CollectionConstraint
            </summary>
            <param name="arg"></param>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.IgnoringCase">
            <summary>
            Get a flag indicating whether the user requested us to ignore case.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.UsingExternalComparer">
            <summary>
            Get a flag indicating whether any external comparers are in use.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.IgnoreCase">
            <summary>
            Flag the constraint to ignore case and return self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using(System.Collections.IComparer)">
            <summary>
            Flag the constraint to use the supplied IComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Flag the constraint to use the supplied IComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using``1(System.Comparison{``0})">
            <summary>
            Flag the constraint to use the supplied Comparison object.
            </summary>
            <param name="comparison">The Comparison object to use.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using(System.Collections.IEqualityComparer)">
            <summary>
            Flag the constraint to use the supplied IEqualityComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Flag the constraint to use the supplied IEqualityComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using``1(System.Func{``0,``0,System.Boolean})">
            <summary>
            Flag the constraint to use the supplied boolean-returning delegate.
            </summary>
            <param name="comparer">The supplied boolean-returning delegate to use.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.ItemsEqual(System.Object,System.Object)">
            <summary>
            Compares two collection members for equality
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Tally(System.Collections.IEnumerable)">
            <summary>
            Return a new CollectionTally for use in making tests
            </summary>
            <param name="c">The collection to be included in the tally</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionOrderedConstraint">
            <summary>
            CollectionOrderedConstraint is used to test whether a collection is ordered.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.#ctor">
            <summary>
            Construct a CollectionOrderedConstraint
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionOrderedConstraint.DisplayName">
            <summary>
            The display name of this Constraint for use by ToString().
            The default value is the name of the constraint with
            trailing "Constraint" removed. Derived classes may set
            this to another name in their constructors.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionOrderedConstraint.Ascending">
            <summary>
             If used performs a default ascending comparison
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionOrderedConstraint.Descending">
            <summary>
             If used performs a reverse comparison
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.Using(System.Collections.IComparer)">
            <summary>
            Modifies the constraint to use an <see cref="T:System.Collections.IComparer"/> and returns self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.Using``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Modifies the constraint to use an <see cref="T:System.Collections.Generic.IComparer`1"/> and returns self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.Using``1(System.Comparison{``0})">
            <summary>
            Modifies the constraint to use a <see cref="T:System.Comparison`1"/> and returns self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.By(System.String)">
            <summary>
            Modifies the constraint to test ordering by the value of
            a specified property and returns self.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionOrderedConstraint.Then">
            <summary>
            Then signals a break between two ordering steps
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionOrderedConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.Matches(System.Collections.IEnumerable)">
            <summary>
            Test whether the collection is ordered
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.GetStringRepresentation">
            <summary>
            Returns the string representation of the constraint.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionOrderedConstraint.OrderingStep">
            <summary>
            An OrderingStep represents one stage of the sort
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.CollectionOrderedConstraintResult.#ctor(NUnit.Framework.Constraints.IConstraint,System.Collections.IEnumerable)">
            <summary>
            Constructor for success result.
            </summary>
            <param name="constraint">The Constraint to which this result applies.</param>
            <param name="actualValue">The actual value to which the Constraint was applied.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOrderedConstraint.CollectionOrderedConstraintResult.#ctor(NUnit.Framework.Constraints.IConstraint,System.Collections.IEnumerable,System.Int32,System.Object)">
            <summary>
            Constructor for failure result.
            </summary>
            <param name="constraint">The Constraint to which this result applies.</param>
            <param name="actualValue">The actual value to which the Constraint was applied.</param>
            <param name="breakingIndex">Index at which collection order breaks.</param>
            <param name="breakingValue">Value at which collection order breaks.</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionSubsetConstraint">
            <summary>
            CollectionSubsetConstraint is used to determine whether
            one collection is a subset of another
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionSubsetConstraint.#ctor(System.Collections.IEnumerable)">
            <summary>
            Construct a CollectionSubsetConstraint
            </summary>
            <param name="expected">The collection that the actual value is expected to be a subset of</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionSubsetConstraint.DisplayName">
            <summary> 
            The display name of this Constraint for use by ToString().
            The default value is the name of the constraint with
            trailing "Constraint" removed. Derived classes may set
            this to another name in their constructors.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionSubsetConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionSubsetConstraint.Matches(System.Collections.IEnumerable)">
            <summary>
            Test whether the actual collection is a subset of 
            the expected collection provided.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionSubsetConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionSubsetConstraint.Using``2(System.Func{``0,``1,System.Boolean})">
            <summary>
            Flag the constraint to use the supplied predicate function
            </summary>
            <param name="comparison">The comparison function to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionSupersetConstraint">
            <summary>
            CollectionSupersetConstraint is used to determine whether
            one collection is a superset of another
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionSupersetConstraint.#ctor(System.Collections.IEnumerable)">
            <summary>
            Construct a CollectionSupersetConstraint
            </summary>
            <param name="expected">The collection that the actual value is expected to be a superset of</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionSupersetConstraint.DisplayName">
            <summary> 
            The display name of this Constraint for use by ToString().
            The default value is the name of the constraint with
            trailing "Constraint" removed. Derived classes may set
            this to another name in their constructors.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionSupersetConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionSupersetConstraint.Matches(System.Collections.IEnumerable)">
            <summary>
            Test whether the actual collection is a superset of 
            the expected collection provided.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionSupersetConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionSupersetConstraint.Using``2(System.Func{``0,``1,System.Boolean})">
            <summary>
            Flag the constraint to use the supplied predicate function
            </summary>
            <param name="comparison">The comparison function to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionTally">
            <summary><see cref="T:NUnit.Framework.Constraints.CollectionTally"/> counts (tallies) the number of occurrences 
            of each object in one or more enumerations.</summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionTally.CollectionTallyResult">
            <summary>The result of a <see cref="T:NUnit.Framework.Constraints.CollectionTally"/>.</summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionTally.CollectionTallyResult.ExtraItems">
            <summary>Items that were not in the expected collection.</summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionTally.CollectionTallyResult.MissingItems">
            <summary>Items that were not accounted for in the expected collection.</summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionTally.CollectionTallyResult.#ctor(System.Collections.Generic.List{System.Object},System.Collections.Generic.List{System.Object})">
            <summary>Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.CollectionTally.CollectionTallyResult"/> class with the given fields.</summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.CollectionTally.Result">
            <summary>The result of the comparison between the two collections.</summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionTally.#ctor(NUnit.Framework.Constraints.NUnitEqualityComparer,System.Collections.IEnumerable)">
            <summary>Construct a CollectionTally object from a comparer and a collection.</summary>
            <param name="comparer">The comparer to use for equality.</param>
            <param name="c">The expected collection to compare against.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionTally.TryRemove(System.Object)">
            <summary>Try to remove an object from the tally.</summary>
            <param name="o">The object to remove.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionTally.TryRemove(System.Collections.IEnumerable)">
            <summary>Try to remove a set of objects from the tally.</summary>
            <param name="c">The objects to remove.</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.Comparers.ArraysComparer">
            <summary>
            Comparator for two <see cref="T:System.Array"/>s.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.Comparers.CharsComparer">
            <summary>
            Comparator for two <see cref="T:System.Char"/>s.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Comparers.ComparisonState.TopLevelComparison">
            <summary>
            Flag indicating whether or not this is the top level comparison.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.Comparers.ComparisonState._comparisons">
            <summary>
            A list of tracked comparisons
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.Comparers.DateTimeOffsetsComparer">
            <summary>
            Comparator for two <see cref="T:System.DateTimeOffset"/>s.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.Comparers.DictionariesComparer">
            <summary>
            Comparator for two <see cref="T:System.Collections.IDictionary"/>s.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.Comparers.DictionaryEntriesComparer">
            <summary>
            Comparator for two <see cref="T:System.Collections.DictionaryEntry"/>s.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.Comparers.DirectoriesComparer">
            <summary>
            Comparator for two <see cref="T:System.IO.DirectoryInfo"/>s.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.Comparers.EnumerablesComparer">
            <summary>
            Comparator for two <see cref="T:System.Collections.IEnumerable"/>s.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.Comparers.EquatablesComparer">
            <summary>
            Comparator for two types related by <see cref="T:System.IEquatable`1"/>.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.Comparers.IChainComparer">
            <summary>
            Interface for comparing two <see cref="T:System.Object"/>s.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Comparers.IChainComparer.Equal(System.Object,System.Object,NUnit.Framework.Constraints.Tolerance@,NUnit.Framework.Constraints.Comparers.ComparisonState)">
            <summary>
            Method for comparing two objects with a tolerance.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <param name="tolerance">The tolerance to use when comparing the objects.</param>
            <param name="state">The evaluation state of the comparison.</param>
            <returns>
                <see langword="null"/> if the objects cannot be compared using the method.
                Otherwise the result of the comparison is returned.
            </returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.Comparers.KeyValuePairsComparer">
            <summary>
            Comparator for two <see cref="T:System.Collections.Generic.KeyValuePair`2"/>s.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.Comparers.NumericsComparer">
            <summary>
            Comparator for two <see cref="T:NUnit.Framework.Constraints.Numerics"/>s.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.Comparers.StreamsComparer">
            <summary>
            Comparator for two <see cref="T:System.IO.Stream"/>s.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.Comparers.StringsComparer">
            <summary>
            Comparator for two <see cref="T:System.String"/>s.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.Comparers.StructuralComparer">
            <summary>
            Comparator for two types related by <see cref="T:System.Collections.IStructuralEquatable"/>.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.Comparers.TimeSpanToleranceComparer">
            <summary>
            Comparator for two <see cref="T:System.DateTime"/>s or <see cref="T:System.TimeSpan"/>s.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.Comparers.TupleComparer">
            <summary>
            Comparator for two <c>Tuple</c>s.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.Comparers.TupleComparerBase">
            <summary>
            Base class for comparators for tuples (both regular Tuples and ValueTuples).
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.Comparers.ValueTupleComparer">
            <summary>
            Comparator for two <c>ValueTuple</c>s.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ComparisonAdapter">
            <summary>
            ComparisonAdapter class centralizes all comparisons of
            values in NUnit, adapting to the use of any provided
            <see cref="T:System.Collections.IComparer"/>, <see cref="T:System.Collections.Generic.IComparer`1"/>
            or <see cref="T:System.Comparison`1"/>.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ComparisonAdapter.Default">
            <summary>
            Gets the default ComparisonAdapter, which wraps an
            NUnitComparer object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.For(System.Collections.IComparer)">
            <summary>
            Returns a ComparisonAdapter that wraps an <see cref="T:System.Collections.IComparer"/>
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.For``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns a ComparisonAdapter that wraps an <see cref="T:System.Collections.Generic.IComparer`1"/>
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.For``1(System.Comparison{``0})">
            <summary>
            Returns a ComparisonAdapter that wraps a <see cref="T:System.Comparison`1"/>
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.DefaultComparisonAdapter.#ctor">
            <summary>
            Construct a default ComparisonAdapter
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparerAdapter.#ctor(System.Collections.IComparer)">
            <summary>
            Construct a ComparisonAdapter for an <see cref="T:System.Collections.IComparer"/>
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparerAdapter.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.ComparisonAdapter.ComparerAdapter`1">
            <summary>
            ComparerAdapter extends <see cref="T:NUnit.Framework.Constraints.ComparisonAdapter"/> and
            allows use of an <see cref="T:System.Collections.Generic.IComparer`1"/> or <see cref="T:System.Comparison`1"/>
            to actually perform the comparison.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparerAdapter`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Construct a ComparisonAdapter for an <see cref="T:System.Collections.Generic.IComparer`1"/>
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparerAdapter`1.Compare(System.Object,System.Object)">
            <summary>
            Compare a Type T to an object
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparisonAdapterForComparison`1.#ctor(System.Comparison{`0})">
            <summary>
            Construct a ComparisonAdapter for a <see cref="T:System.Comparison`1"/>
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonAdapter.ComparisonAdapterForComparison`1.Compare(System.Object,System.Object)">
            <summary>
            Compare a Type T to an object
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ComparisonConstraint">
            <summary>
            Abstract base class for constraints that compare values to
            determine if one is greater than, equal to or less than
            the other.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ComparisonConstraint._expected">
            <summary>
            The value against which a comparison is to be made
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ComparisonConstraint._tolerance">
            <summary>
            Tolerance used in making the comparison
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ComparisonConstraint._comparer">
            <summary>
            ComparisonAdapter to be used in making the comparison
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.ComparisonConstraint"/> class.
            </summary>
            <param name="expected">The value against which to make a comparison.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value   
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>A ConstraintResult</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.PerformComparison(NUnit.Framework.Constraints.ComparisonAdapter,System.Object,System.Object,NUnit.Framework.Constraints.Tolerance)">
            <summary>
            Protected function overridden by derived class to actually perform the comparison
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.Using(System.Collections.IComparer)">
            <summary>
            Modifies the constraint to use an <see cref="T:System.Collections.IComparer"/> and returns self
            </summary>
            <param name="comparer">The comparer used for comparison tests</param>
            <returns>A constraint modified to use the given comparer</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.Using``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Modifies the constraint to use an <see cref="T:System.Collections.Generic.IComparer`1"/> and returns self
            </summary>
            <param name="comparer">The comparer used for comparison tests</param>
            <returns>A constraint modified to use the given comparer</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.Using``1(System.Comparison{``0})">
            <summary>
            Modifies the constraint to use a <see cref="T:System.Comparison`1"/> and returns self
            </summary>
            <param name="comparer">The comparer used for comparison tests</param>
            <returns>A constraint modified to use the given comparer</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.Within(System.Object)">
            <summary>
            Set the tolerance for use in this comparison
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ComparisonConstraint.Percent">
            <summary>
            Switches the .Within() modifier to interpret its tolerance as
            a percentage that the actual values is allowed to deviate from
            the expected value.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ComparisonConstraint.DefaultDescription(System.String)">
            <summary>
            Provides standard description of what the constraint tests
            based on comparison text.
            </summary>
            <param name="comparisonText">Describes the comparison being tested, throws <see cref="T:System.ArgumentNullException"/>
            if null</param>
            <exception cref="T:System.ArgumentNullException">Is thrown when null passed to a method</exception>
        </member>
        <member name="T:NUnit.Framework.Constraints.ActualValueDelegate`1">
            <summary>
            Delegate used to delay evaluation of the actual value
            to be used in evaluating a constraint
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.Constraint">
            <summary>
            The Constraint class is the base of all built-in constraints
            within NUnit. It provides the operator overloads used to combine
            constraints.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.#ctor(System.Object[])">
            <summary>
            Construct a constraint with optional arguments
            </summary>
            <param name="args">Arguments to be saved</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.Constraint.DisplayName">
            <summary>
            The display name of this Constraint for use by ToString().
            The default value is the name of the constraint with
            trailing "Constraint" removed. Derived classes may set
            this to another name in their constructors.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Constraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Constraint.Arguments">
            <summary>
            Arguments provided to this Constraint, for use in
            formatting the description.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Constraint.Builder">
            <summary>
            The ConstraintBuilder holding this constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.ApplyTo``1(``0)">
            <summary>
            Applies the constraint to an actual value, returning a ConstraintResult.
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>A ConstraintResult</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.ApplyTo``1(NUnit.Framework.Constraints.ActualValueDelegate{``0})">
            <summary>
            Applies the constraint to an ActualValueDelegate that returns
            the value to be tested. The default implementation simply evaluates
            the delegate but derived classes may override it to provide for
            delayed processing.
            </summary>
            <param name="del">An ActualValueDelegate</param>
            <returns>A ConstraintResult</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.ApplyTo``1(``0@)">
            <summary>
            Test whether the constraint is satisfied by a given reference.
            The default implementation simply dereferences the value but
            derived classes may override it to provide for delayed processing.
            </summary>
            <param name="actual">A reference to the value to be tested</param>
            <returns>A ConstraintResult</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.GetTestObject``1(NUnit.Framework.Constraints.ActualValueDelegate{``0})">
            <summary>
            Retrieves the value to be tested from an ActualValueDelegate.
            The default implementation simply evaluates the delegate but derived
            classes may override it to provide for delayed processing.
            </summary>
            <param name="del">An ActualValueDelegate</param>
            <returns>Delegate evaluation result</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.ToString">
            <summary>
            Default override of ToString returns the constraint DisplayName
            followed by any arguments within angle brackets.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.GetStringRepresentation">
            <summary>
            Returns the string representation of this constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.op_BitwiseAnd(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            This operator creates a constraint that is satisfied only if both
            argument constraints are satisfied.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.op_BitwiseOr(NUnit.Framework.Constraints.Constraint,NUnit.Framework.Constraints.Constraint)">
            <summary>
            This operator creates a constraint that is satisfied if either
            of the argument constraints is satisfied.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.op_LogicalNot(NUnit.Framework.Constraints.Constraint)">
            <summary>
            This operator creates a constraint that is satisfied if the
            argument constraint is not satisfied.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Constraint.And">
            <summary>
            Returns a ConstraintExpression by appending And
            to the current constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Constraint.With">
            <summary>
            Returns a ConstraintExpression by appending And
            to the current constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Constraint.Or">
            <summary>
            Returns a ConstraintExpression by appending Or
            to the current constraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.After(System.Int32)">
            <summary>
            Returns a DelayedConstraint.WithRawDelayInterval with the specified delay time.
            </summary>
            <param name="delay">The delay, which defaults to milliseconds.</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.After(System.Int32,System.Int32)">
            <summary>
            Returns a DelayedConstraint with the specified delay time
            and polling interval.
            </summary>
            <param name="delayInMilliseconds">The delay in milliseconds.</param>
            <param name="pollingInterval">The interval at which to test the constraint.</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Constraint.NUnit#Framework#Constraints#IResolveConstraint#Resolve">
            <summary>
            Resolves any pending operators and returns the resolved constraint.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintBuilder">
            <summary>
            ConstraintBuilder maintains the stacks that are used in
            processing a ConstraintExpression. An OperatorStack
            is used to hold operators that are waiting for their
            operands to be reorganized. a ConstraintStack holds
            input constraints as well as the results of each
            operator applied.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack">
            <summary>
            OperatorStack is a type-safe stack for holding ConstraintOperators
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack.#ctor(NUnit.Framework.Constraints.ConstraintBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack"/> class.
            </summary>
            <param name="builder">The ConstraintBuilder using this stack.</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack.Empty">
            <summary>
            Gets a value indicating whether this <see cref="T:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack"/> is empty.
            </summary>
            <value><see langword="true"/> if empty; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack.Top">
            <summary>
            Gets the topmost operator without modifying the stack.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack.Push(NUnit.Framework.Constraints.ConstraintOperator)">
            <summary>
            Pushes the specified operator onto the stack.
            </summary>
            <param name="op">The operator to put onto the stack.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.OperatorStack.Pop">
            <summary>
            Pops the topmost operator from the stack.
            </summary>
            <returns>The topmost operator on the stack</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack">
            <summary>
            ConstraintStack is a type-safe stack for holding Constraints
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack.#ctor(NUnit.Framework.Constraints.ConstraintBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack"/> class.
            </summary>
            <param name="builder">The ConstraintBuilder using this stack.</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack.Empty">
            <summary>
            Gets a value indicating whether this <see cref="T:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack"/> is empty.
            </summary>
            <value><see langword="true"/> if empty; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack.Push(NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Pushes the specified constraint. As a side effect,
            the constraint's Builder field is set to the
            ConstraintBuilder owning this stack.
            </summary>
            <param name="constraint">The constraint to put onto the stack</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack.Pop">
            <summary>
            Pops this topmost constraint from the stack.
            As a side effect, the constraint's Builder
            field is set to null.
            </summary>
            <returns>The topmost constraint on the stack</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.ConstraintBuilder"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.Append(NUnit.Framework.Constraints.ConstraintOperator)">
            <summary>
            Appends the specified operator to the expression by first
            reducing the operator stack and then pushing the new
            operator on the stack.
            </summary>
            <param name="op">The operator to push.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.Append(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Appends the specified constraint to the expression by pushing
            it on the constraint stack.
            </summary>
            <param name="constraint">The constraint to push.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.SetTopOperatorRightContext(System.Object)">
            <summary>
            Sets the top operator right context.
            </summary>
            <param name="rightContext">The right context.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.ReduceOperatorStack(System.Int32)">
            <summary>
            Reduces the operator stack until the topmost item
            precedence is greater than or equal to the target precedence.
            </summary>
            <param name="targetPrecedence">The target precedence.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintBuilder.Resolve">
            <summary>
            Resolves this instance, returning a Constraint. If the Builder
            is not currently in a resolvable state, an exception is thrown.
            </summary>
            <returns>The resolved constraint</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintBuilder.IsResolvable">
            <summary>
            Gets a value indicating whether this instance is resolvable.
            </summary>
            <value>
            	<see langword="true"/> if this instance is resolvable; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintExpression">
             <summary>
             ConstraintExpression represents a compound constraint in the
             process of being constructed from a series of syntactic elements.
            
             Individual elements are appended to the expression as they are
             reorganized. When a constraint is appended, it is returned as the
             value of the operation so that modifiers may be applied. However,
             any partially built expression is attached to the constraint for
             later resolution. When an operator is appended, the partial
             expression is returned. If it's a self-resolving operator, then
             a ResolvableConstraintExpression is returned.
             </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ConstraintExpression.builder">
            <summary>
            The ConstraintBuilder holding the elements recognized so far
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.ConstraintExpression"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.#ctor(NUnit.Framework.Constraints.ConstraintBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.ConstraintExpression"/>
            class passing in a ConstraintBuilder, which may be pre-populated.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.ToString">
            <summary>
            Returns a string representation of the expression as it
            currently stands. This should only be used for testing,
            since it has the side-effect of resolving the expression.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Append(NUnit.Framework.Constraints.ConstraintOperator)">
            <summary>
            Appends an operator to the expression and returns the
            resulting expression itself.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Append(NUnit.Framework.Constraints.SelfResolvingOperator)">
            <summary>
            Appends a self-resolving operator to the expression and
            returns a new ResolvableConstraintExpression.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Append(NUnit.Framework.Constraints.Constraint)">
            <summary>
            Appends a constraint to the expression and returns that
            constraint, which is associated with the current state
            of the expression being built. Note that the constraint
            is not reduced at this time. For example, if there
            is a NotOperator on the stack we don't reduce and
            return a NotConstraint. The original constraint must
            be returned because it may support modifiers that
            are yet to be applied.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Not">
            <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.No">
            <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.All">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them succeed.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Some">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if at least one of them succeeds.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.None">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them fail.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Exactly(System.Int32)">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding only if a specified number of them succeed.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.One">
            <summary>
            Returns a <see cref="T:NUnit.Framework.Constraints.ItemsConstraintExpression"/>, which will
            apply the following constraint to a collection of length one, succeeding
            only if exactly one of them succeeds.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Property(System.String)">
            <summary>
            Returns a new PropertyConstraintExpression, which will either
            test for the existence of the named property on the object
            being tested or apply any following constraint to that property.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Length">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Length property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Count">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Count property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Message">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Message property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.InnerException">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the InnerException property of the object being tested.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Attribute(System.Type)">
            <summary>
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Attribute``1">
            <summary>
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.With">
            <summary>
            With is currently a NOP - reserved for future use.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Matches(NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Returns the constraint provided as an argument - used to allow custom
            custom constraints to easily participate in the syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Matches``1(System.Predicate{``0})">
            <summary>
            Returns the constraint provided as an argument - used to allow custom
            custom constraints to easily participate in the syntax.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Null">
            <summary>
            Returns a constraint that tests for null
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.True">
            <summary>
            Returns a constraint that tests for True
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.False">
            <summary>
            Returns a constraint that tests for False
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Positive">
            <summary>
            Returns a constraint that tests for a positive value
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Negative">
            <summary>
            Returns a constraint that tests for a negative value
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Zero">
            <summary>
            Returns a constraint that tests if item is equal to zero
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.NaN">
            <summary>
            Returns a constraint that tests for NaN
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Empty">
            <summary>
            Returns a constraint that tests for empty
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Unique">
            <summary>
            Returns a constraint that tests whether a collection
            contains all unique items.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.BinarySerializable">
            <summary>
            Returns a constraint that tests whether an object graph is serializable in binary format.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.XmlSerializable">
            <summary>
            Returns a constraint that tests whether an object graph is serializable in XML format.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.EqualTo(System.Object)">
            <summary>
            Returns a constraint that tests two items for equality
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.SameAs(System.Object)">
            <summary>
            Returns a constraint that tests that two references are the same object
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.GreaterThan(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.GreaterThanOrEqualTo(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than or equal to the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AtLeast(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than or equal to the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.LessThan(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.LessThanOrEqualTo(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than or equal to the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AtMost(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than or equal to the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.TypeOf(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.TypeOf``1">
            <summary>
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.InstanceOf(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.InstanceOf``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AssignableFrom(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AssignableFrom``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AssignableTo(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AssignableTo``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.EquivalentTo(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a collection containing the same elements as the
            collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.SubsetOf(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a subset of the collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.SupersetOf(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a superset of the collection supplied as an argument.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Ordered">
            <summary>
            Returns a constraint that tests whether a collection is ordered
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Member(System.Object)">
            <summary>
            Returns a new <see cref="T:NUnit.Framework.Constraints.SomeItemsConstraint"/> checking for the
            presence of a particular object in the collection.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Contains(System.Object)">
            <summary>
            <para>
            Returns a new <see cref="T:NUnit.Framework.Constraints.SomeItemsConstraint"/> checking for the
            presence of a particular object in the collection.
            </para>
            <para>
            To search for a substring instead of a collection element, use the
            <see cref="M:NUnit.Framework.Constraints.ConstraintExpression.Contains(System.String)"/> overload.
            </para>
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Contains(System.String)">
            <summary>
            <para>
            Returns a new ContainsConstraint. This constraint
            will, in turn, make use of the appropriate second-level
            constraint, depending on the type of the actual argument.
            </para>
            <para>
            To search for a collection element instead of a substring, use the
            <see cref="M:NUnit.Framework.Constraints.ConstraintExpression.Contains(System.Object)"/> overload.
            </para>
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Contain(System.Object)">
            <summary>
            Returns a new <see cref="T:NUnit.Framework.Constraints.SomeItemsConstraint"/> checking for the
            presence of a particular object in the collection.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Contain(System.String)">
            <summary>
            Returns a new ContainsConstraint. This constraint
            will, in turn, make use of the appropriate second-level
            constraint, depending on the type of the actual argument.
            This overload is only used if the item sought is a string,
            since any other type implies that we are looking for a
            collection member.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.ContainKey(System.Object)">
            <summary>
            Returns a new DictionaryContainsKeyConstraint checking for the
            presence of a particular key in the Dictionary key collection.
            </summary>
            <param name="expected">The key to be matched in the Dictionary key collection</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.ContainValue(System.Object)">
            <summary>
            Returns a new DictionaryContainsValueConstraint checking for the
            presence of a particular value in the Dictionary value collection.
            </summary>
            <param name="expected">The value to be matched in the Dictionary value collection</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.StringContaining(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.ContainsSubstring(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.StartWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.StartsWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.StringStarting(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.EndWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.EndsWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.StringEnding(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Match(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value matches the regular expression supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Match(System.Text.RegularExpressions.Regex)">
            <summary>
            Returns a constraint that succeeds if the actual
            value matches the regular expression supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Matches(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value matches the regular expression supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.Matches(System.Text.RegularExpressions.Regex)">
            <summary>
            Returns a constraint that succeeds if the actual
            value matches the regular expression supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.StringMatching(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value matches the regular expression supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.SamePath(System.String)">
            <summary>
            Returns a constraint that tests whether the path provided
            is the same as an expected path after canonicalization.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.SubPathOf(System.String)">
            <summary>
            Returns a constraint that tests whether the path provided
            is the a subpath of the expected path after canonicalization.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.SamePathOrUnder(System.String)">
            <summary>
            Returns a constraint that tests whether the path provided
            is the same path or under an expected path after canonicalization.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.InRange(System.Object,System.Object)">
            <summary>
            Returns a constraint that tests whether the actual value falls
            inclusively within a specified range.
            </summary>
            <param name="from">Inclusive beginning of the range.</param>
            <param name="to">Inclusive end of the range.</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintExpression.Exist">
            <summary>
            Returns a constraint that succeeds if the value
            is a file or directory and it exists.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.AnyOf(System.Object[])">
            <summary>
            Returns a constraint that tests if an item is equal to any of parameters
            </summary>
            <param name="expected">Expected values</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintExpression.ItemAt(System.Object[])">
            <summary>
            Returns a new IndexerConstraintExpression, which will
            apply any following constraint to that indexer value.
            </summary>
            <param name="indexArgs">Index accessor values.</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintStatus">
            <summary>
            ConstraintStatus represents the status of a ConstraintResult
            returned by a Constraint being applied to an actual value.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ConstraintStatus.Unknown">
            <summary>
            The status has not yet been set
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ConstraintStatus.Success">
            <summary>
            The constraint succeeded
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ConstraintStatus.Failure">
            <summary>
            The constraint failed
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ConstraintStatus.Error">
            <summary>
            An error occurred in applying the constraint (reserved for future use)
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintResult">
            <summary>
            Contains the result of matching a <see cref="T:NUnit.Framework.Constraints.Constraint"/> against an actual value.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintResult.#ctor(NUnit.Framework.Constraints.IConstraint,System.Object)">
            <summary>
            Constructs a <see cref="T:NUnit.Framework.Constraints.ConstraintResult"/> for a particular <see cref="T:NUnit.Framework.Constraints.Constraint"/>.
            </summary>
            <param name="constraint">The Constraint to which this result applies.</param>
            <param name="actualValue">The actual value to which the Constraint was applied.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintResult.#ctor(NUnit.Framework.Constraints.IConstraint,System.Object,NUnit.Framework.Constraints.ConstraintStatus)">
            <summary>
            Constructs a <see cref="T:NUnit.Framework.Constraints.ConstraintResult"/> for a particular <see cref="T:NUnit.Framework.Constraints.Constraint"/>.
            </summary>
            <param name="constraint">The Constraint to which this result applies.</param>
            <param name="actualValue">The actual value to which the Constraint was applied.</param>
            <param name="status">The status of the new ConstraintResult.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintResult.#ctor(NUnit.Framework.Constraints.IConstraint,System.Object,System.Boolean)">
            <summary>
            Constructs a <see cref="T:NUnit.Framework.Constraints.ConstraintResult"/> for a particular <see cref="T:NUnit.Framework.Constraints.Constraint"/>.
            </summary>
            <param name="constraint">The Constraint to which this result applies.</param>
            <param name="actualValue">The actual value to which the Constraint was applied.</param>
            <param name="isSuccess">If true, applies a status of Success to the result, otherwise Failure.</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintResult.ActualValue">
            <summary>
            The actual value that was passed to the <see cref="M:NUnit.Framework.Constraints.Constraint.ApplyTo``1(``0)"/> method.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintResult.Status">
            <summary>
            Gets and sets the ResultStatus for this result.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintResult.IsSuccess">
            <summary>
            True if actual value meets the Constraint criteria otherwise false.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintResult.Name">
            <summary>
            Display friendly name of the constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintResult.Description">
            <summary>
            Description of the constraint may be affected by the state the constraint had
            when <see cref="M:NUnit.Framework.Constraints.Constraint.ApplyTo``1(``0)"/> was performed against the actual value.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintResult.WriteMessageTo(NUnit.Framework.Constraints.MessageWriter)">
             <summary>
             Write the failure message to the MessageWriter provided
             as an argument. The default implementation simply passes
             the result and the actual value to the writer, which
             then displays the constraint description and the value.
            
             Constraints that need to provide additional details,
             such as where the error occurred, can override this.
             </summary>
             <param name="writer">The MessageWriter on which to display the message</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintResult.WriteAdditionalLinesTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write some additional failure message.
            </summary>
            <param name="writer">The MessageWriter on which to display the message</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintResult.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. The default implementation simply writes
            the raw value of actual, leaving it to the writer to
            perform any formatting.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.ContainsConstraint">
            <summary>
            ContainsConstraint tests a whether a string contains a substring
            or a collection contains an object. It postpones the decision of
            which test to use until the type of the actual argument is known.
            This allows testing whether a string is contained in a collection
            or as a substring of another string using the same syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ContainsConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.ContainsConstraint"/> class.
            </summary>
            <param name="expected">The expected value contained within the string/collection.</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.ContainsConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ContainsConstraint.IgnoreCase">
            <summary>
            Flag the constraint to ignore case and return self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ContainsConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.CountZeroConstraint">
            <summary>
            CountZeroConstraint tests whether an instance has a property .Count with value zero.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.CountZeroConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CountZeroConstraint.HasCountProperty(System.Type)">
            <summary>
            Checks if the specified <paramref name="type"/> has a int Count property.
            </summary>
            <param name="type">Type to check.</param>
            <returns><see langword="true"/> when <paramref name="type"/> has a 'int Count' property, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.CountZeroConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.DateTimes">
            <summary>
            The DateTimes class contains common operations on Date and Time values.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.DelayedConstraint">
            <summary>
             Applies a delay to the match so that a match can be evaluated in the future.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.DelayedConstraint.WithRawDelayInterval">
            <summary>
            Allows only changing the time dimension of delay interval and setting a polling interval of a DelayedConstraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.WithRawDelayInterval.#ctor(NUnit.Framework.Constraints.DelayedConstraint)">
            <summary>
            Creates a new DelayedConstraint.WithRawDelayInterval
            </summary>
            <param name="parent">Parent DelayedConstraint on which delay interval dimension is required to be set</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.DelayedConstraint.WithRawDelayInterval.Minutes">
            <summary>
            Changes delay interval dimension to minutes
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.DelayedConstraint.WithRawDelayInterval.Seconds">
            <summary>
            Changes delay interval dimension to seconds
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.DelayedConstraint.WithRawDelayInterval.MilliSeconds">
            <summary>
            Changes delay interval dimension to milliseconds
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.WithRawDelayInterval.PollEvery(System.Int32)">
            <summary>
            Set polling interval, in milliseconds
            </summary>
            <param name="milliSeconds">A time interval, in milliseconds</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.DelayedConstraint.WithDimensionedDelayInterval">
            <summary>
            Allows only setting the polling interval of a DelayedConstraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.WithDimensionedDelayInterval.#ctor(NUnit.Framework.Constraints.DelayedConstraint)">
            <summary>
            Creates a new DelayedConstraint.WithDimensionedDelayInterval
            </summary>
            <param name="parent">Parent DelayedConstraint on which polling interval is required to be set</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.WithDimensionedDelayInterval.PollEvery(System.Int32)">
            <summary>
            Set polling interval, in milliseconds
            </summary>
            <param name="milliSeconds">A time interval, in milliseconds</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.DelayedConstraint.WithRawPollingInterval">
            <summary>
            Allows only changing the time dimension of the polling interval of a DelayedConstraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.WithRawPollingInterval.#ctor(NUnit.Framework.Constraints.DelayedConstraint)">
            <summary>
            Creates a new DelayedConstraint.WithRawPollingInterval
            </summary>
            <param name="parent">Parent DelayedConstraint on which polling dimension is required to be set</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.DelayedConstraint.WithRawPollingInterval.Minutes">
            <summary>
            Changes polling interval dimension to minutes
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.DelayedConstraint.WithRawPollingInterval.Seconds">
            <summary>
            Changes polling interval dimension to seconds
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.DelayedConstraint.WithRawPollingInterval.MilliSeconds">
            <summary>
            Changes polling interval dimension to milliseconds
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.DelayedConstraint.DelayInterval">
            <summary>
            Delay value store as an Interval object
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.DelayedConstraint.PollingInterval">
            <summary>
            Polling value stored as an Interval object
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.#ctor(NUnit.Framework.Constraints.IConstraint,System.Int32)">
            <summary>
             Creates a new DelayedConstraint
            </summary>
            <param name="baseConstraint">The inner constraint to decorate</param>
            <param name="delayInMilliseconds">The time interval after which the match is performed</param>
            <exception cref="T:System.InvalidOperationException">If the value of <paramref name="delayInMilliseconds"/> is less than 0</exception>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.#ctor(NUnit.Framework.Constraints.IConstraint,System.Int32,System.Int32)">
            <summary>
             Creates a new DelayedConstraint
            </summary>
            <param name="baseConstraint">The inner constraint to decorate</param>
            <param name="delayInMilliseconds">The time interval after which the match is performed, in milliseconds</param>
            <param name="pollingIntervalInMilliseconds">The time interval used for polling, in milliseconds</param>
            <exception cref="T:System.InvalidOperationException">If the value of <paramref name="delayInMilliseconds"/> is less than 0</exception>
        </member>
        <member name="P:NUnit.Framework.Constraints.DelayedConstraint.Description">
            <summary>
            Gets text describing a constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for if the base constraint fails, false if it succeeds</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.ApplyTo``1(NUnit.Framework.Constraints.ActualValueDelegate{``0})">
            <summary>
            Test whether the constraint is satisfied by a delegate
            </summary>
            <param name="del">The delegate whose value is to be tested</param>
            <returns>A ConstraintResult</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.ApplyTo``1(``0@)">
            <summary>
            Test whether the constraint is satisfied by a given reference.
            Overridden to wait for the specified delay period before
            calling the base constraint with the dereferenced value.
            </summary>
            <param name="actual">A reference to the value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.GetStringRepresentation">
            <summary>
            Returns the string representation of the constraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.TimestampOffset(System.Int64,System.TimeSpan)">
            <summary>
            Adjusts a Timestamp by a given TimeSpan
            </summary>
            <param name="timestamp"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.DelayedConstraint.TimestampDiff(System.Int64,System.Int64)">
            <summary>
            Returns the difference between two Timestamps as a TimeSpan
            </summary>
            <param name="timestamp1"></param>
            <param name="timestamp2"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.DictionaryContainsKeyConstraint">
            <summary>
            DictionaryContainsKeyConstraint is used to test whether a dictionary
            contains an expected object as a key.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.DictionaryContainsKeyConstraint.#ctor(System.Object)">
            <summary>
            Construct a DictionaryContainsKeyConstraint
            </summary>
            <param name="expected"></param>
        </member>
        <member name="P:NUnit.Framework.Constraints.DictionaryContainsKeyConstraint.DisplayName">
            <summary>
            The display name of this Constraint for use by ToString().
            The default value is the name of the constraint with
            trailing "Constraint" removed. Derived classes may set
            this to another name in their constructors.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.DictionaryContainsKeyConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.DictionaryContainsKeyConstraint.Expected">
            <summary>
            Gets the expected object
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.DictionaryContainsKeyConstraint.WithValue(System.Object)">
            <summary>
            Returns a new DictionaryContainsKeyValuePairConstraint checking for the
            presence of a particular key-value-pair in the dictionary.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.DictionaryContainsKeyConstraint.IgnoreCase">
            <summary>
            Flag the constraint to ignore case and return self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.DictionaryContainsKeyConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.DictionaryContainsKeyConstraint.Matches(System.Collections.IEnumerable)">
            <summary>
            Test whether the expected key is contained in the dictionary
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.DictionaryContainsKeyConstraint.Using``2(System.Func{``0,``1,System.Boolean})">
            <summary>
            Flag the constraint to use the supplied predicate function
            </summary>
            <param name="comparison">The comparison function to use.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.DictionaryContainsKeyConstraint.Using``1(System.Comparison{``0})">
            <summary>
            Flag the constraint to use the supplied Comparison object.
            </summary>
            <param name="comparison">The Comparison object to use.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.DictionaryContainsKeyConstraint.Using(System.Collections.IComparer)">
            <summary>
            Flag the constraint to use the supplied IComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.DictionaryContainsKeyConstraint.Using``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Flag the constraint to use the supplied IComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.DictionaryContainsKeyConstraint.Using(System.Collections.IEqualityComparer)">
            <summary>
            Flag the constraint to use the supplied IEqualityComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.DictionaryContainsKeyConstraint.Using``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Flag the constraint to use the supplied IEqualityComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.DictionaryContainsKeyConstraint.Using``1(System.Func{``0,``0,System.Boolean})">
            <summary>
            Flag the constraint to use the supplied boolean-returning delegate.
            </summary>
            <param name="comparer">The supplied boolean-returning delegate to use.</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.DictionaryContainsKeyValuePairConstraint">
            <summary>
            DictionaryContainsKeyValuePairConstraint is used to test whether a dictionary
            contains an expected object as a key-value-pair.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.DictionaryContainsKeyValuePairConstraint.#ctor(System.Object,System.Object)">
            <summary>
            Construct a DictionaryContainsKeyValuePairConstraint
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.DictionaryContainsKeyValuePairConstraint.DisplayName">
            <summary>
            The display name of this Constraint for use by ToString().
            The default value is the name of the constraint with
            trailing "Constraint" removed. Derived classes may set
            this to another name in their constructors.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.DictionaryContainsKeyValuePairConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.DictionaryContainsKeyValuePairConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.DictionaryContainsKeyValuePairConstraint.Matches(System.Collections.IEnumerable)">
            <summary>
            Test whether the expected key is contained in the dictionary
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.DictionaryContainsValueConstraint">
            <summary>
            DictionaryContainsValueConstraint is used to test whether a dictionary
            contains an expected object as a value.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.DictionaryContainsValueConstraint.#ctor(System.Object)">
            <summary>
            Construct a DictionaryContainsValueConstraint
            </summary>
            <param name="expected"></param>
        </member>
        <member name="P:NUnit.Framework.Constraints.DictionaryContainsValueConstraint.DisplayName">
            <summary> 
            The display name of this Constraint for use by ToString().
            The default value is the name of the constraint with
            trailing "Constraint" removed. Derived classes may set
            this to another name in their constructors.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.DictionaryContainsValueConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.DictionaryContainsValueConstraint.Expected">
            <summary>
            Gets the expected object
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.DictionaryContainsValueConstraint.Matches(System.Collections.IEnumerable)">
            <summary>
            Test whether the expected value is contained in the dictionary
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.DictionaryContainsValueConstraint.Using``2(System.Func{``0,``1,System.Boolean})">
            <summary>
            Flag the constraint to use the supplied predicate function
            </summary>
            <param name="comparison">The comparison function to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.EachItemConstraintResult">
            <summary>
            Provides a <see cref="T:NUnit.Framework.Constraints.ConstraintResult"/> for the constraints 
            that are applied to each item in the collection
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EachItemConstraintResult.#ctor(NUnit.Framework.Constraints.IConstraint,System.Object,System.Object,System.Int32)">
            <summary>
            Constructs a <see cref="T:NUnit.Framework.Constraints.EachItemConstraintResult" /> for a particular <see cref="T:NUnit.Framework.Constraints.Constraint" />
            Only used for Failure
            </summary>
            <param name="constraint">The Constraint to which this result applies</param>
            <param name="actualValue">The actual value to which the Constraint was applied</param>
            <param name="nonMatchingItem">Actual item that does not match expected condition</param>
            <param name="nonMatchingIndex">Non matching item index</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EachItemConstraintResult.WriteAdditionalLinesTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write constraint description, actual items, and non-matching item
            </summary>
            <param name="writer">The MessageWriter on which to display the message</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.EmptyCollectionConstraint">
            <summary>
            EmptyCollectionConstraint tests whether a collection is empty. 
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.EmptyCollectionConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyCollectionConstraint.Matches(System.Collections.IEnumerable)">
            <summary>
            Check that the collection is empty
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.EmptyConstraint">
            <summary>
            EmptyConstraint tests a whether a string or collection is empty,
            postponing the decision about which test is applied until the
            type of the actual argument is known.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.EmptyConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.EmptyDirectoryConstraint">
            <summary>
            EmptyDirectoryConstraint is used to test that a directory is empty
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.EmptyDirectoryConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyDirectoryConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.EmptyGuidConstraint">
            <summary>
            EmptyGuidConstraint tests whether a Guid is empty.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.EmptyGuidConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyGuidConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.EmptyStringConstraint">
            <summary>
            EmptyStringConstraint tests whether a string is empty.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.EmptyStringConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EmptyStringConstraint.Matches(System.String)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.EndsWithConstraint">
            <summary>
            EndsWithConstraint can test whether a string ends
            with an expected substring.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EndsWithConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.EndsWithConstraint"/> class.
            </summary>
            <param name="expected">The expected string</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EndsWithConstraint.Matches(System.String)">
            <summary>
            Test whether the constraint is matched by the actual value.
            This is a template method, which calls the IsMatch method
            of the derived class.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.EqualConstraint">
            <summary>
            EqualConstraint is able to compare an actual value with the
            expected value provided in its constructor. Two objects are
            considered equal if both are null, or if both have the same
            value. NUnit has special semantics for some object types.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.EqualConstraint._comparer">
            <summary>
            NUnitEqualityComparer used to test equality.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.EqualConstraint"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Tolerance">
            <summary>
            Gets the tolerance for this comparison.
            </summary>
            <value>
            The tolerance.
            </value>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.CaseInsensitive">
            <summary>
            Gets a value indicating whether to compare case insensitive.
            </summary>
            <value>
              <see langword="true"/> if comparing case insensitive; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.ClipStrings">
            <summary>
            Gets a value indicating whether or not to clip strings.
            </summary>
            <value>
              <see langword="true"/> if set to clip strings otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.FailurePoints">
            <summary>
            Gets the failure points.
            </summary>
            <value>
            The failure points.
            </value>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.IgnoreCase">
            <summary>
            Flag the constraint to ignore case and return self.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.NoClip">
            <summary>
            Flag the constraint to suppress string clipping
            and return self.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.AsCollection">
            <summary>
            Flag the constraint to compare arrays as collections
            and return self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Within(System.Object)">
            <summary>
            Flag the constraint to use a tolerance when determining equality.
            </summary>
            <param name="amount">Tolerance value to be used</param>
            <returns>Self.</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.WithSameOffset">
            <summary>
            Flags the constraint to include <see cref="P:System.DateTimeOffset.Offset"/>
            property in comparison of two <see cref="T:System.DateTimeOffset"/> values.
            </summary>
            <remarks>
            Using this modifier does not allow to use the <see cref="M:NUnit.Framework.Constraints.EqualConstraint.Within(System.Object)"/>
            constraint modifier.
            </remarks>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Ulps">
            <summary>
            Switches the .Within() modifier to interpret its tolerance as
            a distance in representable values (see remarks).
            </summary>
            <returns>Self.</returns>
            <remarks>
            Ulp stands for "unit in the last place" and describes the minimum
            amount a given value can change. For any integers, an ulp is 1 whole
            digit. For floating point values, the accuracy of which is better
            for smaller numbers and worse for larger numbers, an ulp depends
            on the size of the number. Using ulps for comparison of floating
            point results instead of fixed tolerances is safer because it will
            automatically compensate for the added inaccuracy of larger numbers.
            </remarks>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Percent">
            <summary>
            Switches the .Within() modifier to interpret its tolerance as
            a percentage that the actual values is allowed to deviate from
            the expected value.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Days">
            <summary>
            Causes the tolerance to be interpreted as a TimeSpan in days.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Hours">
            <summary>
            Causes the tolerance to be interpreted as a TimeSpan in hours.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Minutes">
            <summary>
            Causes the tolerance to be interpreted as a TimeSpan in minutes.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Seconds">
            <summary>
            Causes the tolerance to be interpreted as a TimeSpan in seconds.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Milliseconds">
            <summary>
            Causes the tolerance to be interpreted as a TimeSpan in milliseconds.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Ticks">
            <summary>
            Causes the tolerance to be interpreted as a TimeSpan in clock ticks.
            </summary>
            <returns>Self</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Using(System.Collections.IComparer)">
            <summary>
            Flag the constraint to use the supplied IComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Using``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Flag the constraint to use the supplied IComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Using``1(System.Func{``0,``0,System.Boolean})">
            <summary>
            Flag the constraint to use the supplied boolean-returning delegate.
            </summary>
            <param name="comparer">The boolean-returning delegate to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Using``1(System.Comparison{``0})">
            <summary>
            Flag the constraint to use the supplied Comparison object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Using(System.Collections.IEqualityComparer)">
            <summary>
            Flag the constraint to use the supplied IEqualityComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Using``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Flag the constraint to use the supplied IEqualityComparer object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.Using``2(System.Func{``0,``1,System.Boolean})">
            <summary>
            Flag the constraint to use the supplied predicate function
            </summary>
            <param name="comparison">The comparison function to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.EqualConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.EqualConstraintResult">
            <summary>
            The EqualConstraintResult class is tailored for formatting
            and displaying the result of an EqualConstraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraintResult.#ctor(NUnit.Framework.Constraints.EqualConstraint,System.Object,System.Boolean)">
            <summary>
            Construct an EqualConstraintResult
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraintResult.WriteMessageTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write a failure message. Overridden to provide custom
            failure messages for EqualConstraint.
            </summary>
            <param name="writer">The MessageWriter to write to</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraintResult.DisplayCollectionDifferences(NUnit.Framework.Constraints.MessageWriter,System.Collections.ICollection,System.Collections.ICollection,System.Int32)">
            <summary>
            Display the failure information for two collections that did not match.
            </summary>
            <param name="writer">The MessageWriter on which to display</param>
            <param name="expected">The expected collection.</param>
            <param name="actual">The actual collection</param>
            <param name="depth">The depth of this failure in a set of nested collections</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraintResult.DisplayTypesAndSizes(NUnit.Framework.Constraints.MessageWriter,System.Collections.IEnumerable,System.Collections.IEnumerable,System.Int32)">
            <summary>
            Displays a single line showing the types and sizes of the expected
            and actual collections or arrays. If both are identical, the value is
            only shown once.
            </summary>
            <param name="writer">The MessageWriter on which to display</param>
            <param name="expected">The expected collection or array</param>
            <param name="actual">The actual collection or array</param>
            <param name="indent">The indentation level for the message line</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraintResult.DisplayFailurePoint(NUnit.Framework.Constraints.MessageWriter,System.Collections.IEnumerable,System.Collections.IEnumerable,NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint,System.Int32)">
            <summary>
            Displays a single line showing the point in the expected and actual
            arrays at which the comparison failed. If the arrays have different
            structures or dimensions, both values are shown.
            </summary>
            <param name="writer">The MessageWriter on which to display</param>
            <param name="expected">The expected array</param>
            <param name="actual">The actual array</param>
            <param name="failurePoint">Index of the failure point in the underlying collections</param>
            <param name="indent">The indentation level for the message line</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualConstraintResult.DisplayEnumerableDifferences(NUnit.Framework.Constraints.MessageWriter,System.Collections.IEnumerable,System.Collections.IEnumerable,System.Int32)">
            <summary>
            Display the failure information for two IEnumerables that did not match.
            </summary>
            <param name="writer">The MessageWriter on which to display</param>
            <param name="expected">The expected enumeration.</param>
            <param name="actual">The actual enumeration</param>
            <param name="depth">The depth of this failure in a set of nested collections</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.EqualityAdapter">
            <summary>
            EqualityAdapter class handles all equality comparisons
            that use an <see cref="T:System.Collections.IEqualityComparer"/>, <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>
            or a <see cref="T:NUnit.Framework.Constraints.ComparisonAdapter"/>.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.AreEqual(System.Object,System.Object)">
            <summary>
            Compares two objects, returning true if they are equal
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.CanCompare(System.Object,System.Object)">
            <summary>
            Returns true if the two objects can be compared by this adapter.
            The base adapter cannot handle IEnumerables except for strings.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.For(System.Collections.IComparer)">
            <summary>
            Returns an <see cref="T:NUnit.Framework.Constraints.EqualityAdapter"/> that wraps an <see cref="T:System.Collections.IComparer"/>.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.EqualityAdapter.ComparerAdapter">
            <summary>
            <see cref="T:NUnit.Framework.Constraints.EqualityAdapter"/> that wraps an <see cref="T:System.Collections.IComparer"/>.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.For(System.Collections.IEqualityComparer)">
            <summary>
            Returns an <see cref="T:NUnit.Framework.Constraints.EqualityAdapter"/> that wraps an <see cref="T:System.Collections.IEqualityComparer"/>.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.For``2(System.Func{``0,``1,System.Boolean})">
            <summary>
            Returns an EqualityAdapter that uses a predicate function for items comparison.
            </summary>
            <typeparam name="TExpected"></typeparam>
            <typeparam name="TActual"></typeparam>
            <param name="comparison"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.PredicateEqualityAdapter`2.CanCompare(System.Object,System.Object)">
            <summary>
            Returns true if the two objects can be compared by this adapter.
            The base adapter cannot handle IEnumerables except for strings.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.PredicateEqualityAdapter`2.AreEqual(System.Object,System.Object)">
            <summary>
            Compares two objects, returning true if they are equal
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.GenericEqualityAdapter`1.CanCompare(System.Object,System.Object)">
            <summary>
            Returns true if the two objects can be compared by this adapter.
            Generic adapter requires objects of the specified type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.For``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns an <see cref="T:NUnit.Framework.Constraints.EqualityAdapter"/> that wraps an <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.For``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns an <see cref="T:NUnit.Framework.Constraints.EqualityAdapter"/> that wraps an <see cref="T:System.Collections.Generic.IComparer`1"/>.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.EqualityAdapter.ComparerAdapter`1">
            <summary>
            <see cref="T:NUnit.Framework.Constraints.EqualityAdapter"/> that wraps an <see cref="T:System.Collections.IComparer"/>.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.EqualityAdapter.For``1(System.Comparison{``0})">
            <summary>
            Returns an <see cref="T:NUnit.Framework.Constraints.EqualityAdapter"/> that wraps a <see cref="T:System.Comparison`1"/>.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ExactCountConstraint">
            <summary>
            ExactCountConstraint applies another constraint to each
            item in a collection, succeeding only if a specified
            number of items succeed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactCountConstraint.#ctor(System.Int32)">
            <summary>
            Construct a standalone ExactCountConstraint
            </summary>
            <param name="expectedCount"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactCountConstraint.#ctor(System.Int32,NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Construct an ExactCountConstraint on top of an existing constraint
            </summary>
            <param name="expectedCount"></param>
            <param name="itemConstraint"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactCountConstraint.ApplyTo``1(``0)">
            <summary>
            Apply the item constraint to each item in the collection,
            succeeding only if the expected number of items pass.
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>A ConstraintResult</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.ExactCountConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ExactCountConstraintResult">
            <summary>
            Contain the result of matching a <see cref="T:NUnit.Framework.Constraints.ExactCountConstraint"/> against an actual value.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ExactCountConstraintResult._matchCount">
            <summary>
            The count of matched items of the <see cref="T:NUnit.Framework.Constraints.ExactCountConstraint"/>
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ExactCountConstraintResult._itemList">
            <summary>
            A list with maximum count (+1) of items of the <see cref="T:NUnit.Framework.Constraints.ExactCountConstraint"/>
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactCountConstraintResult.#ctor(NUnit.Framework.Constraints.IConstraint,System.Object,System.Boolean,System.Int32,System.Collections.Generic.ICollection{System.Object})">
            <summary>
            Constructs a <see cref="T:NUnit.Framework.Constraints.ConstraintResult"/> for a <see cref="T:NUnit.Framework.Constraints.ExactCountConstraint"/>.
            </summary>
            <param name="constraint">The Constraint to which this result applies.</param>
            <param name="actualValue">The actual value to which the Constraint was applied.</param>
            <param name="isSuccess">If true, applies a status of Success to the result, otherwise Failure.</param>
            <param name="matchCount">Count of matched items of the <see cref="T:NUnit.Framework.Constraints.ExactCountConstraint"/></param>
            <param name="itemList">A list with maximum count (+1) of items of the <see cref="T:NUnit.Framework.Constraints.ExactCountConstraint"/></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactCountConstraintResult.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a MessageWriter.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.ExactTypeConstraint">
            <summary>
            ExactTypeConstraint is used to test that an object
            is of the exact type provided in the constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactTypeConstraint.#ctor(System.Type)">
            <summary>
            Construct an ExactTypeConstraint for a given Type
            </summary>
            <param name="type">The expected Type.</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.ExactTypeConstraint.DisplayName">
            <summary> 
            The display name of this Constraint for use by ToString().
            The default value is the name of the constraint with
            trailing "Constraint" removed. Derived classes may set
            this to another name in their constructors.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactTypeConstraint.Matches(System.Object)">
            <summary>
            Apply the constraint to an actual value, returning true if it succeeds
            </summary>
            <param name="actual">The actual argument</param>
            <returns>True if the constraint succeeds, otherwise false.</returns>
        </member>
        <member name="P:NUnit.Framework.Constraints.ExceptionNotThrownConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExceptionNotThrownConstraint.ApplyTo``1(``0)">
            <summary>
            Applies the constraint to an actual value, returning a ConstraintResult.
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>A ConstraintResult</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.ExceptionTypeConstraint">
            <summary>
            ExceptionTypeConstraint is a special version of ExactTypeConstraint
            used to provided detailed info about the exception thrown in
            an error message.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExceptionTypeConstraint.#ctor(System.Type)">
            <summary>
            Constructs an ExceptionTypeConstraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExceptionTypeConstraint.ApplyTo``1(``0)">
            <summary>
            Applies the constraint to an actual value, returning a ConstraintResult.
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>A ConstraintResult</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.FalseConstraint">
            <summary>
            FalseConstraint tests that the actual value is false
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.FalseConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.FalseConstraint"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.FalseConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.FileExistsConstraint">
            <summary>
            FileExistsConstraint is used to determine if a file exists
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.FileExistsConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.FileExistsConstraint"/> class.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.FileExistsConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.FileOrDirectoryExistsConstraint">
            <summary>
            FileOrDirectoryExistsConstraint is used to determine if a file or directory exists
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.FileOrDirectoryExistsConstraint.IgnoreDirectories">
            <summary>
            If true, the constraint will only check if files exist, not directories
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.FileOrDirectoryExistsConstraint.IgnoreFiles">
            <summary>
            If true, the constraint will only check if directories exist, not files
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.FileOrDirectoryExistsConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.FileOrDirectoryExistsConstraint"/> class that
            will check files and directories.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.FileOrDirectoryExistsConstraint.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.FileOrDirectoryExistsConstraint"/> class that
            will only check files if ignoreDirectories is true.
            </summary>
            <param name="ignoreDirectories">if set to <see langword="true"/> [ignore directories].</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.FileOrDirectoryExistsConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.FileOrDirectoryExistsConstraint.ApplyTo``1(``0)">
            <summary>
            Applies the constraint to an actual value, returning a ConstraintResult.
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>A ConstraintResult</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.FloatingPointNumerics">
            <summary>Helper routines for working with floating point numbers</summary>
            <remarks>
              <para>
                The floating point comparison code is based on this excellent article:
                https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/
              </para>
              <para>
                "ULP" means Unit in the Last Place and in the context of this library refers to
                the distance between two adjacent floating point numbers. IEEE floating point
                numbers can only represent a finite subset of natural numbers, with greater
                accuracy for smaller numbers and lower accuracy for very large numbers.
              </para>
              <para>
                If a comparison is allowed "2 ulps" of deviation, that means the values are
                allowed to deviate by up to 2 adjacent floating point values, which might be
                as low as 0.0000001 for small numbers or as high as 10.0 for large numbers.
              </para>
            </remarks>
        </member>
        <member name="T:NUnit.Framework.Constraints.FloatingPointNumerics.FloatIntUnion">
            <summary>Union of a floating point variable and an integer</summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.FloatingPointNumerics.FloatIntUnion.Float">
            <summary>The union's value as a floating point variable</summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.FloatingPointNumerics.FloatIntUnion.Int">
            <summary>The union's value as an integer</summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.FloatingPointNumerics.FloatIntUnion.UInt">
            <summary>The union's value as an unsigned integer</summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.FloatingPointNumerics.DoubleLongUnion">
            <summary>Union of a double precision floating point variable and a long</summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.FloatingPointNumerics.DoubleLongUnion.Double">
            <summary>The union's value as a double precision floating point variable</summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.FloatingPointNumerics.DoubleLongUnion.Long">
            <summary>The union's value as a long</summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.FloatingPointNumerics.DoubleLongUnion.ULong">
            <summary>The union's value as an unsigned long</summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.FloatingPointNumerics.AreAlmostEqualUlps(System.Single,System.Single,System.Int32)">
            <summary>Compares two floating point values for equality</summary>
            <param name="left">First floating point value to be compared</param>
            <param name="right">Second floating point value t be compared</param>
            <param name="maxUlps">
              Maximum number of representable floating point values that are allowed to
              be between the left and the right floating point values
            </param>
            <returns>True if both numbers are equal or close to being equal</returns>
            <remarks>
              <para>
                Floating point values can only represent a finite subset of natural numbers.
                For example, the values 2.00000000 and 2.00000024 can be stored in a float,
                but nothing between them.
              </para>
              <para>
                This comparison will count how many possible floating point values are between
                the left and the right number. If the number of possible values between both
                numbers is less than or equal to maxUlps, then the numbers are considered as
                being equal.
              </para>
              <para>
                Implementation partially follows the code outlined here:
                http://www.anttirt.net/2007/08/19/proper-floating-point-comparisons/
              </para>
            </remarks>
        </member>
        <member name="M:NUnit.Framework.Constraints.FloatingPointNumerics.AreAlmostEqualUlps(System.Double,System.Double,System.Int64)">
            <summary>Compares two double precision floating point values for equality</summary>
            <param name="left">First double precision floating point value to be compared</param>
            <param name="right">Second double precision floating point value t be compared</param>
            <param name="maxUlps">
              Maximum number of representable double precision floating point values that are
              allowed to be between the left and the right double precision floating point values
            </param>
            <returns>True if both numbers are equal or close to being equal</returns>
            <remarks>
              <para>
                Double precision floating point values can only represent a limited series of
                natural numbers. For example, the values 2.0000000000000000 and 2.0000000000000004
                can be stored in a double, but nothing between them.
              </para>
              <para>
                This comparison will count how many possible double precision floating point
                values are between the left and the right number. If the number of possible
                values between both numbers is less than or equal to maxUlps, then the numbers
                are considered as being equal.
              </para>
              <para>
                Implementation partially follows the code outlined here:
                http://www.anttirt.net/2007/08/19/proper-floating-point-comparisons/
              </para>
            </remarks>
        </member>
        <member name="T:NUnit.Framework.Constraints.GreaterThanConstraint">
            <summary>
            Tests whether a value is greater than the value supplied to its constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.GreaterThanConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.GreaterThanConstraint"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.GreaterThanConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.GreaterThanConstraint.PerformComparison(NUnit.Framework.Constraints.ComparisonAdapter,System.Object,System.Object,NUnit.Framework.Constraints.Tolerance)">
            <summary>
            Perform the comparison
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.GreaterThanOrEqualConstraint">
            <summary>
            Tests whether a value is greater than or equal to the value supplied to its constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.GreaterThanOrEqualConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.GreaterThanOrEqualConstraint"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.GreaterThanOrEqualConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.GreaterThanOrEqualConstraint.PerformComparison(NUnit.Framework.Constraints.ComparisonAdapter,System.Object,System.Object,NUnit.Framework.Constraints.Tolerance)">
            <summary>
            Perform the comparison
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.IConstraint">
            <summary>
            Interface for all constraints
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.IConstraint.DisplayName">
            <summary>
            The display name of this Constraint for use by ToString().
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.IConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.IConstraint.Arguments">
            <summary>
            Arguments provided to this Constraint, for use in
            formatting the description.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.IConstraint.Builder">
            <summary>
            The ConstraintBuilder holding this constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.IConstraint.ApplyTo``1(``0)">
            <summary>
            Applies the constraint to an actual value, returning a ConstraintResult.
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>A ConstraintResult</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.IConstraint.ApplyTo``1(NUnit.Framework.Constraints.ActualValueDelegate{``0})">
            <summary>
            Applies the constraint to an ActualValueDelegate that returns 
            the value to be tested. The default implementation simply evaluates 
            the delegate but derived classes may override it to provide for 
            delayed processing.
            </summary>
            <param name="del">An ActualValueDelegate</param>
            <returns>A ConstraintResult</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.IConstraint.ApplyTo``1(``0@)">
            <summary>
            Test whether the constraint is satisfied by a given reference.
            The default implementation simply dereferences the value but
            derived classes may override it to provide for delayed processing.
            </summary>
            <param name="actual">A reference to the value to be tested</param>
            <returns>A ConstraintResult</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.IndexerConstraint">
            <summary>
            IndexerConstraint extracts a named property and uses
            its value as the actual value for a chained constraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.IndexerConstraint.#ctor(System.Collections.Generic.IEnumerable{System.Object},NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.IndexerConstraint"/> class.
            </summary>
            <param name="indexerArguments">The argument list for the indexer.</param>
            <param name="baseConstraint">The constraint to apply to the indexer.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.IndexerConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.IndexerConstraint.GetStringRepresentation">
            <summary>
            Returns the string representation of the constraint.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.InstanceOfTypeConstraint">
            <summary>
            InstanceOfTypeConstraint is used to test that an object
            is of the same type provided or derived from it.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.InstanceOfTypeConstraint.#ctor(System.Type)">
            <summary>
            Construct an InstanceOfTypeConstraint for the type provided
            </summary>
            <param name="type">The expected Type</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.InstanceOfTypeConstraint.DisplayName">
            <summary> 
            The display name of this Constraint for use by ToString().
            The default value is the name of the constraint with
            trailing "Constraint" removed. Derived classes may set
            this to another name in their constructors.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.InstanceOfTypeConstraint.Matches(System.Object)">
            <summary>
            Apply the constraint to an actual value, returning true if it succeeds
            </summary>
            <param name="actual">The actual argument</param>
            <returns>True if the constraint succeeds, otherwise false.</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.Interval">
            <summary>
            Keeps track of an interval time which can be represented in
            Minutes, Seconds or Milliseconds
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Interval.#ctor(System.Int32)">
            <summary>
            Constructs a interval given an value in milliseconds
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Interval.AsTimeSpan">
            <summary>
            Gets Interval value represented as a TimeSpan object
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Interval.InMinutes">
            <summary>
            Returns the interval with the current value as a number of minutes.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Interval.InSeconds">
            <summary>
            Returns the interval with the current value as a number of seconds.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Interval.InMilliseconds">
            <summary>
            Returns the interval with the current value as a number of milliseconds.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Interval.IsNotZero">
            <summary>
            Is true for intervals created with a non-zero value
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Interval.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.Interval.IntervalUnit">
            <summary>
            IntervalUnit provides the semantics to the value stored in Interval class.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.Interval.IntervalUnit.Minute">
            <summary>
            Unit representing an Interval in minutes
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.Interval.IntervalUnit.Second">
            <summary>
            Unit representing an Interval in seconds
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.Interval.IntervalUnit.Millisecond">
            <summary>
            Unit representing an Interval in milliseconds
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.IResolveConstraint">
            <summary>
            The IResolveConstraint interface is implemented by all
            complete and resolvable constraints and expressions.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.IResolveConstraint.Resolve">
            <summary>
            Return the top-level constraint for this expression
            </summary>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.ItemsConstraintExpression">
            <summary>
            An extension of ResolvableConstraintExpression that adds a no-op Items property for readability.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ItemsConstraintExpression.#ctor">
            <summary>
            Create a new instance of ItemsConstraintExpression
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ItemsConstraintExpression.#ctor(NUnit.Framework.Constraints.ConstraintBuilder)">
            <summary>
            Create a new instance of ResolvableConstraintExpression,
            passing in a pre-populated ConstraintBuilder.
            </summary>
            <param name="builder"></param>
        </member>
        <member name="P:NUnit.Framework.Constraints.ItemsConstraintExpression.Items">
            <summary>
            No-op property for readability.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.LessThanConstraint">
            <summary>
            Tests whether a value is less than the value supplied to its constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.LessThanConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.LessThanConstraint"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.LessThanConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.LessThanConstraint.PerformComparison(NUnit.Framework.Constraints.ComparisonAdapter,System.Object,System.Object,NUnit.Framework.Constraints.Tolerance)">
            <summary>
            Perform the comparison
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.LessThanOrEqualConstraint">
            <summary>
            Tests whether a value is less than or equal to the value supplied to its constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.LessThanOrEqualConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.LessThanOrEqualConstraint"/> class.
            </summary>
            <param name="expected">The expected value.</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.LessThanOrEqualConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.LessThanOrEqualConstraint.PerformComparison(NUnit.Framework.Constraints.ComparisonAdapter,System.Object,System.Object,NUnit.Framework.Constraints.Tolerance)">
            <summary>
            Perform the comparison
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.MessageWriter">
            <summary>
            MessageWriter is the abstract base for classes that write
            constraint descriptions and messages in some form. The
            class has separate methods for writing various components
            of a message, allowing implementations to tailor the
            presentation as needed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.#ctor">
            <summary>
            Construct a MessageWriter given a culture
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.MessageWriter.MaxLineLength">
            <summary>
            Abstract method to get the max line length
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WriteMessageLine(System.String,System.Object[])">
            <summary>
            Method to write single line message with optional args, usually
            written to precede the general failure message.
            </summary>
            <param name="message">The message to be written</param>
            <param name="args">Any arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WriteMessageLine(System.Int32,System.String,System.Object[])">
            <summary>
            Method to write single line message with optional args, usually
            written to precede the general failure message, at a given 
            indentation level.
            </summary>
            <param name="level">The indentation level of the message</param>
            <param name="message">The message to be written</param>
            <param name="args">Any arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.DisplayDifferences(NUnit.Framework.Constraints.ConstraintResult)">
            <summary>
            Display Expected and Actual lines for a constraint. This
            is called by MessageWriter's default implementation of 
            WriteMessageTo and provides the generic two-line display. 
            </summary>
            <param name="result">The failing constraint result</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.DisplayDifferences(System.Object,System.Object)">
            <summary>
            Display Expected and Actual lines for given values. This
            method may be called by constraints that need more control over
            the display of actual and expected values than is provided
            by the default implementation.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value causing the failure</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.DisplayDifferences(System.Object,System.Object,NUnit.Framework.Constraints.Tolerance)">
            <summary>
            Display Expected and Actual lines for given values, including
            a tolerance value on the Expected line.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value causing the failure</param>
            <param name="tolerance">The tolerance within which the test was made</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.DisplayStringDifferences(System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Display the expected and actual string values on separate lines.
            If the mismatch parameter is >=0, an additional line is displayed
            line containing a caret that points to the mismatch point.
            </summary>
            <param name="expected">The expected string value</param>
            <param name="actual">The actual string value</param>
            <param name="mismatch">The point at which the strings don't match or -1</param>
            <param name="ignoreCase">If true, case is ignored in locating the point where the strings differ</param>
            <param name="clipping">If true, the strings should be clipped to fit the line</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WriteActualValue(System.Object)">
            <summary>
            Writes the text for an actual value.
            </summary>
            <param name="actual">The actual value.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WriteValue(System.Object)">
            <summary>
            Writes the text for a generalized value.
            </summary>
            <param name="val">The value.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MessageWriter.WriteCollectionElements(System.Collections.IEnumerable,System.Int64,System.Int32)">
            <summary>
            Writes the text for a collection value,
            starting at a particular point, to a max length
            </summary>
            <param name="collection">The collection containing elements to write.</param>
            <param name="start">The starting point of the elements to write</param>
            <param name="max">The maximum number of elements to write</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.ValueFormatter">
            <summary>
            Custom value formatter function
            </summary>
            <param name="val">The value</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.ValueFormatterFactory">
            <summary>
            Custom value formatter factory function
            </summary>
            <param name="next">The next formatter function</param>
            <returns>ValueFormatter</returns>
            <remarks>If the given formatter is unable to handle a certain format, it must call the next formatter in the chain</remarks>
        </member>
        <member name="T:NUnit.Framework.Constraints.MsgUtils">
            <summary>
            Static methods used in creating messages
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.MsgUtils.DefaultMaxItems">
            <summary>
            Default amount of items used by <see cref="M:NUnit.Framework.Constraints.MsgUtils.FormatCollection(System.Collections.IEnumerable,System.Int64,System.Int32)"/> method.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.MsgUtils.ELLIPSIS">
            <summary>
            Static string used when strings are clipped
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.MsgUtils.Fmt_Null">
            <summary>
            Formatting strings used for expected and actual values
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.MsgUtils.DefaultValueFormatter">
            <summary>
            Current head of chain of value formatters. Public for testing.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.AddFormatter(NUnit.Framework.Constraints.ValueFormatterFactory)">
            <summary>
            Add a formatter to the chain of responsibility.
            </summary>
            <param name="formatterFactory"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.FormatValue(System.Object)">
            <summary>
            Formats text to represent a generalized value.
            </summary>
            <param name="val">The value</param>
            <returns>The formatted text</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.FormatCollection(System.Collections.IEnumerable,System.Int64,System.Int32)">
            <summary>
            Formats text for a collection value,
            starting at a particular point, to a max length
            </summary>
            <param name="collection">The collection containing elements to write.</param>
            <param name="start">The starting point of the elements to write</param>
            <param name="max">The maximum number of elements to write</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.GetTypeRepresentation(System.Object)">
            <summary>
            Returns the representation of a type as used in NUnitLite.
            This is the same as Type.ToString() except for arrays,
            which are displayed with their declared sizes.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.EscapeControlChars(System.String)">
            <summary>
            Converts any control characters in a string
            to their escaped representation.
            </summary>
            <param name="s">The string to be converted</param>
            <returns>The converted string</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.EscapeNullCharacters(System.String)">
            <summary>
            Converts any null characters in a string
            to their escaped representation.
            </summary>
            <param name="s">The string to be converted</param>
            <returns>The converted string</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.GetArrayIndicesAsString(System.Int32[])">
            <summary>
            Return the a string representation for a set of indices into an array
            </summary>
            <param name="indices">Array of indices for which a string is needed</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.GetArrayIndicesFromCollectionIndex(System.Collections.IEnumerable,System.Int64)">
            <summary>
            Get an array of indices representing the point in a collection or
            array corresponding to a single int index into the collection.
            </summary>
            <param name="collection">The collection to which the indices apply</param>
            <param name="index">Index in the collection</param>
            <returns>Array of indices</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.ClipString(System.String,System.Int32,System.Int32)">
            <summary>
            Clip a string to a given length, starting at a particular offset, returning the clipped
            string with ellipses representing the removed parts
            </summary>
            <param name="s">The string to be clipped</param>
            <param name="maxStringLength">The maximum permitted length of the result string</param>
            <param name="clipStart">The point at which to start clipping</param>
            <returns>The clipped string</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.ClipExpectedAndActual(System.String@,System.String@,System.Int32,System.Int32)">
            <summary>
            Clip the expected and actual strings in a coordinated fashion,
            so that they may be displayed together.
            </summary>
            <param name="expected"></param>
            <param name="actual"></param>
            <param name="maxDisplayLength"></param>
            <param name="mismatch"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.MsgUtils.FindMismatchPosition(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Shows the position two strings start to differ.  Comparison
            starts at the start index.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The actual string</param>
            <param name="istart">The index in the strings at which comparison should start</param>
            <param name="ignoreCase">Boolean indicating whether case should be ignored</param>
            <returns>-1 if no mismatch found, or the index where mismatch found</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.NaNConstraint">
            <summary>
            NaNConstraint tests that the actual value is a double or float NaN
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.NaNConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NaNConstraint.ApplyTo``1(``0)">
            <summary>
            Test that the actual value is an NaN
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.NoItemConstraint">
            <summary>
            NoItemConstraint applies another constraint to each
            item in a collection, failing if any of them succeeds.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NoItemConstraint.#ctor(NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Construct a SomeItemsConstraint on top of an existing constraint
            </summary>
            <param name="itemConstraint"></param>
        </member>
        <member name="P:NUnit.Framework.Constraints.NoItemConstraint.DisplayName">
            <summary> 
            The display name of this Constraint for use by ToString().
            The default value is the name of the constraint with
            trailing "Constraint" removed. Derived classes may set
            this to another name in their constructors.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NoItemConstraint.ApplyTo``1(``0)">
            <summary>
            Apply the item constraint to each item in the collection,
            failing if any item fails.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.NotConstraint">
            <summary>
            NotConstraint negates the effect of some other constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NotConstraint.#ctor(NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.NotConstraint"/> class.
            </summary>
            <param name="baseConstraint">The base constraint to be negated.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.NotConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for if the base constraint fails, false if it succeeds</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.NullConstraint">
            <summary>
            NullConstraint tests that the actual value is null
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NullConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.NullConstraint"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NullConstraint.ApplyTo``1(``0)">
            <summary>
            Applies the constraint to an actual value, returning a ConstraintResult.
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>A ConstraintResult</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.Numerics">
            <summary>
            The Numerics class contains common operations on numeric values.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Numerics.IsNumericType(System.Object)">
            <summary>
            Checks the type of the object, returning true if
            the object is a numeric type.
            </summary>
            <param name="obj">The object to check</param>
            <returns>true if the object is a numeric type</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Numerics.IsFloatingPointNumeric(System.Object)">
            <summary>
            Checks the type of the object, returning true if
            the object is a floating point numeric type.
            </summary>
            <param name="obj">The object to check</param>
            <returns>true if the object is a floating point numeric type</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Numerics.IsFixedPointNumeric(System.Object)">
            <summary>
            Checks the type of the object, returning true if
            the object is a fixed point numeric type.
            </summary>
            <param name="obj">The object to check</param>
            <returns>true if the object is a fixed point numeric type</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Numerics.AreEqual(System.Object,System.Object,NUnit.Framework.Constraints.Tolerance@)">
            <summary>
            Test two numeric values for equality, performing the usual numeric 
            conversions and using a provided or default tolerance. If the tolerance 
            provided is Empty, this method may set it to a default tolerance.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="tolerance">A reference to the tolerance in effect</param>
            <returns>True if the values are equal</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Numerics.Compare(System.Object,System.Object)">
            <summary>
            Compare two numeric values, performing the usual numeric conversions.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <returns>The relationship of the values to each other</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.Numerics.Difference(System.Object,System.Object,NUnit.Framework.Constraints.ToleranceMode)">
            <summary>
            Calculates the difference between 2 values in absolute/percent mode.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="toleranceMode">Tolerance mode to specify difference representation</param>
            <returns>The difference between the values</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.NUnitComparer">
            <summary>
            NUnitComparer encapsulates NUnit's default behavior
            in comparing two objects.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.NUnitComparer.Default">
            <summary>
            Returns the default NUnitComparer.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NUnitComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.NUnitEqualityComparer">
            <summary>
            NUnitEqualityComparer encapsulates NUnit's handling of
            equality tests between objects.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.caseInsensitive">
            <summary>
            If true, all string comparisons will ignore case
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.compareAsCollection">
            <summary>
            If true, arrays will be treated as collections, allowing
            those of different dimensions to be compared
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.externalComparers">
            <summary>
            Comparison objects used in comparisons for some constraints.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.failurePoints">
            <summary>
            List of points at which a failure occurred.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer._comparers">
            <summary>
            List of comparers used to compare pairs of objects.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NUnitEqualityComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.NUnitEqualityComparer"/> class.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.NUnitEqualityComparer.Default">
            <summary>
            Returns the default NUnitEqualityComparer
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.NUnitEqualityComparer.IgnoreCase">
            <summary>
            Gets and sets a flag indicating whether case should
            be ignored in determining equality.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.NUnitEqualityComparer.CompareAsCollection">
            <summary>
            Gets and sets a flag indicating that arrays should be
            compared as collections, without regard to their shape.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.NUnitEqualityComparer.ExternalComparers">
            <summary>
            Gets the list of external comparers to be used to
            test for equality. They are applied to members of
            collections, in place of NUnit's own logic.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoints">
            <summary>
            Gets the list of failure points for the last Match performed.
            The list consists of objects to be interpreted by the caller.
            This generally means that the caller may only make use of
            objects it has placed on the list at a particular depth.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.NUnitEqualityComparer.WithSameOffset">
            <summary>
            Flags the comparer to include <see cref="P:System.DateTimeOffset.Offset"/>
            property in comparison of two <see cref="T:System.DateTimeOffset"/> values.
            </summary>
            <remarks>
            Using this modifier does not allow to use the <see cref="T:NUnit.Framework.Constraints.Tolerance"/>
            modifier.
            </remarks>
        </member>
        <member name="M:NUnit.Framework.Constraints.NUnitEqualityComparer.AreEqual(System.Object,System.Object,NUnit.Framework.Constraints.Tolerance@)">
            <summary>
            Compares two objects for equality within a tolerance.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NUnitEqualityComparer.AreEqual(System.Object,System.Object,NUnit.Framework.Constraints.Tolerance@,System.Boolean)">
            <summary>
            Compares two objects for equality within a tolerance.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint">
            <summary>
            FailurePoint class represents one point of failure
            in an equality test.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint.Position">
            <summary>
            The location of the failure
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint.ExpectedValue">
            <summary>
            The expected value
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint.ActualValue">
            <summary>
            The actual value
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint.ExpectedHasData">
            <summary>
            Indicates whether the expected value is valid
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint.ActualHasData">
            <summary>
            Indicates whether the actual value is valid
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.AllOperator">
            <summary>
            Represents a constraint that succeeds if all the 
            members of a collection match a base constraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AllOperator.ApplyPrefix(NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Returns a constraint that will apply the argument
            to the members of a collection, succeeding if
            they all succeed.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.AndOperator">
            <summary>
            Operator that requires both its arguments to succeed
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndOperator.#ctor">
            <summary>
            Construct an AndOperator
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AndOperator.ApplyOperator(NUnit.Framework.Constraints.IConstraint,NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Apply the operator to produce an AndConstraint
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.AttributeOperator">
            <summary>
            Operator that tests for the presence of a particular attribute
            on a type and optionally applies further tests to the attribute.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeOperator.#ctor(System.Type)">
            <summary>
            Construct an AttributeOperator for a particular Type
            </summary>
            <param name="type">The Type of attribute tested</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.AttributeOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack)">
            <summary>
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.BinaryOperator">
            <summary>
            Abstract base class for all binary operators
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.BinaryOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack)">
            <summary>
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            </summary>
            <param name="stack"></param>
        </member>
        <member name="P:NUnit.Framework.Constraints.BinaryOperator.LeftPrecedence">
            <summary>
            Gets the left precedence of the operator
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.BinaryOperator.RightPrecedence">
            <summary>
            Gets the right precedence of the operator
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.BinaryOperator.ApplyOperator(NUnit.Framework.Constraints.IConstraint,NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Abstract method that produces a constraint by applying
            the operator to its left and right constraint arguments.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.CollectionOperator">
            <summary>
            Abstract base for operators that indicate how to
            apply a constraint to items in a collection.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.CollectionOperator.#ctor">
            <summary>
            Constructs a CollectionOperator
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ConstraintOperator">
            <summary>
            The ConstraintOperator class is used internally by a
            ConstraintBuilder to represent an operator that 
            modifies or combines constraints. 
            
            Constraint operators use left and right precedence
            values to determine whether the top operator on the
            stack should be reduced before pushing a new operator.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ConstraintOperator.left_precedence">
            <summary>
            The precedence value used when the operator
            is about to be pushed to the stack.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ConstraintOperator.right_precedence">
            <summary>
            The precedence value used when the operator
            is on the top of the stack.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintOperator.LeftContext">
            <summary>
            The syntax element preceding this operator
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintOperator.RightContext">
            <summary>
            The syntax element following this operator
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintOperator.LeftPrecedence">
            <summary>
            The precedence value used when the operator
            is about to be pushed to the stack.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ConstraintOperator.RightPrecedence">
            <summary>
            The precedence value used when the operator
            is on the top of the stack.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ConstraintOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack)">
            <summary>
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            </summary>
            <param name="stack"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.ExactCountOperator">
            <summary>
            Represents a constraint that succeeds if the specified 
            count of members of a collection match a base constraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactCountOperator.#ctor(System.Int32)">
            <summary>
            Construct an ExactCountOperator for a specified count
            </summary>
            <param name="expectedCount">The expected count</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ExactCountOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack)">
            <summary>
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            </summary>
            <param name="stack"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.IndexerOperator">
            <summary>
            Operator used to test for the presence of a Indexer
            on an object and optionally apply further tests to the
            value of that indexer.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.IndexerOperator.#ctor(System.Object[])">
            <summary>
            Constructs a IndexerOperator for a particular set of indexer
            parameters
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.IndexerOperator.ApplyPrefix(NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Returns a IndexerConstraint applied to its argument.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.NoneOperator">
            <summary>
            Represents a constraint that succeeds if none of the 
            members of a collection match a base constraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NoneOperator.ApplyPrefix(NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Returns a constraint that will apply the argument
            to the members of a collection, succeeding if
            none of them succeed.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.NotOperator">
            <summary>
            Negates the test of the constraint it wraps.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NotOperator.#ctor">
            <summary>
            Constructs a new NotOperator
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.NotOperator.ApplyPrefix(NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Returns a NotConstraint applied to its argument.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.OrOperator">
            <summary>
            Operator that requires at least one of its arguments to succeed
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.OrOperator.#ctor">
            <summary>
            Construct an OrOperator
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.OrOperator.ApplyOperator(NUnit.Framework.Constraints.IConstraint,NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Apply the operator to produce an OrConstraint
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.PrefixOperator">
            <summary>
            PrefixOperator takes a single constraint and modifies
            its action in some way.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PrefixOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack)">
            <summary>
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            </summary>
            <param name="stack"></param>
        </member>
        <member name="M:NUnit.Framework.Constraints.PrefixOperator.ApplyPrefix(NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Returns the constraint created by applying this
            prefix to another constraint.
            </summary>
            <param name="constraint"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.PropOperator">
            <summary>
            Operator used to test for the presence of a named Property
            on an object and optionally apply further tests to the
            value of that property.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.PropOperator.Name">
            <summary>
            Gets the name of the property to which the operator applies
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropOperator.#ctor(System.String)">
            <summary>
            Constructs a PropOperator for a particular named property
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack)">
            <summary>
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            </summary>
            <param name="stack"></param>
        </member>
        <member name="T:NUnit.Framework.Constraints.SelfResolvingOperator">
            <summary>
            Abstract base class for operators that are able to reduce to a 
            constraint whether or not another syntactic element follows.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.SomeOperator">
            <summary>
            Represents a constraint that succeeds if any of the 
            members of a collection match a base constraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SomeOperator.ApplyPrefix(NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Returns a constraint that will apply the argument
            to the members of a collection, succeeding if
            any of them succeed.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ThrowsOperator">
            <summary>
            Operator that tests that an exception is thrown and
            optionally applies further tests to the exception.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsOperator.#ctor">
            <summary>
            Construct a ThrowsOperator
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack)">
            <summary>
            Reduce produces a constraint from the operator and 
            any arguments. It takes the arguments from the constraint 
            stack and pushes the resulting constraint on it.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.WithOperator">
            <summary>
            Represents a constraint that simply wraps the
            constraint provided as an argument, without any
            further functionality, but which modifies the
            order of evaluation because of its precedence.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.WithOperator.#ctor">
            <summary>
            Constructor for the WithOperator
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.WithOperator.ApplyPrefix(NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Returns a constraint that wraps its argument
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.OrConstraint">
            <summary>
            OrConstraint succeeds if either member succeeds
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.OrConstraint.#ctor(NUnit.Framework.Constraints.IConstraint,NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Create an OrConstraint from two other constraints
            </summary>
            <param name="left">The first constraint</param>
            <param name="right">The second constraint</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.OrConstraint.Description">
            <summary>
            Gets text describing a constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.OrConstraint.ApplyTo``1(``0)">
            <summary>
            Apply the member constraints to an actual value, succeeding 
            succeeding as soon as one of them succeeds.
            </summary>
            <param name="actual">The actual value</param>
            <returns>True if either constraint succeeded</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.PathConstraint">
            <summary>
            PathConstraint serves as the abstract base of constraints
            that operate on paths and provides several helper methods.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PathConstraint.#ctor(System.String)">
            <summary>
            Construct a PathConstraint for a give expected path
            </summary>
            <param name="expected">The expected path</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.PathConstraint.RespectCase">
            <summary>
            Modifies the current instance to be case-sensitive
            and returns it.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PathConstraint.GetStringRepresentation">
            <summary>
            Returns the string representation of this constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PathConstraint.Canonicalize(System.String)">
            <summary>
            Canonicalize the provided path
            </summary>
            <param name="path"></param>
            <returns>The path in standardized form</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.PathConstraint.IsSubPath(System.String,System.String)">
            <summary>
            Test whether one path in canonical form is a subpath of another path
            </summary>
            <param name="path1">The first path - supposed to be the parent path</param>
            <param name="path2">The second path - supposed to be the child path</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.PredicateConstraint`1">
            <summary>
            Predicate constraint wraps a Predicate in a constraint,
            returning success if the predicate is true.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PredicateConstraint`1.#ctor(System.Predicate{`0})">
            <summary>
            Construct a PredicateConstraint from a predicate
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.PredicateConstraint`1.Description">
            <summary>
            Gets text describing a constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PredicateConstraint`1.ApplyTo``1(``0)">
            <summary>
            Determines whether the predicate succeeds when applied
            to the actual value.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.PrefixConstraint">
            <summary>
            Abstract base class used for prefixes
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.PrefixConstraint.BaseConstraint">
            <summary>
            The base constraint
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.PrefixConstraint.DescriptionPrefix">
            <summary>
            Prefix used in forming the constraint description
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PrefixConstraint.#ctor(NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Construct given a base constraint
            </summary>
            <param name="baseConstraint"></param>
        </member>
        <member name="P:NUnit.Framework.Constraints.PrefixConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PrefixConstraint.FormatDescription(System.String,NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Formats a prefix constraint's description.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.PropertyConstraint">
            <summary>
            PropertyConstraint extracts a named property and uses
            its value as the actual value for a chained constraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyConstraint.#ctor(System.String,NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.PropertyConstraint"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="baseConstraint">The constraint to apply to the property.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyConstraint.GetStringRepresentation">
            <summary>
            Returns the string representation of the constraint.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.PropertyConstraintResult">
            <summary>
            Contains the result of matching a <see cref="T:NUnit.Framework.Constraints.PropertyConstraint"/> against an actual value.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyConstraintResult.#ctor(NUnit.Framework.Constraints.IConstraint,NUnit.Framework.Constraints.ConstraintResult)">
            <summary>
            Constructs a <see cref="T:NUnit.Framework.Constraints.PropertyConstraintResult"/> for a particular <see cref="T:NUnit.Framework.Constraints.PropertyConstraint"/>.
            </summary>
            <param name="constraint">The Constraint to which this result applies.</param>
            <param name="baseResult">The base result with actual value to which the Constraint was applied.</param>       
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyConstraintResult.WriteAdditionalLinesTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the additional failure message for a failing constraint to a
            MessageWriter.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.PropertyExistsConstraint">
            <summary>
            PropertyExistsConstraint tests that a named property
            exists on the object provided through Match.
            
            Originally, PropertyConstraint provided this feature
            in addition to making optional tests on the value
            of the property. The two constraints are now separate.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyExistsConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.PropertyExistsConstraint"/> class.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.PropertyExistsConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyExistsConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the property exists for a given object
            </summary>
            <param name="actual">The object to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.PropertyExistsConstraint.GetStringRepresentation">
            <summary>
            Returns the string representation of the constraint.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.RangeConstraint">
            <summary>
            RangeConstraint tests whether two values are within a 
            specified range.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.RangeConstraint.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.RangeConstraint"/> class.
            </summary>
            <param name="from">Inclusive beginning of the range.</param>
            <param name="to">Inclusive end of the range.</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.RangeConstraint.Description">
            <summary>
            Gets text describing a constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.RangeConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.RangeConstraint.Using(System.Collections.IComparer)">
            <summary>
            Modifies the constraint to use an <see cref="T:System.Collections.IComparer"/> and returns self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.RangeConstraint.Using``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Modifies the constraint to use an <see cref="T:System.Collections.Generic.IComparer`1"/> and returns self.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.RangeConstraint.Using``1(System.Comparison{``0})">
            <summary>
            Modifies the constraint to use a <see cref="T:System.Comparison`1"/> and returns self.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.RegexConstraint">
            <summary>
            RegexConstraint can test whether a string matches
            the pattern provided.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.RegexConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.RegexConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.RegexConstraint"/> class.
            </summary>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.RegexConstraint.#ctor(System.Text.RegularExpressions.Regex)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.RegexConstraint"/> class.
            </summary>
            <param name="regex">The Regex pattern object.</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.RegexConstraint.IgnoreCase">
            <summary>
            Modify the constraint to ignore case in matching.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.RegexConstraint.ApplyTo``1(``0)">
            <summary>
            Applies the regex constraint to an actual value, returning a ConstraintResult.
            </summary>
            <param name="actual">The string to be tested.</param>
            <returns>True for success, false for failure.</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.ResolvableConstraintExpression">
            <summary>
            ResolvableConstraintExpression is used to represent a compound
            constraint being constructed at a point where the last operator
            may either terminate the expression or may have additional 
            qualifying constraints added to it. 
            
            It is used, for example, for a Property element or for
            an Exception element, either of which may be optionally
            followed by constraints that apply to the property or 
            exception.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ResolvableConstraintExpression.#ctor">
            <summary>
            Create a new instance of ResolvableConstraintExpression
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ResolvableConstraintExpression.#ctor(NUnit.Framework.Constraints.ConstraintBuilder)">
            <summary>
            Create a new instance of ResolvableConstraintExpression,
            passing in a pre-populated ConstraintBuilder.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ResolvableConstraintExpression.And">
            <summary>
            Appends an And Operator to the expression
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ResolvableConstraintExpression.Or">
            <summary>
            Appends an Or operator to the expression.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ResolvableConstraintExpression.NUnit#Framework#Constraints#IResolveConstraint#Resolve">
            <summary>
            Resolve the current expression to a Constraint
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ReusableConstraint">
            <summary>
            ReusableConstraint wraps a constraint expression after
            resolving it so that it can be reused consistently.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ReusableConstraint.#ctor(NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Construct a ReusableConstraint from a constraint expression
            </summary>
            <param name="c">The expression to be resolved and reused</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.ReusableConstraint.op_Implicit(NUnit.Framework.Constraints.Constraint)~NUnit.Framework.Constraints.ReusableConstraint">
            <summary>
            Converts a constraint to a ReusableConstraint
            </summary>
            <param name="c">The constraint to be converted</param>
            <returns>A ReusableConstraint</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ReusableConstraint.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ReusableConstraint.Resolve">
            <summary>
            Return the top-level constraint for this expression
            </summary>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.SameAsConstraint">
            <summary>
            SameAsConstraint tests whether an object is identical to
            the object passed to its constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SameAsConstraint.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.SameAsConstraint"/> class.
            </summary>
            <param name="expected">The expected object.</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.SameAsConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SameAsConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.SamePathConstraint">
            <summary>
            Summary description for SamePathConstraint.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SamePathConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.SamePathConstraint"/> class.
            </summary>
            <param name="expected">The expected path</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.SamePathConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SamePathConstraint.Matches(System.String)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.SamePathOrUnderConstraint">
            <summary>
            SamePathOrUnderConstraint tests that one path is under another
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SamePathOrUnderConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.SamePathOrUnderConstraint"/> class.
            </summary>
            <param name="expected">The expected path</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.SamePathOrUnderConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SamePathOrUnderConstraint.Matches(System.String)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.SomeItemsConstraint">
            <summary>
            SomeItemsConstraint applies another constraint to each
            item in a collection, succeeding if any of them succeeds.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SomeItemsConstraint.#ctor(NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Construct a SomeItemsConstraint on top of an existing constraint
            </summary>
            <param name="itemConstraint"></param>
        </member>
        <member name="P:NUnit.Framework.Constraints.SomeItemsConstraint.DisplayName">
            <summary>
            The display name of this Constraint for use by ToString().
            The default value is the name of the constraint with
            trailing "Constraint" removed. Derived classes may set
            this to another name in their constructors.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SomeItemsConstraint.ApplyTo``1(``0)">
            <summary>
            Apply the item constraint to each item in the collection,
            succeeding if any item succeeds.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.SomeItemsConstraint.Using``2(System.Func{``0,``1,System.Boolean})">
            <summary>
            Flag the constraint to use the supplied <see cref="T:System.Func`3"/> object.
            </summary>
            <typeparam name="TCollectionType">The type of the elements in the collection.</typeparam>
            <typeparam name="TMemberType">The type of the member.</typeparam>
            <param name="comparison">The comparison function to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.SomeItemsConstraint.Using(System.Collections.IComparer)">
            <summary>
            Flag the constraint to use the supplied <see cref="T:System.Collections.IComparer"/> object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.SomeItemsConstraint.Using``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Flag the constraint to use the supplied <see cref="T:System.Collections.Generic.IComparer`1"/> object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.SomeItemsConstraint.Using``1(System.Comparison{``0})">
            <summary>
            Flag the constraint to use the supplied <see cref="T:System.Comparison`1"/> object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.SomeItemsConstraint.Using(System.Collections.IEqualityComparer)">
            <summary>
            Flag the constraint to use the supplied <see cref="T:System.Collections.IEqualityComparer"/> object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.SomeItemsConstraint.Using``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Flag the constraint to use the supplied <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> object.
            </summary>
            <param name="comparer">The IComparer object to use.</param>
            <returns>Self.</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.StartsWithConstraint">
            <summary>
            StartsWithConstraint can test whether a string starts
            with an expected substring.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.StartsWithConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.StartsWithConstraint"/> class.
            </summary>
            <param name="expected">The expected string</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.StartsWithConstraint.Matches(System.String)">
            <summary>
            Test whether the constraint is matched by the actual value.
            This is a template method, which calls the IsMatch method
            of the derived class.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.StringConstraint">
            <summary>
            StringConstraint is the abstract base for constraints
            that operate on strings. It supports the IgnoreCase
            modifier for string operations.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.StringConstraint.expected">
            <summary>
            The expected value
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.StringConstraint.caseInsensitive">
            <summary>
            Indicates whether tests should be case-insensitive
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.StringConstraint.descriptionText">
            <summary>
            Description of this constraint
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.StringConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.StringConstraint.#ctor">
            <summary>
            Constructs a StringConstraint without an expected value
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.StringConstraint.#ctor(System.String)">
            <summary>
            Constructs a StringConstraint given an expected value
            </summary>
            <param name="expected">The expected value</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.StringConstraint.IgnoreCase">
            <summary>
            Modify the constraint to ignore case in matching.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.StringConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.StringConstraint.Matches(System.String)">
            <summary>
            Test whether the constraint is satisfied by a given string
            </summary>
            <param name="actual">The string to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.SubPathConstraint">
            <summary>
            SubPathConstraint tests that the actual path is under the expected path
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SubPathConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.SubPathConstraint"/> class.
            </summary>
            <param name="expected">The expected path</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.SubPathConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SubPathConstraint.Matches(System.String)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.SubstringConstraint">
            <summary>
            SubstringConstraint can test whether a string contains
            the expected substring.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.SubstringConstraint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.SubstringConstraint"/> class.
            </summary>
            <param name="expected">The expected.</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.SubstringConstraint.IgnoreCase">
            <summary>
            Modify the constraint to ignore case in matching.
            This will call Using(StringComparison.CurrentCultureIgnoreCase).
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when a comparison type different
            than <see cref="F:System.StringComparison.CurrentCultureIgnoreCase"/> was already set.</exception>
        </member>
        <member name="M:NUnit.Framework.Constraints.SubstringConstraint.Matches(System.String)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.SubstringConstraint.Using(System.StringComparison)">
            <summary>
            Modify the constraint to the specified comparison.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when a comparison type different
            than <paramref name="comparisonType"/> was already set.</exception>
        </member>
        <member name="T:NUnit.Framework.Constraints.ThrowsConstraint">
            <summary>
            ThrowsConstraint is used to test the exception thrown by 
            a delegate by applying a constraint to it.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsConstraint.#ctor(NUnit.Framework.Constraints.IConstraint)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.ThrowsConstraint"/> class,
            using a constraint to be applied to the exception.
            </summary>
            <param name="baseConstraint">A constraint to apply to the caught exception.</param>
        </member>
        <member name="P:NUnit.Framework.Constraints.ThrowsConstraint.ActualException">
            <summary>
            Get the actual exception thrown - used by Assert.Throws.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ThrowsConstraint.Description">
            <summary>
            Gets text describing a constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsConstraint.ApplyTo``1(``0)">
            <summary>
            Executes the code of the delegate and captures any exception.
            If a non-null base constraint was provided, it applies that
            constraint to the exception.
            </summary>
            <param name="actual">A delegate representing the code to be tested</param>
            <returns>True if an exception is thrown and the constraint succeeds, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsConstraint.ApplyTo``1(NUnit.Framework.Constraints.ActualValueDelegate{``0})">
            <summary>
            Converts an ActualValueDelegate to a TestDelegate
            before calling the primary overload.
            </summary>
            <param name="del"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsConstraint.ThrowsConstraintResult.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter)">
            <summary>
            Write the actual value for a failing constraint test to a
            MessageWriter. This override only handles the special message
            used when an exception is expected but none is thrown.
            </summary>
            <param name="writer">The writer on which the actual value is displayed</param>
        </member>
        <member name="T:NUnit.Framework.Constraints.ThrowsExceptionConstraint">
            <summary>
            ThrowsExceptionConstraint tests that an exception has
            been thrown, without any further tests.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ThrowsExceptionConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsExceptionConstraint.ApplyTo``1(``0)">
            <summary>
            Executes the code and returns success if an exception is thrown.
            </summary>
            <param name="actual">A delegate representing the code to be tested</param>
            <returns>True if an exception is thrown, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsExceptionConstraint.ApplyTo``1(NUnit.Framework.Constraints.ActualValueDelegate{``0})">
            <summary>
            Applies the constraint to an ActualValueDelegate that returns
            the value to be tested. The default implementation simply evaluates
            the delegate but derived classes may override it to provide for
            delayed processing.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ThrowsNothingConstraint">
            <summary>
            ThrowsNothingConstraint tests that a delegate does not
            throw an exception.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.ThrowsNothingConstraint.Description">
            <summary>
            Gets text describing a constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsNothingConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True if no exception is thrown, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.ThrowsNothingConstraint.ApplyTo``1(NUnit.Framework.Constraints.ActualValueDelegate{``0})">
            <summary>
            Applies the constraint to an ActualValueDelegate that returns 
            the value to be tested. The default implementation simply evaluates 
            the delegate but derived classes may override it to provide for 
            delayed processing.
            </summary>
            <param name="del">An ActualValueDelegate</param>
            <returns>A ConstraintResult</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.Tolerance">
            <summary>
            The Tolerance class generalizes the notion of a tolerance
            within which an equality test succeeds. Normally, it is
            used with numeric types, but it can be used with any
            type that supports taking a difference between two 
            objects and comparing that difference to a value.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Default">
            <summary>
            Returns a default Tolerance object, equivalent to an exact match.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Exact">
            <summary>
            Returns an empty Tolerance object, equivalent to an exact match.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Tolerance.#ctor(System.Object)">
            <summary>
            Constructs a linear tolerance of a specified amount
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Tolerance.#ctor(System.Object,NUnit.Framework.Constraints.ToleranceMode)">
            <summary>
            Constructs a tolerance given an amount and <see cref="T:NUnit.Framework.Constraints.ToleranceMode"/>
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Percent">
            <summary>
            Returns a new tolerance, using the current amount as a percentage.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Ulps">
            <summary>
            Returns a new tolerance, using the current amount in Ulps
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Days">
            <summary>
            Returns a new tolerance with a <see cref="T:System.TimeSpan"/> as the amount, using 
            the current amount as a number of days.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Hours">
            <summary>
            Returns a new tolerance with a <see cref="T:System.TimeSpan"/> as the amount, using 
            the current amount as a number of hours.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Minutes">
            <summary>
            Returns a new tolerance with a <see cref="T:System.TimeSpan"/> as the amount, using 
            the current amount as a number of minutes.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Seconds">
            <summary>
            Returns a new tolerance with a <see cref="T:System.TimeSpan"/> as the amount, using 
            the current amount as a number of seconds.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Milliseconds">
            <summary>
            Returns a new tolerance with a <see cref="T:System.TimeSpan"/> as the amount, using 
            the current amount as a number of milliseconds.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Ticks">
            <summary>
            Returns a new tolerance with a <see cref="T:System.TimeSpan"/> as the amount, using 
            the current amount as a number of clock ticks.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Mode">
            <summary>
            Gets the <see cref="T:NUnit.Framework.Constraints.ToleranceMode"/> for the current Tolerance
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.Amount">
            <summary>
            Gets the magnitude of the current Tolerance instance.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.Tolerance.IsUnsetOrDefault">
            <summary>
            Returns true if the current tolerance has not been set or is using the .
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Tolerance.ApplyToValue(System.Object)">
            <summary>
            Apply the tolerance to an expected value and return
            a Tolerance.Range that represents the acceptable values.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Tolerance.CheckLinearAndNumeric">
            <summary>
            Tests that the current Tolerance is linear with a 
            numeric value, throwing an exception if it is not.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.Tolerance.Range">
            <summary>
            Tolerance.Range represents the range of values that match
            a specific tolerance, when applied to a specific value.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.Tolerance.Range.LowerBound">
            <summary>
            The lower bound of the range
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.Tolerance.Range.UpperBound">
            <summary>
            The upper bound of the range
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.Tolerance.Range.#ctor(System.Object,System.Object)">
            <summary>
            Constructs a range
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.ToleranceMode">
            <summary>
            Modes in which the tolerance value for a comparison can be interpreted.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ToleranceMode.Unset">
            <summary>
            The tolerance was created with a value, without specifying 
            how the value would be used. This is used to prevent setting
            the mode more than once and is generally changed to Linear
            upon execution of the test.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ToleranceMode.Linear">
            <summary>
            The tolerance is used as a numeric range within which
            two compared values are considered to be equal.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ToleranceMode.Percent">
            <summary>
            Interprets the tolerance as the percentage by which
            the two compared values my deviate from each other.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.ToleranceMode.Ulps">
            <summary>
            Compares two values based in their distance in
            representable numbers.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Constraints.TrueConstraint">
            <summary>
            TrueConstraint tests that the actual value is true
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.TrueConstraint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Constraints.TrueConstraint"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.TrueConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.TypeConstraint">
            <summary>
            TypeConstraint is the abstract base for constraints
            that take a Type as their expected value.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.TypeConstraint.expectedType">
            <summary>
            The expected Type used by the constraint
            </summary>
        </member>
        <member name="F:NUnit.Framework.Constraints.TypeConstraint.actualType">
            <summary>
            The type of the actual argument to which the constraint was applied
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.TypeConstraint.#ctor(System.Type,System.String)">
            <summary>
            Construct a TypeConstraint for a given Type
            </summary>
            <param name="type">The expected type for the constraint</param>
            <param name="descriptionPrefix">Prefix used in forming the constraint description</param>
        </member>
        <member name="M:NUnit.Framework.Constraints.TypeConstraint.ApplyTo``1(``0)">
            <summary>
            Applies the constraint to an actual value, returning a ConstraintResult.
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>A ConstraintResult</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.TypeConstraint.Matches(System.Object)">
            <summary>
            Apply the constraint to an actual value, returning true if it succeeds
            </summary>
            <param name="actual">The actual argument</param>
            <returns>True if the constraint succeeds, otherwise false.</returns>
        </member>
        <member name="T:NUnit.Framework.Constraints.UniqueItemsConstraint">
            <summary>
            UniqueItemsConstraint tests whether all the items in a
            collection are unique.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.UniqueItemsConstraint.Description">
            <summary>
            The Description of what this constraint tests, for
            use in messages and in the ConstraintResult.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.UniqueItemsConstraint.Matches(System.Collections.IEnumerable)">
            <summary>
            Check that all items are unique.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.UniqueItemsConstraint.ApplyTo``1(``0)">
            <inheritdoc />
        </member>
        <member name="T:NUnit.Framework.Constraints.XmlSerializableConstraint">
            <summary>
            XmlSerializableConstraint tests whether
            an object is serializable in XML format.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Constraints.XmlSerializableConstraint.Description">
            <summary>
            Gets text describing a constraint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Constraints.XmlSerializableConstraint.ApplyTo``1(``0)">
            <summary>
            Test whether the constraint is satisfied by a given value
            </summary>
            <param name="actual">The value to be tested</param>
            <returns>True for success, false for failure</returns>
        </member>
        <member name="M:NUnit.Framework.Constraints.XmlSerializableConstraint.GetStringRepresentation">
            <summary>
            Returns the string representation of this constraint
            </summary>
        </member>
        <member name="T:NUnit.Framework.Contains">
            <summary>
            Helper class with properties and methods that supply
            a number of constraints used in Asserts.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Contains.Item(System.Object)">
            <summary>
            Returns a new <see cref="T:NUnit.Framework.Constraints.SomeItemsConstraint"/> checking for the
            presence of a particular object in the collection.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Contains.Key(System.Object)">
            <summary>
            Returns a new DictionaryContainsKeyConstraint checking for the
            presence of a particular key in the dictionary.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Contains.Value(System.Object)">
            <summary>
            Returns a new DictionaryContainsValueConstraint checking for the
            presence of a particular value in the dictionary.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Contains.Substring(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value contains the substring supplied as an argument.
            </summary>
        </member>
        <member name="T:NUnit.Framework.DirectoryAssert">
            <summary>
            Asserts on Directories
            </summary>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.Equals(System.Object,System.Object)">
            <summary>
            DO NOT USE! Use DirectoryAssert.AreEqual(...) instead.
            The Equals method throws an InvalidOperationException. This is done
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.ReferenceEquals(System.Object,System.Object)">
            <summary>
            DO NOT USE!
            The ReferenceEquals method throws an InvalidOperationException. This is done
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.AreEqual(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.String,System.Object[])">
            <summary>
            Verifies that two directories are equal.  Two directories are considered
            equal if both are null, or if both point to the same directory.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A directory containing the value that is expected</param>
            <param name="actual">A directory containing the actual value</param>
            <param name="message">The message to display if the directories are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.AreEqual(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            Verifies that two directories are equal.  Two directories are considered
            equal if both are null, or if both point to the same directory.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A directory containing the value that is expected</param>
            <param name="actual">A directory containing the actual value</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.AreNotEqual(System.IO.DirectoryInfo,System.IO.DirectoryInfo,System.String,System.Object[])">
            <summary>
            Asserts that two directories are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A directory containing the value that is expected</param>
            <param name="actual">A directory containing the actual value</param>
            <param name="message">The message to display if directories are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.AreNotEqual(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            Asserts that two directories are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A directory containing the value that is expected</param>
            <param name="actual">A directory containing the actual value</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.Exists(System.IO.DirectoryInfo,System.String,System.Object[])">
            <summary>
            Asserts that the directory exists. If it does not exist
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="actual">A directory containing the actual value</param>
            <param name="message">The message to display if directories are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.Exists(System.IO.DirectoryInfo)">
            <summary>
            Asserts that the directory exists. If it does not exist
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="actual">A directory containing the actual value</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.Exists(System.String,System.String,System.Object[])">
            <summary>
            Asserts that the directory exists. If it does not exist
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="actual">The path to a directory containing the actual value</param>
            <param name="message">The message to display if directories are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.Exists(System.String)">
            <summary>
            Asserts that the directory exists. If it does not exist
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="actual">The path to a directory containing the actual value</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.DoesNotExist(System.IO.DirectoryInfo,System.String,System.Object[])">
            <summary>
            Asserts that the directory does not exist. If it does exist
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="actual">A directory containing the actual value</param>
            <param name="message">The message to display if directories are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.DoesNotExist(System.IO.DirectoryInfo)">
            <summary>
            Asserts that the directory does not exist. If it does exist
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="actual">A directory containing the actual value</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.DoesNotExist(System.String,System.String,System.Object[])">
            <summary>
            Asserts that the directory does not exist. If it does exist
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="actual">The path to a directory containing the actual value</param>
            <param name="message">The message to display if directories are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.DirectoryAssert.DoesNotExist(System.String)">
            <summary>
            Asserts that the directory does not exist. If it does exist
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="actual">The path to a directory containing the actual value</param>
        </member>
        <member name="T:NUnit.Framework.Does">
            <summary>
            Helper class with properties and methods that supply
            a number of constraints used in Asserts.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Does.Not">
            <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Does.Exist">
            <summary>
            Returns a constraint that succeeds if the value
            is a file or directory and it exists.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Does.Contain(System.Object)">
            <summary>
            Returns a new <see cref="T:NUnit.Framework.Constraints.SomeItemsConstraint"/> checking for the
            presence of a particular object in the collection.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Does.Contain(System.String)">
            <summary>
            Returns a new <see cref="T:NUnit.Framework.Constraints.ContainsConstraint"/>. This constraint
            will, in turn, make use of the appropriate second-level
            constraint, depending on the type of the actual argument.
            This overload is only used if the item sought is a string,
            since any other type implies that we are looking for a
            collection member.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Does.ContainKey(System.Object)">
            <summary>
            Returns a new DictionaryContainsKeyConstraint checking for the
            presence of a particular key in the Dictionary key collection.
            </summary>
            <param name="expected">The key to be matched in the Dictionary key collection</param>
        </member>
        <member name="M:NUnit.Framework.Does.ContainValue(System.Object)">
            <summary>
            Returns a new DictionaryContainsValueConstraint checking for the
            presence of a particular value in the Dictionary value collection.
            </summary>
            <param name="expected">The value to be matched in the Dictionary value collection</param>
        </member>
        <member name="M:NUnit.Framework.Does.StartWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value starts with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Does.EndWith(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value ends with the substring supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Does.Match(System.String)">
            <summary>
            Returns a constraint that succeeds if the actual
            value matches the regular expression supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Does.Match(System.Text.RegularExpressions.Regex)">
            <summary>
            Returns a constraint that succeeds if the actual
            value matches the regular expression supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ExceptionExtensions.GetStackTraceWithoutThrowing(System.Exception)">
            <summary>
            If <see cref="P:System.Exception.StackTrace"/> throws, returns "SomeException was thrown by the Exception.StackTrace
            property." See also <see cref="M:NUnit.Framework.Assert.GetEnvironmentStackTraceWithoutThrowing"/>.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ExceptionExtensions.GetMessageWithoutThrowing(System.Exception)">
            <summary>
            If <see cref="P:System.Exception.Message"/> throws, returns "SomeException was thrown by the Exception.Message
            property."
            </summary>
        </member>
        <member name="M:NUnit.Framework.ExceptionExtensions.GetDataWithoutThrowing(System.Exception)">
            <summary>
            If <see cref="P:System.Exception.Data"/> throws, returns "SomeException was thrown by the Exception.Data property."
            </summary>
        </member>
        <member name="T:NUnit.Framework.AssertionException">
            <summary>
            Thrown when an assertion failed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.AssertionException.#ctor(System.String)">
            <param name="message">The error message that explains
            the reason for the exception</param>
        </member>
        <member name="M:NUnit.Framework.AssertionException.#ctor(System.String,System.Exception)">
            <param name="message">The error message that explains
            the reason for the exception</param>
            <param name="inner">The exception that caused the
            current exception</param>
        </member>
        <member name="M:NUnit.Framework.AssertionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
        </member>
        <member name="P:NUnit.Framework.AssertionException.ResultState">
            <summary>
            Gets the ResultState provided by this exception
            </summary>
        </member>
        <member name="T:NUnit.Framework.IgnoreException">
            <summary>
            Thrown when an assertion failed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.IgnoreException.#ctor(System.String)">
            <param name="message"></param>
        </member>
        <member name="M:NUnit.Framework.IgnoreException.#ctor(System.String,System.Exception)">
            <param name="message">The error message that explains
            the reason for the exception</param>
            <param name="inner">The exception that caused the
            current exception</param>
        </member>
        <member name="M:NUnit.Framework.IgnoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
        </member>
        <member name="P:NUnit.Framework.IgnoreException.ResultState">
            <summary>
            Gets the ResultState provided by this exception
            </summary>
        </member>
        <member name="T:NUnit.Framework.InconclusiveException">
            <summary>
            Thrown when a test executes inconclusively.
            </summary>
        </member>
        <member name="M:NUnit.Framework.InconclusiveException.#ctor(System.String)">
            <param name="message">The error message that explains
            the reason for the exception</param>
        </member>
        <member name="M:NUnit.Framework.InconclusiveException.#ctor(System.String,System.Exception)">
            <param name="message">The error message that explains
            the reason for the exception</param>
            <param name="inner">The exception that caused the
            current exception</param>
        </member>
        <member name="M:NUnit.Framework.InconclusiveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
        </member>
        <member name="P:NUnit.Framework.InconclusiveException.ResultState">
            <summary>
            Gets the ResultState provided by this exception
            </summary>
        </member>
        <member name="T:NUnit.Framework.MultipleAssertException">
            <summary>
            Thrown when an assertion failed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.MultipleAssertException.#ctor(NUnit.Framework.Interfaces.ITestResult)">
            <summary>
            Construct based on the TestResult so far. This is the constructor
            used normally, when exiting the multiple assert block with failures.
            Not used internally but provided to facilitate debugging.
            </summary>
            <param name="testResult">
            The current result, up to this point. The result is not used
            internally by NUnit but is provided to facilitate debugging.
            </param>
        </member>
        <member name="M:NUnit.Framework.MultipleAssertException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
        </member>
        <member name="P:NUnit.Framework.MultipleAssertException.ResultState">
            <summary>
            Gets the <see cref="P:NUnit.Framework.MultipleAssertException.ResultState"/> provided by this exception.
            </summary>
        </member>
        <member name="P:NUnit.Framework.MultipleAssertException.TestResult">
            <summary>
            Gets the <see cref="T:NUnit.Framework.Interfaces.ITestResult"/> of this test at the point the exception was thrown,
            </summary>
        </member>
        <member name="T:NUnit.Framework.ResultStateException">
            <summary>
            Abstract base for Exceptions that terminate a test and provide a ResultState.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ResultStateException.#ctor(System.String)">
            <param name="message">The error message that explains
            the reason for the exception</param>
        </member>
        <member name="M:NUnit.Framework.ResultStateException.#ctor(System.String,System.Exception)">
            <param name="message">The error message that explains
            the reason for the exception</param>
            <param name="inner">The exception that caused the
            current exception</param>
        </member>
        <member name="M:NUnit.Framework.ResultStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
        </member>
        <member name="P:NUnit.Framework.ResultStateException.ResultState">
            <summary>
            Gets the ResultState provided by this exception
            </summary>
        </member>
        <member name="T:NUnit.Framework.SuccessException">
            <summary>
            Thrown when an assertion failed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.SuccessException.#ctor(System.String)">
            <param name="message"></param>
        </member>
        <member name="M:NUnit.Framework.SuccessException.#ctor(System.String,System.Exception)">
            <param name="message">The error message that explains
            the reason for the exception</param>
            <param name="inner">The exception that caused the
            current exception</param>
        </member>
        <member name="M:NUnit.Framework.SuccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
        </member>
        <member name="P:NUnit.Framework.SuccessException.ResultState">
            <summary>
            Gets the ResultState provided by this exception
            </summary>
        </member>
        <member name="T:NUnit.Framework.Extensions">
            <summary>
            Contains extension methods that do not require a special <c>using</c> directive.
            </summary>
        </member>
        <member name="T:NUnit.Framework.FileAssert">
            <summary>
            Asserts on Files
            </summary>
        </member>
        <member name="M:NUnit.Framework.FileAssert.Equals(System.Object,System.Object)">
            <summary>
            DO NOT USE! Use FileAssert.AreEqual(...) instead.
            The Equals method throws an InvalidOperationException. This is done
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.ReferenceEquals(System.Object,System.Object)">
            <summary>
            DO NOT USE!
            The ReferenceEquals method throws an InvalidOperationException. This is done
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreEqual(System.IO.Stream,System.IO.Stream,System.String,System.Object[])">
            <summary>
            Verifies that two Streams are equal.  Two Streams are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected Stream</param>
            <param name="actual">The actual Stream</param>
            <param name="message">The message to display if Streams are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreEqual(System.IO.Stream,System.IO.Stream)">
            <summary>
            Verifies that two Streams are equal.  Two Streams are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected Stream</param>
            <param name="actual">The actual Stream</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreEqual(System.IO.FileInfo,System.IO.FileInfo,System.String,System.Object[])">
            <summary>
            Verifies that two files are equal.  Two files are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A file containing the value that is expected</param>
            <param name="actual">A file containing the actual value</param>
            <param name="message">The message to display if Streams are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreEqual(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Verifies that two files are equal.  Two files are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A file containing the value that is expected</param>
            <param name="actual">A file containing the actual value</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreEqual(System.String,System.String,System.String,System.Object[])">
            <summary>
            Verifies that two files are equal.  Two files are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The path to a file containing the value that is expected</param>
            <param name="actual">The path to a file containing the actual value</param>
            <param name="message">The message to display if Streams are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreEqual(System.String,System.String)">
            <summary>
            Verifies that two files are equal.  Two files are considered
            equal if both are null, or if both have the same value byte for byte.
            If they are not equal an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The path to a file containing the value that is expected</param>
            <param name="actual">The path to a file containing the actual value</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreNotEqual(System.IO.Stream,System.IO.Stream,System.String,System.Object[])">
            <summary>
            Asserts that two Streams are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected Stream</param>
            <param name="actual">The actual Stream</param>
            <param name="message">The message to be displayed when the two Stream are the same.</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreNotEqual(System.IO.Stream,System.IO.Stream)">
            <summary>
            Asserts that two Streams are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The expected Stream</param>
            <param name="actual">The actual Stream</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreNotEqual(System.IO.FileInfo,System.IO.FileInfo,System.String,System.Object[])">
            <summary>
            Asserts that two files are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A file containing the value that is expected</param>
            <param name="actual">A file containing the actual value</param>
            <param name="message">The message to display if Streams are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreNotEqual(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Asserts that two files are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">A file containing the value that is expected</param>
            <param name="actual">A file containing the actual value</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreNotEqual(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that two files are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The path to a file containing the value that is expected</param>
            <param name="actual">The path to a file containing the actual value</param>
            <param name="message">The message to display if Streams are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.AreNotEqual(System.String,System.String)">
            <summary>
            Asserts that two files are not equal. If they are equal
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="expected">The path to a file containing the value that is expected</param>
            <param name="actual">The path to a file containing the actual value</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.Exists(System.IO.FileInfo,System.String,System.Object[])">
            <summary>
            Asserts that the file exists. If it does not exist
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="actual">A file containing the actual value</param>
            <param name="message">The message to display if Streams are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.Exists(System.IO.FileInfo)">
            <summary>
            Asserts that the file exists. If it does not exist
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="actual">A file containing the actual value</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.Exists(System.String,System.String,System.Object[])">
            <summary>
            Asserts that the file exists. If it does not exist
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="actual">The path to a file containing the actual value</param>
            <param name="message">The message to display if Streams are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.Exists(System.String)">
            <summary>
            Asserts that the file exists. If it does not exist
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="actual">The path to a file containing the actual value</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.DoesNotExist(System.IO.FileInfo,System.String,System.Object[])">
            <summary>
            Asserts that the file does not exist. If it does exist
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="actual">A file containing the actual value</param>
            <param name="message">The message to display if Streams are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.DoesNotExist(System.IO.FileInfo)">
            <summary>
            Asserts that the file does not exist. If it does exist
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="actual">A file containing the actual value</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.DoesNotExist(System.String,System.String,System.Object[])">
            <summary>
            Asserts that the file does not exist. If it does exist
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="actual">The path to a file containing the actual value</param>
            <param name="message">The message to display if Streams are not equal</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.FileAssert.DoesNotExist(System.String)">
            <summary>
            Asserts that the file does not exist. If it does exist
            an <see cref="T:NUnit.Framework.AssertionException"/> is thrown.
            </summary>
            <param name="actual">The path to a file containing the actual value</param>
        </member>
        <member name="T:NUnit.Framework.Guard">
            <summary>
            Class used to guard against unexpected argument values
            or operations by throwing an appropriate exception.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Guard.ArgumentNotNull(System.Object,System.String)">
            <summary>
            Throws an exception if an argument is null
            </summary>
            <param name="value">The value to be tested</param>
            <param name="name">The name of the argument</param>
        </member>
        <member name="M:NUnit.Framework.Guard.ArgumentNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an exception if a string argument is null or empty
            </summary>
            <param name="value">The value to be tested</param>
            <param name="name">The name of the argument</param>
        </member>
        <member name="M:NUnit.Framework.Guard.ArgumentInRange(System.Boolean,System.String,System.String)">
            <summary>
            Throws an ArgumentOutOfRangeException if the specified condition is not met.
            </summary>
            <param name="condition">The condition that must be met</param>
            <param name="message">The exception message to be used</param>
            <param name="paramName">The name of the argument</param>
        </member>
        <member name="M:NUnit.Framework.Guard.ArgumentValid(System.Boolean,System.String,System.String)">
            <summary>
            Throws an ArgumentException if the specified condition is not met.
            </summary>
            <param name="condition">The condition that must be met</param>
            <param name="message">The exception message to be used</param>
            <param name="paramName">The name of the argument</param>
        </member>
        <member name="M:NUnit.Framework.Guard.OperationValid(System.Boolean,System.String)">
            <summary>
            Throws an InvalidOperationException if the specified condition is not met.
            </summary>
            <param name="condition">The condition that must be met</param>
            <param name="message">The exception message to be used</param>
        </member>
        <member name="M:NUnit.Framework.Guard.ArgumentNotAsyncVoid(System.Delegate,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if the specified delegate is <c>async void</c>.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Guard.ArgumentNotAsyncVoid(System.Reflection.MethodInfo,System.String)">
            <summary>
            Throws an <see cref="T:System.ArgumentException"/> if the specified delegate is <c>async void</c>.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Has">
            <summary>
            Helper class with properties and methods that supply
            a number of constraints used in Asserts.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.No">
            <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.All">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them succeed.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.Some">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if at least one of them succeeds.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.None">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them fail.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Has.Exactly(System.Int32)">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding only if a specified number of them succeed.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.One">
            <summary>
            Returns a <see cref="T:NUnit.Framework.Constraints.ItemsConstraintExpression"/> which will apply
            the following constraint to only one member of the collection,
            and fail if none or more than one match occurs.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Has.Property(System.String)">
            <summary>
            Returns a new PropertyConstraintExpression, which will either
            test for the existence of the named property on the object
            being tested or apply any following constraint to that property.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.Length">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Length property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.Count">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Count property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.Message">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the Message property of the object being tested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Has.InnerException">
            <summary>
            Returns a new ConstraintExpression, which will apply the following
            constraint to the InnerException property of the object being tested.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Has.Attribute(System.Type)">
            <summary>
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Has.Attribute``1">
            <summary>
            Returns a new AttributeConstraint checking for the
            presence of a particular attribute on an object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Has.Member(System.Object)">
            <summary>
            Returns a new <see cref="T:NUnit.Framework.Constraints.SomeItemsConstraint"/> checking for the
            presence of a particular object in the collection.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Has.ItemAt(System.Object[])">
            <summary>
            Returns a new IndexerConstraintExpression, which will
            apply any following constraint to that indexer value.
            </summary>
            <param name="indexArgs">Index accessor values.</param>
        </member>
        <member name="T:NUnit.Framework.Interfaces.AssertionResult">
            <summary>
            The AssertionResult class represents the result of a single assertion.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.AssertionResult.#ctor(NUnit.Framework.Interfaces.AssertionStatus,System.String,System.String)">
            <summary>
            Construct an AssertionResult
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.AssertionResult.Status">
            <summary> The pass/fail status of the assertion</summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.AssertionResult.Message">
            <summary>The message produced by the assertion, or null</summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.AssertionResult.StackTrace">
            <summary>The stack trace associated with the assertion, or null</summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.AssertionResult.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
        </member>
        <member name="M:NUnit.Framework.Interfaces.AssertionResult.Equals(NUnit.Framework.Interfaces.AssertionResult)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:NUnit.Framework.Interfaces.AssertionResult.GetHashCode">
            <summary>Serves as the default hash function.</summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.AssertionResult.ToString">
            <summary>
            ToString Override
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.AssertionStatus">
            <summary>
            AssertionStatus enumeration represents the possible outcomes of an assertion.
            The order of definition is significant, higher level values override lower
            ones in determining the overall result of a test.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.AssertionStatus.Inconclusive">
            <summary>
            An assumption failed
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.AssertionStatus.Passed">
            <summary>
            The assertion succeeded
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.AssertionStatus.Warning">
            <summary>
            A warning message was issued
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.AssertionStatus.Failed">
            <summary>
            The assertion failed
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.AssertionStatus.Error">
            <summary>
            An unexpected exception was thrown
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.IApplyToContext">
            <summary>
            The IApplyToContext interface is implemented by attributes
            that want to make changes to the execution context before
            a test is run.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IApplyToContext.ApplyToContext(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Apply changes to the execution context
            </summary>
            <param name="context">The execution context</param>
        </member>
        <member name="T:NUnit.Framework.Interfaces.IApplyToTest">
            <summary>
            The IApplyToTest interface is implemented by self-applying
            attributes that modify the state of a test in some way.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IApplyToTest.ApplyToTest(NUnit.Framework.Internal.Test)">
            <summary>
            Modifies a test as defined for the specific attribute.
            </summary>
            <param name="test">The test to modify</param>
        </member>
        <member name="T:NUnit.Framework.Interfaces.ICombiningStrategy">
            <summary>
            CombiningStrategy is the abstract base for classes that
            know how to combine values provided for individual test
            parameters to create a set of test cases.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ICombiningStrategy.GetTestCases(System.Collections.IEnumerable[])">
            <summary>
            Gets the test cases generated by the CombiningStrategy.
            </summary>
            <returns>The test cases.</returns>
        </member>
        <member name="T:NUnit.Framework.Interfaces.ICommandWrapper">
            <summary>
            ICommandWrapper is implemented by attributes and other
            objects able to wrap a TestCommand with another command.
            </summary>
            <remarks>
            Attributes or other objects should implement one of the
            derived interfaces, rather than this one, since they
            indicate in which part of the command chain the wrapper
            should be applied.
            </remarks>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ICommandWrapper.Wrap(NUnit.Framework.Internal.Commands.TestCommand)">
            <summary>
            Wrap a command and return the result.
            </summary>
            <param name="command">The command to be wrapped</param>
            <returns>The wrapped command</returns>
        </member>
        <member name="T:NUnit.Framework.Interfaces.IWrapTestMethod">
            <summary>
            Objects implementing this interface are used to wrap
            the TestMethodCommand itself. They apply after SetUp
            has been run and before TearDown.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.IWrapSetUpTearDown">
            <summary>
            Objects implementing this interface are used to wrap
            the entire test, including SetUp and TearDown.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.IRepeatTest">
            <summary>
            Objects implementing this interface are used to wrap
            tests that can repeat. The implementing command is run once,
            invoking the chained commands any number of times.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.IDisposableFixture">
            <summary>
            Any ITest that implements this interface is at a level that the implementing
            class should be disposed at the end of the test run
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.IFixtureBuilder">
            <summary>
            The IFixtureBuilder interface is exposed by a class that knows how to
            build test fixtures from a specified type. In general, it is exposed
            by an attribute, but it may be implemented in a helper class used by the
            attribute in some cases.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IFixtureBuilder.BuildFrom(NUnit.Framework.Interfaces.ITypeInfo)">
            <summary>
            Builds any number of test fixtures from the specified type.
            </summary>
            <param name="typeInfo">The type info of the fixture to be used.</param>
        </member>
        <member name="T:NUnit.Framework.Interfaces.IFixtureBuilder2">
            <summary>
            The IFixtureBuilder2 interface extends IFixtureBuilder by allowing
            use of a PreFilter, which is used to select methods as test cases.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IFixtureBuilder2.BuildFrom(NUnit.Framework.Interfaces.ITypeInfo,NUnit.Framework.Interfaces.IPreFilter)">
            <summary>
            Builds any number of test fixtures from the specified type.
            </summary>
            <param name="typeInfo">The type info of the fixture to be used.</param>
            <param name="filter">PreFilter to be used to select methods.</param>
        </member>
        <member name="T:NUnit.Framework.Interfaces.IImplyFixture">
            <summary>
            IImplyFixture is an empty marker interface used by attributes like
            TestAttribute that cause the class where they are used to be treated
            as a TestFixture even without a TestFixtureAttribute.
            
            Marker interfaces are not usually considered a good practice, but
            we use it here to avoid cluttering the attribute hierarchy with 
            classes that don't contain any extra implementation.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.IMethodInfo">
            <summary>
            The IMethodInfo class is used to encapsulate information
            about a method in a platform-independent manner.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.IMethodInfo.TypeInfo">
            <summary>
            Gets the Type from which this method was reflected.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.IMethodInfo.MethodInfo">
            <summary>
            Gets the MethodInfo for this method.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.IMethodInfo.Name">
            <summary>
            Gets the name of the method.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.IMethodInfo.IsAbstract">
            <summary>
            Gets a value indicating whether the method is abstract.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.IMethodInfo.IsPublic">
            <summary>
            Gets a value indicating whether the method is public.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.IMethodInfo.IsStatic">
            <summary>
            Gets a value indicating whether the method is static.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.IMethodInfo.ContainsGenericParameters">
            <summary>
            Gets a value indicating whether the method contains unassigned generic type parameters.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.IMethodInfo.IsGenericMethod">
            <summary>
            Gets a value indicating whether the method is a generic method.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.IMethodInfo.IsGenericMethodDefinition">
            <summary>
            Gets a value indicating whether the MethodInfo represents the definition of a generic method.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.IMethodInfo.ReturnType">
            <summary>
            Gets the return Type of the method.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IMethodInfo.GetParameters">
            <summary>
            Gets the parameters of the method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IMethodInfo.GetGenericArguments">
            <summary>
            Returns the Type arguments of a generic method or the Type parameters of a generic method definition.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IMethodInfo.MakeGenericMethod(System.Type[])">
            <summary>
            Replaces the type parameters of the method with the array of types provided and returns a new IMethodInfo.
            </summary>
            <param name="typeArguments">The type arguments to be used</param>
            <returns>A new IMethodInfo with the type arguments replaced</returns>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IMethodInfo.Invoke(System.Object,System.Object[])">
            <summary>
            Invokes the method, converting any TargetInvocationException to an NUnitException.
            </summary>
            <param name="fixture">The object on which to invoke the method</param>
            <param name="args">The argument list for the method</param>
            <returns>The return value from the invoked method</returns>
        </member>
        <member name="T:NUnit.Framework.Interfaces.IParameterDataProvider">
            <summary>
            Provides data for a single test parameter.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IParameterDataProvider.HasDataFor(NUnit.Framework.Interfaces.IParameterInfo)">
            <summary>
            Determines whether any data is available for a parameter.
            </summary>
            <param name="parameter">The parameter of a parameterized test.</param>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IParameterDataProvider.GetDataFor(NUnit.Framework.Interfaces.IParameterInfo)">
            <summary>
            Retrieves a list of arguments which can be passed to the specified parameter.
            </summary>
            <param name="parameter">The parameter of a parameterized test.</param>
        </member>
        <member name="T:NUnit.Framework.Interfaces.IParameterDataSource">
            <summary>
            Provides data for a single test parameter.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IParameterDataSource.GetData(NUnit.Framework.Interfaces.IParameterInfo)">
            <summary>
            Retrieves a list of arguments which can be passed to the specified parameter.
            </summary>
            <param name="parameter">The parameter of a parameterized test.</param>
        </member>
        <member name="T:NUnit.Framework.Interfaces.IParameterInfo">
            <summary>
            The IParameterInfo interface is an abstraction of a .NET parameter.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.IParameterInfo.IsOptional">
            <summary>
            Gets a value indicating whether the parameter is optional
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.IParameterInfo.Method">
            <summary>
            Gets an IMethodInfo representing the method for which this is a parameter
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.IParameterInfo.ParameterInfo">
            <summary>
            Gets the underlying .NET ParameterInfo
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.IParameterInfo.ParameterType">
            <summary>
            Gets the Type of the parameter
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.IPreFilter">
            <summary>
            Implemented by filters for use in deciding which
            Types and Methods should be used to generate tests.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IPreFilter.IsMatch(System.Type)">
            <summary>
            Use the filter on a Type, returning true if the type matches the filter
            and should therefore be included in the discovery process.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IPreFilter.IsMatch(System.Type,System.Reflection.MethodInfo)">
            <summary>
            Use the filter on a Type, returning true if the type matches the filter
            and should therefore be included in the discovery process.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.IPropertyBag">
            <summary>
            A PropertyBag represents a collection of name/value pairs
            that allows duplicate entries with the same key. Methods
            are provided for adding a new pair as well as for setting
            a key to a single value. All keys are strings but values
            may be of any type. Null values are not permitted, since
            a null entry represents the absence of the key.
            
            The entries in a PropertyBag are of two kinds: those that
            take a single value and those that take multiple values.
            However, the PropertyBag has no knowledge of which entries
            fall into each category and the distinction is entirely
            up to the code using the PropertyBag.
            
            When working with multi-valued properties, client code
            should use the Add method to add name/value pairs and 
            indexing to retrieve a list of all values for a given
            key. For example:
            
                bag.Add("Tag", "one");
                bag.Add("Tag", "two");
                Assert.That(bag["Tag"],
                  Is.EqualTo(new string[] { "one", "two" })); 
            
            When working with single-valued properties, client code
            should use the Set method to set the value and Get to
            retrieve the value. The GetSetting methods may also be
            used to retrieve the value in a type-safe manner while
            also providing default. For example:
            
                bag.Set("Priority", "low");
                bag.Set("Priority", "high"); // replaces value
                Assert.That(bag.Get("Priority"),
                  Is.EqualTo("high"));
                Assert.That(bag.GetSetting("Priority", "low"),
                  Is.EqualTo("high"));
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IPropertyBag.Add(System.String,System.Object)">
            <summary>
            Adds a key/value pair to the property bag
            </summary>
            <param name="key">The key</param>
            <param name="value">The value</param>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IPropertyBag.Set(System.String,System.Object)">
            <summary>
            Sets the value for a key, removing any other
            values that are already in the property set.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IPropertyBag.Get(System.String)">
            <summary>
            Gets a single value for a key, using the first
            one if multiple values are present and returning
            null if the value is not found.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IPropertyBag.ContainsKey(System.String)">
            <summary>
            Gets a flag indicating whether the specified key has
            any entries in the property set.
            </summary>
            <param name="key">The key to be checked</param>
            <returns>True if their are values present, otherwise false</returns>
        </member>
        <member name="P:NUnit.Framework.Interfaces.IPropertyBag.Item(System.String)">
            <summary>
            Gets or sets the list of values for a particular key
            </summary>
            <param name="key">The key for which the values are to be retrieved or set</param>
        </member>
        <member name="P:NUnit.Framework.Interfaces.IPropertyBag.Keys">
            <summary>
            Gets a collection containing all the keys in the property set
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.IReflectionInfo">
            <summary>
            The IReflectionInfo interface is implemented by NUnit wrapper objects that perform reflection.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IReflectionInfo.GetCustomAttributes``1(System.Boolean)">
            <summary>
            Returns an array of custom attributes of the specified type applied to this object
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IReflectionInfo.IsDefined``1(System.Boolean)">
            <summary>
            Returns a value indicating whether an attribute of the specified type is defined on this object.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.ISimpleTestBuilder">
            <summary>
            The ISimpleTestBuilder interface is exposed by a class that knows how to
            build a single tests from a specified method. In general,
            it is exposed by an attribute, but it may be implemented in a helper class
            used by the attribute in some cases.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ISimpleTestBuilder.BuildFrom(NUnit.Framework.Interfaces.IMethodInfo,NUnit.Framework.Internal.Test)">
            <summary>
            Builds a single test from the specified method and context.
            </summary>
            <param name="method">The method to be used as a test</param>
            <param name="suite">The TestSuite to which the method will be added</param>
        </member>
        <member name="T:NUnit.Framework.Interfaces.ISuiteBuilder">
            <summary>
            The ISuiteBuilder interface is exposed by a class that knows how to
            build a single test suite from a specified type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ISuiteBuilder.CanBuildFrom(NUnit.Framework.Interfaces.ITypeInfo)">
             <summary>
             Examine the type and determine if it is suitable for
             this builder to use in building a TestSuite.
            
             Note that returning false will cause the type to be ignored
             in loading the tests. If it is desired to load the suite
             but label it as non-runnable, ignored, etc., then this
             method must return true.
             </summary>
             <param name="typeInfo">The type of the fixture to be used</param>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ISuiteBuilder.BuildFrom(NUnit.Framework.Interfaces.ITypeInfo)">
            <summary>
            Builds a single test suite from the specified type.
            </summary>
            <param name="typeInfo">The type of the fixture to be used</param>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ISuiteBuilder.BuildFrom(NUnit.Framework.Interfaces.ITypeInfo,NUnit.Framework.Interfaces.IPreFilter)">
            <summary>
            Builds a single test suite from the specified type, subject
            to a filter that decides which methods are included.
            </summary>
            <param name="typeInfo">The type of the fixture to be used</param>
            <param name="filter">A PreFilter for selecting methods.</param>
        </member>
        <member name="T:NUnit.Framework.Interfaces.ITest">
            <summary>
            Common interface supported by all representations
            of a test. Only includes informational fields.
            The Run method is specifically excluded to allow
            for data-only representations of a test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITest.Id">
            <summary>
            Gets the id of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITest.Name">
            <summary>
            Gets the name of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITest.TestType">
            <summary>
            Gets the type of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITest.FullName">
            <summary>
            Gets the fully qualified name of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITest.ClassName">
            <summary>
            Gets the name of the class containing this test. Returns
            null if the test is not associated with a class.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITest.MethodName">
            <summary>
            Gets the name of the method implementing this test.
            Returns null if the test is not implemented as a method.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITest.TypeInfo">
            <summary>
            Gets the Type of the test fixture, if applicable, or
            null if no fixture type is associated with this test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITest.Method">
            <summary>
            Gets the method which declares the test, or <see langword="null"/>
            if no method is associated with this test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITest.RunState">
            <summary>
            Gets the RunState of the test, indicating whether it can be run.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITest.TestCaseCount">
            <summary>
            Count of the test cases ( 1 if this is a test case )
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITest.Properties">
            <summary>
            Gets the properties of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITest.Parent">
            <summary>
            Gets the parent test, if any.
            </summary>
            <value>The parent test or null if none exists.</value>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITest.IsSuite">
            <summary>
            Returns true if this is a test suite
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITest.HasChildren">
            <summary>
            Gets a bool indicating whether the current test
            has any descendant tests.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITest.Tests">
            <summary>
            Gets this test's child tests
            </summary>
            <value>A list of child tests</value>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITest.Fixture">
            <summary>
            Gets a fixture object for running this test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITest.Arguments">
            <summary>
            The arguments to use in creating the test or empty array if none are required.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.ITestBuilder">
            <summary>
            The ITestBuilder interface is exposed by a class that knows how to
            build tests from a specified method. In general, it is exposed
            by an attribute which has additional information available to provide
            the necessary test parameters to distinguish the test cases built.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITestBuilder.BuildFrom(NUnit.Framework.Interfaces.IMethodInfo,NUnit.Framework.Internal.Test)">
            <summary>
            Builds any number of tests from the specified method and context.
            </summary>
            <param name="method">The method to be used as a test</param>
            <param name="suite">The TestSuite to which the method will be added</param>
        </member>
        <member name="T:NUnit.Framework.Interfaces.ITestCaseBuilder">
            <summary>
            The ITestCaseBuilder interface is exposed by a class that knows how to
            build a test from a specified method, possibly containing child test cases.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITestCaseBuilder.CanBuildFrom(NUnit.Framework.Interfaces.IMethodInfo,NUnit.Framework.Internal.Test)">
             <summary>
             Examine the method and determine if it is suitable for
             this builder to use in building a TestCase to be
             included in the suite being populated.
            
             Note that returning false will cause the method to be ignored
             in loading the tests. If it is desired to load the method
             but label it as non-runnable, ignored, etc., then this
             method must return true.
             </summary>
             <param name="method">The test method to examine</param>
             <param name="suite">The suite being populated</param>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITestCaseBuilder.BuildFrom(NUnit.Framework.Interfaces.IMethodInfo,NUnit.Framework.Internal.Test)">
            <summary>
            Builds a single test from the specified method and context,
            possibly containing child test cases.
            </summary>
            <param name="method">The method to be used as a test case</param>
            <param name="suite">The test suite being populated, or null</param>
        </member>
        <member name="T:NUnit.Framework.Interfaces.ITestCaseData">
            <summary>
            The ITestCaseData interface is implemented by a class
            that is able to return complete test cases for use by
            a parameterized test method.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestCaseData.ExpectedResult">
            <summary>
            Gets the expected result of the test case
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestCaseData.HasExpectedResult">
            <summary>
            Returns true if an expected result has been set
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.ITestData">
            <summary>
            The ITestData interface is implemented by a class that
            represents a single instance of a parameterized test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestData.TestName">
            <summary>
            Gets the name to be used for the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestData.RunState">
            <summary>
            Gets the RunState for this test case.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestData.Arguments">
            <summary>
            Gets the argument list to be provided to the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestData.Properties">
            <summary>
            Gets the property dictionary for the test case
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.ITestFilter">
            <summary>
            Interface to be implemented by filters applied to tests.
            The filter applies when running the test, after it has been
            loaded, since this is the only time an ITest exists.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITestFilter.Pass(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Determine if a particular test passes the filter criteria. Pass
            may examine the parents and/or descendants of a test, depending
            on the semantics of the particular filter
            </summary>
            <param name="test">The test to which the filter is applied</param>
            <returns>True if the test passes the filter, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITestFilter.IsExplicitMatch(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Determine if a test matches the filter explicitly. That is, it must
            be a direct match of the test itself or one of its children.
            </summary>
            <param name="test">The test to which the filter is applied</param>
            <returns>True if the test matches the filter explicitly, otherwise false</returns>
        </member>
        <member name="T:NUnit.Framework.Interfaces.ITestFixtureData">
            <summary>
            The ITestCaseData interface is implemented by a class
            that is able to return the data required to create an
            instance of a parameterized test fixture.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestFixtureData.TypeArgs">
            <summary>
            Get the TypeArgs if separately set
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.ITestListener">
            <summary>
            The ITestListener interface is used internally to receive 
            notifications of significant events while a test is being 
            run. The events are propagated to clients by means of an
            AsyncCallback. NUnit extensions may also monitor these events.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITestListener.TestStarted(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Called when a test has just started
            </summary>
            <param name="test">The test that is starting</param>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITestListener.TestFinished(NUnit.Framework.Interfaces.ITestResult)">
            <summary>
            Called when a test has finished
            </summary>
            <param name="result">The result of the test</param>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITestListener.TestOutput(NUnit.Framework.Interfaces.TestOutput)">
            <summary>
            Called when a test produces output for immediate display
            </summary>
            <param name="output">A TestOutput object containing the text to display</param>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITestListener.SendMessage(NUnit.Framework.Interfaces.TestMessage)">
            <summary>
            Called when a test produces a message to be sent to listeners
            </summary>
            <param name="message">A <see cref="T:NUnit.Framework.Interfaces.TestMessage"/> object containing the text to send</param>
        </member>
        <member name="T:NUnit.Framework.Interfaces.ITestResult">
            <summary>
            The ITestResult interface represents the result of a test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.ResultState">
            <summary>
            Gets the ResultState of the test result, which 
            indicates the success or failure of the test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.Name">
            <summary>
            Gets the name of the test result
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.FullName">
            <summary>
            Gets the full name of the test result
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.Duration">
            <summary>
            Gets the elapsed time for running the test in seconds
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.StartTime">
            <summary>
            Gets or sets the time the test started running.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.EndTime">
            <summary>
            Gets or sets the time the test finished running.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.Message">
            <summary>
            Gets the message associated with a test
            failure or with not running the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.StackTrace">
            <summary>
            Gets any stack trace associated with an
            error or failure.</summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.TotalCount">
            <summary>
            Gets the total number of tests executed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.AssertCount">
            <summary>
            Gets the number of asserts executed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.FailCount">
            <summary>
            Gets the number of test cases that failed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.WarningCount">
            <summary>
            Gets the number of test cases that had warnings
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.PassCount">
            <summary>
            Gets the number of test cases that passed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.SkipCount">
            <summary>
            Gets the number of test cases that were skipped
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.InconclusiveCount">
            <summary>
            Gets the number of test cases that were inconclusive
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.HasChildren">
            <summary>
            Indicates whether this result has any child results.
            Accessing HasChildren should not force creation of the
            Children collection in classes implementing this interface.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.Children">
            <summary>
            Gets the collection of child results.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.Test">
            <summary>
            Gets the Test to which this result applies.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.Output">
            <summary>
            Gets any text output written to this result.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.AssertionResults">
            <summary>
            Gets a list of AssertionResults associated with the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITestResult.TestAttachments">
            <summary>
            Gets the collection of files attached to the test
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.ITypeInfo">
            <summary>
            The ITypeInfo interface is an abstraction of a .NET Type
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITypeInfo.Type">
            <summary>
            Gets the underlying Type on which this ITypeInfo is based
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITypeInfo.BaseType">
            <summary>
            Gets the base type of this type as an ITypeInfo
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITypeInfo.IsType(System.Type)">
            <summary>
            Returns true if the Type wrapped is equal to the argument
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITypeInfo.Name">
            <summary>
            Gets the name of the Type
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITypeInfo.FullName">
            <summary>
            Gets the full name of the Type
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITypeInfo.Assembly">
            <summary>
            Gets the assembly in which the type is declared
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITypeInfo.Namespace">
            <summary>
            Gets the namespace of the Type
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITypeInfo.IsAbstract">
            <summary>
            Gets a value indicating whether the type is abstract.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITypeInfo.IsGenericType">
            <summary>
            Gets a value indicating whether the Type is a generic Type
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITypeInfo.ContainsGenericParameters">
            <summary>
            Gets a value indicating whether the Type has generic parameters that have not been replaced by specific Types.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITypeInfo.IsGenericTypeDefinition">
            <summary>
            Gets a value indicating whether the Type is a generic Type definition
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITypeInfo.IsSealed">
            <summary>
            Gets a value indicating whether the type is sealed.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ITypeInfo.IsStaticClass">
            <summary>
            Gets a value indicating whether this type is a static class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITypeInfo.GetDisplayName">
            <summary>
            Get the display name for this typeInfo.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITypeInfo.GetDisplayName(System.Object[])">
            <summary>
            Get the display name for an object of this type, constructed with specific arguments
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITypeInfo.GetGenericTypeDefinition">
            <summary>
            Returns a Type representing a generic type definition from which this Type can be constructed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITypeInfo.MakeGenericType(System.Type[])">
            <summary>
            Returns a new ITypeInfo representing an instance of this generic Type using the supplied Type arguments
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITypeInfo.HasMethodWithAttribute(System.Type)">
            <summary>
            Returns a value indicating whether this type has a method with a specified public attribute
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITypeInfo.GetMethods(System.Reflection.BindingFlags)">
            <summary>
            Returns an array of IMethodInfos for methods of this Type
            that match the specified flags.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITypeInfo.GetConstructor(System.Type[])">
            <summary>
            Gets the public constructor taking the specified argument Types
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITypeInfo.HasConstructor(System.Type[])">
            <summary>
            Returns a value indicating whether this Type has a public constructor taking the specified argument Types.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITypeInfo.Construct(System.Object[])">
            <summary>
            Construct an object of this Type, using the specified arguments.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ITypeInfo.GetMethodsWithAttribute``1(System.Boolean)">
            <summary>
            Returns all methods declared by this type that have the specified attribute, optionally
            including base classes. Methods from a base class are always returned before methods from a class that
            inherits from it.
            </summary>
            <param name="inherit">Specifies whether to search the fixture type inheritance chain.</param>
        </member>
        <member name="T:NUnit.Framework.Interfaces.IXmlNodeBuilder">
            <summary>
            An object implementing IXmlNodeBuilder is able to build 
            an XML representation of itself and any children.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IXmlNodeBuilder.ToXml(System.Boolean)">
            <summary>
            Returns a TNode representing the current object.
            </summary>
            <param name="recursive">If true, children are included where applicable</param>
            <returns>A TNode representing the result</returns>
        </member>
        <member name="M:NUnit.Framework.Interfaces.IXmlNodeBuilder.AddToXml(NUnit.Framework.Interfaces.TNode,System.Boolean)">
            <summary>
            Returns a TNode representing the current object after 
            adding it as a child of the supplied parent node.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="recursive">If true, children are included, where applicable</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Interfaces.ResultState">
            <summary>
            The ResultState class represents the outcome of running a test.
            It contains two pieces of information. The Status of the test
            is an enum indicating whether the test passed, failed, was
            skipped or was inconclusive. The Label provides a more
            detailed breakdown for use by client runners.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ResultState.#ctor(NUnit.Framework.Interfaces.TestStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Interfaces.ResultState"/> class.
            </summary>
            <param name="status">The TestStatus.</param>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ResultState.#ctor(NUnit.Framework.Interfaces.TestStatus,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Interfaces.ResultState"/> class.
            </summary>
            <param name="status">The TestStatus.</param>
            <param name="label">The label.</param>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ResultState.#ctor(NUnit.Framework.Interfaces.TestStatus,NUnit.Framework.Interfaces.FailureSite)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Interfaces.ResultState"/> class.
            </summary>
            <param name="status">The TestStatus.</param>
            <param name="site">The stage at which the result was produced</param>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ResultState.#ctor(NUnit.Framework.Interfaces.TestStatus,System.String,NUnit.Framework.Interfaces.FailureSite)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Interfaces.ResultState"/> class.
            </summary>
            <param name="status">The TestStatus.</param>
            <param name="label">The label.</param>
            <param name="site">The stage at which the result was produced</param>
        </member>
        <member name="F:NUnit.Framework.Interfaces.ResultState.Inconclusive">
            <summary>
            The result is inconclusive
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.ResultState.Skipped">
            <summary>
            The test has been skipped.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.ResultState.Ignored">
            <summary>
            The test has been ignored.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.ResultState.Explicit">
            <summary>
            The test was skipped because it is explicit
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.ResultState.Success">
            <summary>
            The test succeeded
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.ResultState.Warning">
            <summary>
            The test issued a warning
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.ResultState.Failure">
            <summary>
            The test failed
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.ResultState.Error">
            <summary>
            The test encountered an unexpected exception
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.ResultState.Cancelled">
            <summary>
            The test was cancelled by the user
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.ResultState.NotRunnable">
            <summary>
            The test was not runnable.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.ResultState.ChildFailure">
            <summary>
            A suite failed because one or more child tests failed or had errors
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.ResultState.ChildWarning">
            <summary>
            A suite failed because one or more child tests had warnings
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.ResultState.ChildIgnored">
            <summary>
            A suite is marked ignored because one or more child tests were ignored
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.ResultState.SetUpFailure">
            <summary>
            A suite failed in its OneTimeSetUp
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.ResultState.SetUpError">
            <summary>
            A suite had an unexpected exception in its OneTimeSetUp
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.ResultState.TearDownError">
            <summary>
            A suite had an unexpected exception in its OneTimeDown
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ResultState.Status">
            <summary>
            Gets the TestStatus for the test.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ResultState.Label">
            <summary>
            Gets the label under which this test result is
            categorized, or <see cref="F:System.String.Empty"/> if none.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.ResultState.Site">
            <summary>
            Gets the stage of test execution in which
            the failure or other result took place.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ResultState.WithSite(NUnit.Framework.Interfaces.FailureSite)">
            <summary>
            Get a new ResultState, which is the same as the current
            one but with the FailureSite set to the specified value.
            </summary>
            <param name="site">The FailureSite to use</param>
            <returns>A new ResultState</returns>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ResultState.Matches(NUnit.Framework.Interfaces.ResultState)">
            <summary>
            Test whether this ResultState has the same Status and Label
            as another one. In other words, the whether two are equal
            ignoring the Site.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ResultState.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ResultState.Equals(NUnit.Framework.Interfaces.ResultState)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ResultState.GetHashCode">
            <summary>Serves as the default hash function.</summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ResultState.op_Equality(NUnit.Framework.Interfaces.ResultState,NUnit.Framework.Interfaces.ResultState)">
            <summary>
            Overload == operator for ResultStates
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ResultState.op_Inequality(NUnit.Framework.Interfaces.ResultState,NUnit.Framework.Interfaces.ResultState)">
            <summary>
            Overload != operator for ResultStates
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.ResultState.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:NUnit.Framework.Interfaces.FailureSite">
            <summary>
            The FailureSite enum indicates the stage of a test
            in which an error or failure occurred.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.FailureSite.Test">
            <summary>
            Failure in the test itself
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.FailureSite.SetUp">
            <summary>
            Failure in the SetUp method
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.FailureSite.TearDown">
            <summary>
            Failure in the TearDown method
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.FailureSite.Parent">
            <summary>
            Failure of a parent test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.FailureSite.Child">
            <summary>
            Failure of a child test
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.RunState">
            <summary>
            The RunState enum indicates whether a test can be executed. 
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.RunState.NotRunnable">
            <summary>
            The test is not runnable.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.RunState.Runnable">
            <summary>
            The test is runnable. 
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.RunState.Explicit">
            <summary>
            The test can only be run explicitly
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.RunState.Skipped">
            <summary>
            The test has been skipped. This value may
            appear on a Test when certain attributes
            are used to skip the test.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.RunState.Ignored">
            <summary>
            The test has been ignored. May appear on
            a Test, when the IgnoreAttribute is used.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.TestAttachment">
            <summary>
            The TestAttachment class represents a file attached to a TestResult,
            with an optional description.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.TestAttachment.FilePath">
            <summary>
            Absolute file path to attachment file
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.TestAttachment.Description">
            <summary>
            User specified description of attachment. May be null.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.TestAttachment.#ctor(System.String,System.String)">
            <summary>
            Creates a TestAttachment class to represent a file attached to a test result.
            </summary>
            <param name="filePath">Absolute file path to attachment file</param>
            <param name="description">User specified description of attachment. May be null.</param>
        </member>
        <member name="T:NUnit.Framework.Interfaces.TestMessage">
            <summary>
            The <see cref="T:NUnit.Framework.Interfaces.TestMessage"/> class holds a message sent by a test to all listeners
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.TestMessage.#ctor(System.String,System.String,System.String)">
            <summary>
            Construct with text, destination type and
            the name of the test that produced the message.
            </summary>
            <param name="destination">Destination of the message</param>
            <param name="text">Text to be sent</param>
            <param name="testId">ID of the test that produced the message</param>
        </member>
        <member name="M:NUnit.Framework.Interfaces.TestMessage.ToString">
            <summary>
            Converts <see cref="T:NUnit.Framework.Interfaces.TestMessage"/> object to string
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.TestMessage.Message">
            <summary>
            The message to send to listeners
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.TestMessage.Destination">
            <summary>
            The Destination of the message.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.TestMessage.TestId">
            <summary>
            The ID of the test that sent the message
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.TestMessage.ToXml">
            <summary>
            Returns the XML representation of the <see cref="T:NUnit.Framework.Interfaces.TestMessage"/> object.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.TestOutput">
            <summary>
            The TestOutput class holds a unit of output from 
            a test to a specific output stream
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.TestOutput.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Construct with text, output destination type and
            the name of the test that produced the output.
            </summary>
            <param name="text">Text to be output</param>
            <param name="stream">Name of the stream or channel to which the text should be written</param>
            <param name="testId">Id of the test that produced the output</param>
            <param name="testName">FullName of test that produced the output</param>
        </member>
        <member name="M:NUnit.Framework.Interfaces.TestOutput.ToString">
            <summary>
            Return string representation of the object for debugging
            </summary>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Interfaces.TestOutput.Text">
            <summary>
            Get the text 
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.TestOutput.Stream">
            <summary>
            Get the output type
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.TestOutput.TestName">
            <summary>
            Get the name of the test that created the output
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.TestOutput.TestId">
            <summary>
            Get the id of the test that created the output
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.TestOutput.ToXml">
            <summary>
            Convert the TestOutput object to an XML string
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.TestStatus">
            <summary>
            The TestStatus enum indicates the result of running a test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.TestStatus.Inconclusive">
            <summary>
            The test was inconclusive
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.TestStatus.Skipped">
            <summary>
            The test has skipped 
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.TestStatus.Passed">
            <summary>
            The test succeeded
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.TestStatus.Warning">
            <summary>
            There was a warning
            </summary>
        </member>
        <member name="F:NUnit.Framework.Interfaces.TestStatus.Failed">
            <summary>
            The test failed
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.TNode">
            <summary>
            TNode represents a single node in the XML representation
            of a Test or TestResult. It replaces System.Xml.XmlNode and
            System.Xml.Linq.XElement, providing a minimal set of methods
            for operating on the XML in a platform-independent manner.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.TNode.#ctor(System.String)">
            <summary>
            Constructs a new instance of TNode
            </summary>
            <param name="name">The name of the node</param>
        </member>
        <member name="M:NUnit.Framework.Interfaces.TNode.#ctor(System.String,System.String)">
            <summary>
            Constructs a new instance of TNode with a value
            </summary>
            <param name="name">The name of the node</param>
            <param name="value">The text content of the node</param>
        </member>
        <member name="M:NUnit.Framework.Interfaces.TNode.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructs a new instance of TNode with a value
            </summary>
            <param name="name">The name of the node</param>
            <param name="value">The text content of the node</param>
            <param name="valueIsCDATA">Flag indicating whether to use CDATA when writing the text</param>
        </member>
        <member name="P:NUnit.Framework.Interfaces.TNode.Name">
            <summary>
            Gets the name of the node
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.TNode.Value">
            <summary>
            Gets the value of the node
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.TNode.ValueIsCDATA">
            <summary>
            Gets a flag indicating whether the value should be output using CDATA.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.TNode.Attributes">
            <summary>
            Gets the dictionary of attributes
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.TNode.ChildNodes">
            <summary>
            Gets a list of child nodes
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.TNode.FirstChild">
            <summary>
            Gets the first ChildNode
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.TNode.OuterXml">
            <summary>
            Gets the XML representation of this node.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.TNode.FromXml(System.String)">
            <summary>
            Create a TNode from its XML text representation
            </summary>
            <param name="xmlText">The XML text to be parsed</param>
            <returns>A TNode</returns>
        </member>
        <member name="M:NUnit.Framework.Interfaces.TNode.AddElement(System.String)">
            <summary>
            Adds a new element as a child of the current node and returns it.
            </summary>
            <param name="name">The element name.</param>
            <returns>The newly created child element</returns>
        </member>
        <member name="M:NUnit.Framework.Interfaces.TNode.AddElement(System.String,System.String)">
            <summary>
            Adds a new element with a value as a child of the current node and returns it.
            </summary>
            <param name="name">The element name</param>
            <param name="value">The text content of the new element</param>
            <returns>The newly created child element</returns>
        </member>
        <member name="M:NUnit.Framework.Interfaces.TNode.AddElementWithCDATA(System.String,System.String)">
            <summary>
            Adds a new element with a value as a child of the current node and returns it.
            The value will be output using a CDATA section.
            </summary>
            <param name="name">The element name</param>
            <param name="value">The text content of the new element</param>
            <returns>The newly created child element</returns>
        </member>
        <member name="M:NUnit.Framework.Interfaces.TNode.AddAttribute(System.String,System.String)">
            <summary>
            Adds an attribute with a specified name and value to the XmlNode.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="value">The value of the attribute.</param>
        </member>
        <member name="M:NUnit.Framework.Interfaces.TNode.SelectSingleNode(System.String)">
            <summary>
            Finds a single descendant of this node matching an XPath
            specification. The format of the specification is
            limited to what is needed by NUnit and its tests.
            </summary>
            <param name="xpath"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Interfaces.TNode.SelectNodes(System.String)">
            <summary>
            Finds all descendants of this node matching an XPath
            specification. The format of the specification is
            limited to what is needed by NUnit and its tests.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Interfaces.TNode.WriteTo(System.Xml.XmlWriter)">
            <summary>
            Writes the XML representation of the node to an XmlWriter
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:NUnit.Framework.Interfaces.NodeList">
            <summary>
            Class used to represent a list of XmlResults
            </summary>
        </member>
        <member name="T:NUnit.Framework.Interfaces.AttributeDictionary">
            <summary>
            Class used to represent the attributes of a node
            </summary>
        </member>
        <member name="P:NUnit.Framework.Interfaces.AttributeDictionary.Item(System.String)">
            <summary>
            Gets or sets the value associated with the specified key.
            Overridden to return null if attribute is not found.
            </summary>
            <param name="key">The key.</param>
            <returns>Value of the attribute or null</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Abstractions.DebuggerProxy">
            <summary>
            A production <see cref="T:NUnit.Framework.Internal.Abstractions.IDebugger"/> implementation that delegates directly to .NET's <see cref="T:System.Diagnostics.Debugger"/>.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Abstractions.DebuggerProxy.IsAttached">
            <summary>
            Returns whether a debugger is currently attached to the process
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Abstractions.IDebugger">
            <summary>
            A layer of abstraction around <see cref="T:System.Diagnostics.Debugger"/> to facilitate testing.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Abstractions.IDebugger.IsAttached">
            <summary>
            Whether a debugger is currently attached to the process.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.AssemblyHelper">
            <summary>
            AssemblyHelper provides static methods for working
            with assemblies.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.AssemblyHelper.GetAssemblyPath(System.Reflection.Assembly)">
            <summary>
            Gets the path from which an assembly was loaded.
            For builds where this is not possible, returns
            the name of the assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>The path.</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.AssemblyHelper.GetDirectoryName(System.Reflection.Assembly)">
            <summary>
            Gets the path to the directory from which an assembly was loaded.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>The path.</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.AssemblyHelper.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
            Gets the AssemblyName of an assembly.
            </summary>
            <param name="assembly">The assembly</param>
            <returns>An AssemblyName</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.AssemblyHelper.Load(System.String)">
            <summary>
            Loads an assembly given a string, which is the AssemblyName
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.AssemblyHelper.GetAssemblyPathFromCodeBase(System.String)">
            <summary>
            Gets the assembly path from code base.
            </summary>
            <remarks>Public for testing purposes</remarks>
            <param name="codeBase">The code base.</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Internal.AwaitAdapter">
            <summary>
            Adapts various styles of asynchronous waiting to a common API.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Builders.CombinatorialStrategy">
            <summary>
            CombinatorialStrategy creates test cases by using all possible
            combinations of the parameter data.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.CombinatorialStrategy.GetTestCases(System.Collections.IEnumerable[])">
            <summary>
            Gets the test cases generated by the CombiningStrategy.
            </summary>
            <returns>The test cases.</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Builders.DatapointProvider">
            <summary>
            Provides data from fields marked with the DatapointAttribute or the
            DatapointsAttribute.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.DatapointProvider.HasDataFor(NUnit.Framework.Interfaces.IParameterInfo)">
            <summary>
            Determines whether any data is available for a parameter.
            </summary>
            <param name="parameter">The parameter of a parameterized test</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.DatapointProvider.GetDataFor(NUnit.Framework.Interfaces.IParameterInfo)">
            <summary>
            Retrieves data for use with the supplied parameter.
            </summary>
            <param name="parameter">The parameter of a parameterized test</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Builders.DefaultSuiteBuilder">
            <summary>
            Built-in SuiteBuilder for all types of test classes.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.DefaultSuiteBuilder.CanBuildFrom(NUnit.Framework.Interfaces.ITypeInfo)">
             <summary>
             Examine the type and determine if it is suitable for
             this builder to use in building a TestSuite.
            
             Note that returning false will cause the type to be ignored
             in loading the tests. If it is desired to load the suite
             but label it as non-runnable, ignored, etc., then this
             method must return true.
             </summary>
             <param name="typeInfo">The fixture type to check</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.DefaultSuiteBuilder.BuildFrom(NUnit.Framework.Interfaces.ITypeInfo)">
            <summary>
            Builds a single test suite from the specified type.
            </summary>
            <param name="typeInfo">The fixture type to build</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.DefaultSuiteBuilder.BuildFrom(NUnit.Framework.Interfaces.ITypeInfo,NUnit.Framework.Interfaces.IPreFilter)">
            <summary>
            Builds a single test suite from the specified type, subject
            to a filter that decides which methods are included.
            </summary>
            <param name="typeInfo">The fixture type to build</param>
            <param name="filter">A PreFilter for selecting methods.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.DefaultSuiteBuilder.GetFixtureBuilderAttributes(NUnit.Framework.Interfaces.ITypeInfo)">
            <summary>
            We look for attributes implementing IFixtureBuilder at one level
            of inheritance at a time. Attributes on base classes are not used
            unless there are no fixture builder attributes at all on the derived
            class. This is by design.
            </summary>
            <param name="typeInfo">The type being examined for attributes</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Builders.DefaultTestCaseBuilder">
            <summary>
            Class to build ether a parameterized or a normal NUnitTestMethod.
            There are four cases that the builder must deal with:
              1. The method needs no params and none are provided
              2. The method needs params and they are provided
              3. The method needs no params but they are provided in error
              4. The method needs params but they are not provided
            This could have been done using two different builders, but it
            turned out to be simpler to have just one. The BuildFrom method
            takes a different branch depending on whether any parameters are
            provided, but all four cases are dealt with in lower-level methods
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.DefaultTestCaseBuilder.CanBuildFrom(NUnit.Framework.Interfaces.IMethodInfo)">
             <summary>
             Determines if the method can be used to build an NUnit test
             test method of some kind. The method must normally be marked
             with an identifying attribute for this to be true.
            
             Note that this method does not check that the signature
             of the method for validity. If we did that here, any
             test methods with invalid signatures would be passed
             over in silence in the test run. Since we want such
             methods to be reported, the check for validity is made
             in BuildFrom rather than here.
             </summary>
             <param name="method">An IMethodInfo for the method being used as a test method</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.DefaultTestCaseBuilder.BuildFrom(NUnit.Framework.Interfaces.IMethodInfo)">
            <summary>
            Builds a single test from the specified method and context,
            possibly containing child test cases.
            </summary>
            <param name="method">The method for which a test is to be built</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.DefaultTestCaseBuilder.CanBuildFrom(NUnit.Framework.Interfaces.IMethodInfo,NUnit.Framework.Internal.Test)">
             <summary>
             Determines if the method can be used to build an NUnit test
             test method of some kind. The method must normally be marked
             with an identifying attribute for this to be true.
            
             Note that this method does not check that the signature
             of the method for validity. If we did that here, any
             test methods with invalid signatures would be passed
             over in silence in the test run. Since we want such
             methods to be reported, the check for validity is made
             in BuildFrom rather than here.
             </summary>
             <param name="method">An IMethodInfo for the method being used as a test method</param>
             <param name="parentSuite">The test suite being built, to which the new test would be added</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.DefaultTestCaseBuilder.BuildFrom(NUnit.Framework.Interfaces.IMethodInfo,NUnit.Framework.Internal.Test)">
            <summary>
            Builds a single test from the specified method and context,
            possibly containing child test cases.
            </summary>
            <param name="method">The method for which a test is to be built</param>
            <param name="parentSuite">The test fixture being populated, or null</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.DefaultTestCaseBuilder.BuildParameterizedMethodSuite(NUnit.Framework.Interfaces.IMethodInfo,System.Collections.Generic.IEnumerable{NUnit.Framework.Internal.TestMethod})">
            <summary>
            Builds a ParameterizedMethodSuite containing individual test cases.
            </summary>
            <param name="method">The method for which a test is to be built.</param>
            <param name="tests">The list of test cases to include.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.DefaultTestCaseBuilder.BuildSingleTestMethod(NUnit.Framework.Interfaces.IMethodInfo,NUnit.Framework.Internal.Test)">
            <summary>
            Build a simple, non-parameterized TestMethod for this method.
            </summary>
            <param name="method">The MethodInfo for which a test is to be built</param>
            <param name="suite">The test suite for which the method is being built</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Builders.MethodInfoCache">
            <summary>
            Caches static information for IMethodInfo to reduce re-calculations and memory allocations from reflection.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.MethodInfoCache.Get(NUnit.Framework.Interfaces.IMethodInfo)">
            <summary>
            Returns cached metadata for method instance.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Builders.MethodInfoCache.TestMethodMetadata">
            <summary>
            Memoization of TestMethod information to reduce subsequent allocations from parameter and attribute information.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Builders.NamespaceTreeBuilder">
            <summary>
            Class that can build a tree of automatic namespace
            suites from a group of fixtures.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Builders.NamespaceTreeBuilder._namespaceIndex">
            <summary>
            NamespaceDictionary of all test suites we have created to represent 
            namespaces. Used to locate namespace parent suites for fixtures.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Builders.NamespaceTreeBuilder._globalInsertionPoint">
            <summary>
            Point in the tree where items in the global namespace are added
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.NamespaceTreeBuilder.#ctor(NUnit.Framework.Internal.TestSuite)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.Builders.NamespaceTreeBuilder"/> class.
            </summary>
            <param name="rootSuite">The root suite.</param>
        </member>
        <member name="P:NUnit.Framework.Internal.Builders.NamespaceTreeBuilder.RootSuite">
            <summary>
            Gets the root entry in the tree created by the NamespaceTreeBuilder.
            </summary>
            <value>The root suite.</value>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.NamespaceTreeBuilder.Add(System.Collections.Generic.IList{NUnit.Framework.Internal.Test})">
            <summary>
            Adds the specified fixtures to the tree.
            </summary>
            <param name="fixtures">The fixtures to be added.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.NamespaceTreeBuilder.Add(NUnit.Framework.Internal.TestSuite)">
            <summary>
            Adds the specified fixture to the tree.
            </summary>
            <param name="fixture">The fixture to be added.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Builders.NUnitTestCaseBuilder">
            <summary>
            NUnitTestCaseBuilder is a utility class used by attributes
            that build test cases.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.NUnitTestCaseBuilder.#ctor">
            <summary>
            Constructs an <see cref="T:NUnit.Framework.Internal.Builders.NUnitTestCaseBuilder"/>
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.NUnitTestCaseBuilder.BuildTestMethod(NUnit.Framework.Interfaces.IMethodInfo,NUnit.Framework.Internal.Test,NUnit.Framework.Internal.TestCaseParameters)">
            <summary>
            Builds a single NUnitTestMethod, either as a child of the fixture
            or as one of a set of test cases under a ParameterizedTestMethodSuite.
            </summary>
            <param name="method">The MethodInfo from which to construct the TestMethod</param>
            <param name="parentSuite">The suite or fixture to which the new test will be added</param>
            <param name="parms">The ParameterSet to be used, or null</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.NUnitTestCaseBuilder.CheckTestMethodAttributes(NUnit.Framework.Internal.TestMethod,NUnit.Framework.Internal.Builders.MethodInfoCache.TestMethodMetadata)">
            <summary>
            Checks to see if we have valid combinations of attributes.
            </summary>
            <param name="testMethod">The TestMethod to be checked. If it
            is found to be non-runnable, it will be modified.</param>
            <param name="metadata">Metadata for this TestMethod.</param>
            <returns>True if the method signature is valid, false if not</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.NUnitTestCaseBuilder.CheckTestMethodSignature(NUnit.Framework.Internal.TestMethod,NUnit.Framework.Internal.Builders.MethodInfoCache.TestMethodMetadata,NUnit.Framework.Internal.TestCaseParameters)">
             <summary>
             Helper method that checks the signature of a TestMethod and
             any supplied parameters to determine if the test is valid.
            
             Currently, NUnitTestMethods are required to be public,
             non-abstract methods, either static or instance,
             returning void. They may take arguments but the values must
             be provided or the TestMethod is not considered runnable.
            
             Methods not meeting these criteria will be marked as
             non-runnable and the method will return false in that case.
             </summary>
             <param name="testMethod">The TestMethod to be checked. If it
             is found to be non-runnable, it will be modified.</param>
             <param name="metadata">Metadata for this TestMethod.</param>
             <param name="parms">Parameters to be used for this test, or null</param>
             <returns>True if the method signature is valid, false if not</returns>
             <remarks>
             The return value is no longer used internally, but is retained
             for testing purposes.
             </remarks>
        </member>
        <member name="T:NUnit.Framework.Internal.Builders.NUnitTestFixtureBuilder">
            <summary>
            NUnitTestFixtureBuilder is able to build a fixture given
            a class marked with a TestFixtureAttribute or an unmarked
            class containing test methods. In the first case, it is
            called by the attribute and in the second directly by
            NUnitSuiteBuilder.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.NUnitTestFixtureBuilder.BuildFrom(NUnit.Framework.Interfaces.ITypeInfo,NUnit.Framework.Interfaces.IPreFilter)">
            <summary>
            Build a TestFixture from type provided. A non-null TestSuite
            must always be returned, since the method is generally called
            because the user has marked the target class as a fixture.
            If something prevents the fixture from being used, it should
            be returned nonetheless, labeled as non-runnable.
            </summary>
            <param name="typeInfo">An ITypeInfo for the fixture to be used.</param>
            <param name="filter">Filter used to select methods as tests.</param>
            <returns>A TestSuite object or one derived from TestSuite.</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.NUnitTestFixtureBuilder.BuildFrom(NUnit.Framework.Interfaces.ITypeInfo,NUnit.Framework.Interfaces.IPreFilter,NUnit.Framework.Interfaces.ITestFixtureData)">
            <summary>
            Overload of BuildFrom called by tests that have arguments.
            Builds a fixture using the provided type and information
            in the ITestFixtureData object.
            </summary>
            <param name="typeInfo">The TypeInfo for which to construct a fixture.</param>
            <param name="filter">Filter used to select methods as tests.</param>
            <param name="testFixtureData">An object implementing ITestFixtureData or null.</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.NUnitTestFixtureBuilder.AddTestCasesToFixture(NUnit.Framework.Internal.TestFixture,NUnit.Framework.Interfaces.IPreFilter)">
            <summary>
            Method to add test cases to the newly constructed fixture.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.NUnitTestFixtureBuilder.BuildTestCase(NUnit.Framework.Interfaces.IMethodInfo,NUnit.Framework.Internal.TestSuite)">
             <summary>
             Method to create a test case from a MethodInfo and add
             it to the fixture being built. It first checks to see if
             any global TestCaseBuilder addin wants to build the
             test case. If not, it uses the internal builder
             collection maintained by this fixture builder.
            
             The default implementation has no test case builders.
             Derived classes should add builders to the collection
             in their constructor.
             </summary>
             <param name="method">The method for which a test is to be created</param>
             <param name="suite">The test suite being built.</param>
             <returns>A newly constructed Test</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Builders.PairwiseStrategy">
            <summary>
            PairwiseStrategy creates test cases by combining the parameter
            data so that all possible pairs of data items are used.
            </summary>
            <remarks>
            <para>
            The number of test cases that cover all possible pairs of test function
            parameters values is significantly less than the number of test cases
            that cover all possible combination of test function parameters values.
            And because different studies show that most of software failures are
            caused by combination of no more than two parameters, pairwise testing
            can be an effective ways to test the system when it's impossible to test
            all combinations of parameters.
            </para>
            <para>
            The PairwiseStrategy code is based on "jenny" tool by Bob Jenkins:
            https://burtleburtle.net/bob/math/jenny.html
            </para>
            </remarks>
        </member>
        <member name="T:NUnit.Framework.Internal.Builders.PairwiseStrategy.FleaRand">
            <summary>
            FleaRand is a pseudo-random number generator developed by Bob Jenkins:
            https://burtleburtle.net/bob/rand/talksmall.html#flea
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.PairwiseStrategy.FleaRand.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the FleaRand class.
            </summary>
            <param name="seed">The seed.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Builders.PairwiseStrategy.FeatureInfo">
            <summary>
            FeatureInfo represents coverage of a single value of test function
            parameter, represented as a pair of indices, Dimension and Feature. In
            terms of unit testing, Dimension is the index of the test parameter and
            Feature is the index of the supplied value in that parameter's list of
            sources.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.PairwiseStrategy.FeatureInfo.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of FeatureInfo class.
            </summary>
            <param name="dimension">Index of a dimension.</param>
            <param name="feature">Index of a feature.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Builders.PairwiseStrategy.FeatureTuple">
            <summary>
            A FeatureTuple represents a combination of features, one per test
            parameter, which should be covered by a test case. In the
            PairwiseStrategy, we are only trying to cover pairs of features, so the
            tuples actually may contain only single feature or pair of features, but
            the algorithm itself works with triplets, quadruples and so on.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.PairwiseStrategy.FeatureTuple.#ctor(NUnit.Framework.Internal.Builders.PairwiseStrategy.FeatureInfo)">
            <summary>
            Initializes a new instance of FeatureTuple class for a single feature.
            </summary>
            <param name="feature1">Single feature.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.PairwiseStrategy.FeatureTuple.#ctor(NUnit.Framework.Internal.Builders.PairwiseStrategy.FeatureInfo,NUnit.Framework.Internal.Builders.PairwiseStrategy.FeatureInfo)">
            <summary>
            Initializes a new instance of FeatureTuple class for a pair of features.
            </summary>
            <param name="feature1">First feature.</param>
            <param name="feature2">Second feature.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Builders.PairwiseStrategy.TestCaseInfo">
            <summary>
            TestCase represents a single test case covering a list of features.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.PairwiseStrategy.TestCaseInfo.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of TestCaseInfo class.
            </summary>
            <param name="length">A number of features in the test case.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Builders.PairwiseStrategy.PairwiseTestCaseGenerator">
            <summary>
            PairwiseTestCaseGenerator class implements an algorithm which generates
            a set of test cases which covers all pairs of possible values of test
            function.
            </summary>
            <remarks>
            <para>
            The algorithm starts with creating a set of all feature tuples which we
            will try to cover (see <see
            cref="M:NUnit.Framework.Internal.Builders.PairwiseStrategy.PairwiseTestCaseGenerator.CreateAllTuples" /> method). This set
            includes every single feature and all possible pairs of features. We
            store feature tuples in the 3-D collection (where axes are "dimension",
            "feature", and "all combinations which includes this feature"), and for
            every two feature (e.g. "A" and "B") we generate both ("A", "B") and
            ("B", "A") pairs. This data structure extremely reduces the amount of
            time needed to calculate coverage for a single test case (this
            calculation is the most time-consuming part of the algorithm).
            </para>
            <para>
            Then the algorithm picks one tuple from the uncovered tuple, creates a
            test case that covers this tuple, and then removes this tuple and all
            other tuples covered by this test case from the collection of uncovered
            tuples.
            </para>
            <para>
            Picking a tuple to cover
            </para>
            <para>
            There are no any special rules defined for picking tuples to cover. We
            just pick them one by one, in the order they were generated.
            </para>
            <para>
            Test generation
            </para>
            <para>
            Test generation starts from creating a completely random test case which
            covers, nevertheless, previously selected tuple. Then the algorithm
            tries to maximize number of tuples which this test covers.
            </para>
            <para>
            Test generation and maximization process repeats seven times for every
            selected tuple and then the algorithm picks the best test case ("seven"
            is a magic number which provides good results in acceptable time).
            </para>
            <para>Maximizing test coverage</para>
            <para>
            To maximize tests coverage, the algorithm walks through the list of mutable
            dimensions (mutable dimension is a dimension that are not included in
            the previously selected tuple). Then for every dimension, the algorithm
            walks through the list of features and checks if this feature provides
            better coverage than randomly selected feature, and if yes keeps this
            feature.
            </para>
            <para>
            This process repeats while it shows progress. If the last iteration
            doesn't improve coverage, the process ends.
            </para>
            <para>
            In addition, for better results, before start every iteration, the
            algorithm "scrambles" dimensions - so for every iteration dimension
            probes in a different order.
            </para>
            </remarks>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.PairwiseStrategy.PairwiseTestCaseGenerator.GetTestCases(System.Int32[])">
            <summary>
            Creates a set of test cases for specified dimensions.
            </summary>
            <param name="dimensions">
            An array which contains information about dimensions. Each element of
            this array represents a number of features in the specific dimension.
            </param>
            <returns>
            A set of test cases.
            </returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.PairwiseStrategy.GetTestCases(System.Collections.IEnumerable[])">
            <summary>
            Gets the test cases generated by this strategy instance.
            </summary>
            <returns>A set of test cases.</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Builders.ParameterDataProvider">
            <summary>
            The ParameterDataProvider class implements IParameterDataProvider
            and hosts one or more individual providers.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.ParameterDataProvider.#ctor(NUnit.Framework.Interfaces.IParameterDataProvider[])">
            <summary>
            Construct with a collection of individual providers
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.ParameterDataProvider.HasDataFor(NUnit.Framework.Interfaces.IParameterInfo)">
            <summary>
            Determines whether any data is available for a parameter.
            </summary>
            <param name="parameter">The parameter of a parameterized test</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.ParameterDataProvider.GetDataFor(NUnit.Framework.Interfaces.IParameterInfo)">
            <summary>
            Retrieves data for use with the supplied parameter.
            </summary>
            <param name="parameter">The parameter of a parameterized test</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Builders.ParameterDataSourceProvider">
            <summary>
            ParameterDataSourceProvider supplies individual argument values for
            single parameters using attributes implementing IParameterDataSource.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.ParameterDataSourceProvider.HasDataFor(NUnit.Framework.Interfaces.IParameterInfo)">
            <summary>
            Determines whether any data is available for a parameter.
            </summary>
            <param name="parameter">The parameter of a parameterized test</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.ParameterDataSourceProvider.GetDataFor(NUnit.Framework.Interfaces.IParameterInfo)">
            <summary>
            Retrieves data for use with the supplied parameter.
            </summary>
            <param name="parameter">The parameter of a parameterized test</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Builders.SequentialStrategy">
            <summary>
            SequentialStrategy creates test cases by using all of the
            parameter data sources in parallel, substituting <see langword="null"/>
            when any of them run out of data.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Builders.SequentialStrategy.GetTestCases(System.Collections.IEnumerable[])">
            <summary>
            Gets the test cases generated by the CombiningStrategy.
            </summary>
            <returns>The test cases.</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.AfterTestActionCommand">
            <summary>
            TestActionAfterCommand handles the AfterTest method of a single 
            TestActionItem, provided the items BeforeTest has been run.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.AfterTestActionCommand.#ctor(NUnit.Framework.Internal.Commands.TestCommand,NUnit.Framework.Internal.Commands.TestActionItem)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.Commands.AfterTestActionCommand"/> class.
            </summary>
            <param name="innerCommand">The inner command.</param>
            <param name="action">The TestActionItem to run before the inner command.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.AfterTestCommand">
            <summary>
            AfterCommand is a DelegatingTestCommand that performs some
            specific action after the inner command is run.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.AfterTestCommand.#ctor(NUnit.Framework.Internal.Commands.TestCommand)">
            <summary>
            Construct an AfterCommand
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.AfterTestCommand.Execute(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Execute the command
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Commands.AfterTestCommand.AfterTest">
            <summary>
            Set this to perform action after the inner command.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.ApplyChangesToContextCommand">
            <summary>
            ContextSettingsCommand applies specified changes to the
            TestExecutionContext prior to running a test. No special
            action is needed after the test runs, since the prior
            context will be restored automatically.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.BeforeAndAfterTestCommand">
            <summary>
            TestActionCommand handles a single ITestAction applied
            to a test. It runs the BeforeTest method, then runs the
            test and finally runs the AfterTest method.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.BeforeAndAfterTestCommand.#ctor(NUnit.Framework.Internal.Commands.TestCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.Commands.TestActionCommand"/> class.
            </summary>
            <param name="innerCommand">The inner command.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.BeforeAndAfterTestCommand.Execute(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Runs the test, saving a TestResult in the supplied TestExecutionContext.
            </summary>
            <param name="context">The context in which the test should run.</param>
            <returns>A TestResult</returns>
        </member>
        <member name="F:NUnit.Framework.Internal.Commands.BeforeAndAfterTestCommand.BeforeTest">
            <summary>
            Perform the before test action
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Commands.BeforeAndAfterTestCommand.AfterTest">
            <summary>
            Perform the after test action
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.BeforeTestActionCommand">
            <summary>
            TestActionBeforeCommand handles the BeforeTest method of a single 
            TestActionItem, relying on the item to remember it has been run.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.BeforeTestActionCommand.#ctor(NUnit.Framework.Internal.Commands.TestCommand,NUnit.Framework.Internal.Commands.TestActionItem)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.Commands.BeforeTestActionCommand"/> class.
            </summary>
            <param name="innerCommand">The inner command.</param>
            <param name="action">The TestActionItem to run before the inner command.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.BeforeTestCommand">
            <summary>
            BeforeTestCommand is a DelegatingTestCommand that performs some
            specific action before the inner command is run.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.BeforeTestCommand.#ctor(NUnit.Framework.Internal.Commands.TestCommand)">
            <summary>
            Construct a BeforeCommand
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.BeforeTestCommand.Execute(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Execute the command
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Commands.BeforeTestCommand.BeforeTest">
            <summary>
            Action to perform before the inner command.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.ConstructFixtureCommand">
            <summary>
            ConstructFixtureCommand constructs the user test object if necessary.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.ConstructFixtureCommand.#ctor(NUnit.Framework.Internal.Commands.TestCommand)">
            <summary>
            Constructs a OneTimeSetUpCommand for a suite
            </summary>
            <param name="innerCommand">The inner command to which the command applies</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.DelegatingTestCommand">
            <summary>
            DelegatingTestCommand wraps an inner TestCommand.
            Derived classes may do what they like before or
            after running the inner command.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Commands.DelegatingTestCommand.innerCommand">
            <summary>TODO: Documentation needed for field</summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.DelegatingTestCommand.#ctor(NUnit.Framework.Internal.Commands.TestCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.Commands.DelegatingTestCommand"/> class.
            </summary>
            <param name="innerCommand">The inner command.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.DelegatingTestCommand.RunTestMethodInThreadAbortSafeZone(NUnit.Framework.Internal.TestExecutionContext,System.Action)">
            <summary>
            Runs the test with exception handling.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.DisposeFixtureCommand">
            <summary>
            OneTimeTearDownCommand performs any teardown actions
            specified for a suite and calls Dispose on the user
            test object, if any.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.DisposeFixtureCommand.#ctor(NUnit.Framework.Internal.Commands.TestCommand)">
            <summary>
            Construct a OneTimeTearDownCommand
            </summary>
            <param name="innerCommand">The command wrapped by this command</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.EmptyTestCommand">
            <summary>
            EmptyTestCommand is a TestCommand that does nothing. It simply
            returns the current result from the context when executed. We
            use it to avoid testing for null when executing a chain of
            DelegatingTestCommands.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.EmptyTestCommand.#ctor(NUnit.Framework.Internal.Test)">
            <summary>
            Construct a NullCommand for a test
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.EmptyTestCommand.Execute(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Execute the command
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.FixturePerTestCaseCommand">
            <summary>
            ConstructFixtureCommand constructs the user test object if necessary.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.FixturePerTestCaseCommand.#ctor(NUnit.Framework.Internal.Commands.TestCommand)">
            <summary>
            Handles the construction and disposement of a fixture per test case
            </summary>
            <param name="innerCommand">The inner command to which the command applies</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.MaxTimeCommand">
            <summary>
            <see cref="T:NUnit.Framework.Internal.Commands.MaxTimeCommand" /> adjusts the result of a successful test
            to a failure if the elapsed time has exceeded the specified maximum
            time allowed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.MaxTimeCommand.#ctor(NUnit.Framework.Internal.Commands.TestCommand,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.Commands.MaxTimeCommand"/> class.
            </summary>
            <param name="innerCommand">The inner command.</param>
            <param name="maxTime">The max time allowed in milliseconds</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.OneTimeSetUpCommand">
            <summary>
            OneTimeSetUpCommand runs any one-time setup methods for a suite,
            constructing the user test object if necessary.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.OneTimeSetUpCommand.#ctor(NUnit.Framework.Internal.Commands.TestCommand,NUnit.Framework.Internal.Commands.SetUpTearDownItem)">
            <summary>
            Constructs a OneTimeSetUpCommand for a suite
            </summary>
            <param name="innerCommand">The inner command to which the command applies</param>
            <param name="setUpTearDown">A SetUpTearDownList for use by the command</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.OneTimeTearDownCommand">
            <summary>
            OneTimeTearDownCommand performs any teardown actions
            specified for a suite and calls Dispose on the user
            test object, if any.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.OneTimeTearDownCommand.#ctor(NUnit.Framework.Internal.Commands.TestCommand,NUnit.Framework.Internal.Commands.SetUpTearDownItem)">
            <summary>
            Construct a OneTimeTearDownCommand
            </summary>
            <param name="innerCommand">The command wrapped by this command</param>
            <param name="setUpTearDownItem">A SetUpTearDownList for use by the command</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.SetUpTearDownCommand">
            <summary>
            SetUpTearDownCommand runs SetUp methods for a suite,
            runs the test and then runs TearDown methods.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.SetUpTearDownCommand.#ctor(NUnit.Framework.Internal.Commands.TestCommand,NUnit.Framework.Internal.Commands.SetUpTearDownItem)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.Commands.SetUpTearDownCommand"/> class.
            </summary>
            <param name="innerCommand">The inner command.</param>
            <param name="setUpTearDown">List of setup/teardown items</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.SetUpTearDownItem">
            <summary>
            SetUpTearDownItem holds the setup and teardown methods
            for a single level of the inheritance hierarchy.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.SetUpTearDownItem.#ctor(System.Collections.Generic.IList{NUnit.Framework.Interfaces.IMethodInfo},System.Collections.Generic.IList{NUnit.Framework.Interfaces.IMethodInfo},NUnit.Framework.Internal.Execution.IMethodValidator)">
            <summary>
            Construct a SetUpTearDownNode
            </summary>
            <param name="setUpMethods">A list of setup methods for this level</param>
            <param name="tearDownMethods">A list teardown methods for this level</param>
            <param name="methodValidator">A method validator to validate each method before calling.</param>
        </member>
        <member name="P:NUnit.Framework.Internal.Commands.SetUpTearDownItem.HasMethods">
            <summary>
             Returns true if this level has any methods at all.
             This flag is used to discard levels that do nothing.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.SetUpTearDownItem.RunSetUp(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Run SetUp on this level.
            </summary>
            <param name="context">The execution context to use for running.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.SetUpTearDownItem.RunTearDown(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Run TearDown for this level.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.SkipCommand">
            <summary>
            TODO: Documentation needed for class
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.SkipCommand.#ctor(NUnit.Framework.Internal.Test)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.Commands.SkipCommand"/> class.
            </summary>
            <param name="test">The test being skipped.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.SkipCommand.Execute(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Overridden to simply set the CurrentResult to the
            appropriate Skipped state.
            </summary>
            <param name="context">The execution context for the test</param>
            <returns>A TestResult</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.TestActionCommand">
            <summary>
            TestActionCommand handles a single ITestAction applied
            to a test. It runs the BeforeTest method, then runs the
            test and finally runs the AfterTest method.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.TestActionCommand.#ctor(NUnit.Framework.Internal.Commands.TestCommand,NUnit.Framework.ITestAction)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.Commands.TestActionCommand"/> class.
            </summary>
            <param name="innerCommand">The inner command.</param>
            <param name="action">The TestAction with which to wrap the inner command.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.TestActionItem">
            <summary>
            TestActionItem wraps a single execution of an ITestAction.
            Its primary purpose is to track whether the BeforeTest
            method has been called and suppress calling the
            AfterTest method if it has not. This is necessary when
            ITestActions are used before and after a CompositeWorkItem,
            since the OneTimeSetUpCommand and OneTimeTearDownCommand
            are separate command chains. By sharing a TestActionItem
            between the setup and teardown chains, the two calls can
            be coordinated.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.TestActionItem.#ctor(NUnit.Framework.ITestAction)">
            <summary>
            Construct a TestActionItem
            </summary>
            <param name="action">The ITestAction to be included</param>
        </member>
        <member name="P:NUnit.Framework.Internal.Commands.TestActionItem.BeforeTestWasRun">
            <summary>
            Get flag indicating if the BeforeTest entry was already called.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.TestActionItem.BeforeTest(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Run the BeforeTest method of the action and remember that it has been run.
            </summary>
            <param name="test">The test to which the action applies</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.TestActionItem.AfterTest(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Run the AfterTest action, but only if the BeforeTest
            action was actually run.
            </summary>
            <param name="test">The test to which the action applies</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.TestCommand">
            <summary>
            TestCommand is the abstract base class for all test commands
            in the framework. A TestCommand represents a single stage in
            the execution of a test, e.g.: SetUp/TearDown, checking for
            Timeout, verifying the returned result from a method, etc.
            
            TestCommands may decorate other test commands so that the
            execution of a lower-level command is nested within that
            of a higher level command. All nested commands are executed
            synchronously, as a single unit. Scheduling test execution
            on separate threads is handled at a higher level, using the
            task dispatcher.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.TestCommand.#ctor(NUnit.Framework.Internal.Test)">
            <summary>
            Construct a TestCommand for a test.
            </summary>
            <param name="test">The test to be executed</param>
        </member>
        <member name="P:NUnit.Framework.Internal.Commands.TestCommand.Test">
            <summary>
            Gets the test associated with this command.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.TestCommand.Execute(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Runs the test in a specified context, returning a TestResult.
            </summary>
            <param name="context">The TestExecutionContext to be used for running the test.</param>
            <returns>A TestResult</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.TestMethodCommand">
            <summary>
            TestMethodCommand is the lowest level concrete command
            used to run actual test cases.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.TestMethodCommand.#ctor(NUnit.Framework.Internal.TestMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.Commands.TestMethodCommand"/> class.
            </summary>
            <param name="testMethod">The test.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.TestMethodCommand.Execute(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Runs the test, saving a TestResult in the execution context, as
            well as returning it. If the test has an expected result, it
            is asserts on that value. Since failed tests and errors throw
            an exception, this command must be wrapped in an outer command,
            will handle that exception and records the failure. This role
            is usually played by the SetUpTearDown command.
            </summary>
            <param name="context">The execution context</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.TheoryResultCommand">
            <summary>
            TheoryResultCommand adjusts the result of a Theory so that
            it fails if all the results were inconclusive.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.TheoryResultCommand.#ctor(NUnit.Framework.Internal.Commands.TestCommand)">
            <summary>
            Constructs a TheoryResultCommand 
            </summary>
            <param name="command">The command to be wrapped by this one</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Commands.TimeoutCommand">
            <summary>
            <see cref="T:NUnit.Framework.Internal.Commands.TimeoutCommand"/> creates a timer in order to cancel
            a test if it exceeds a specified time and adjusts
            the test result if it did time out.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.TimeoutCommand.#ctor(NUnit.Framework.Internal.Commands.TestCommand,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.Commands.TimeoutCommand"/> class.
            </summary>
            <param name="innerCommand">The inner command</param>
            <param name="timeout">Timeout value</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.TimeoutCommand.#ctor(NUnit.Framework.Internal.Commands.TestCommand,System.Int32,NUnit.Framework.Internal.Abstractions.IDebugger)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.Commands.TimeoutCommand"/> class.
            </summary>
            <param name="innerCommand">The inner command</param>
            <param name="timeout">Timeout value</param>
            <param name="debugger">An <see cref="T:NUnit.Framework.Internal.Abstractions.IDebugger" /> instance</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Commands.TimeoutCommand.Execute(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Runs the test, saving a TestResult in the supplied TestExecutionContext.
            </summary>
            <param name="context">The context in which the test should run.</param>
            <returns>A TestResult</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.ConstraintUtils">
            <summary>
            Provides methods to support consistent checking in constraints.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.ConstraintUtils.RequireActual``1(System.Object,System.String,System.Boolean)">
            <summary>
            Requires that the provided object is actually of the type required.
            </summary>
            <param name="actual">The object to verify.</param>
            <param name="paramName">Name of the parameter as passed into the checking method.</param>
            <param name="allowNull">
            If <see langword="true"/> and <typeparamref name="T"/> can be null, returns null rather than throwing when <paramref name="actual"/> is null.
            If <typeparamref name="T"/> cannot be null, this parameter is ignored.</param>
            <typeparam name="T">The type to require.</typeparam>
        </member>
        <member name="T:NUnit.Framework.Internal.CultureDetector">
            <summary>
            CultureDetector is a helper class used by NUnit to determine
            whether a test should be run based on the current culture.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.CultureDetector.#ctor">
            <summary>
            Default constructor uses the current culture.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.CultureDetector.#ctor(System.String)">
            <summary>
            Construct a CultureDetector for a particular culture for testing.
            </summary>
            <param name="culture">The culture to be used</param>
        </member>
        <member name="M:NUnit.Framework.Internal.CultureDetector.IsCultureSupported(System.String[])">
            <summary>
            Test to determine if one of a collection of cultures
            is being used currently.
            </summary>
            <param name="cultures"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.CultureDetector.IsCultureSupported(NUnit.Framework.CultureAttribute)">
            <summary>
            Tests to determine if the current culture is supported
            based on a culture attribute.
            </summary>
            <param name="cultureAttribute">The attribute to examine</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.CultureDetector.IsCultureSupported(System.String)">
            <summary>
            Test to determine if the a particular culture or comma-
            delimited set of cultures is in use.
            </summary>
            <param name="culture">Name of the culture or comma-separated list of culture ids</param>
            <returns>True if the culture is in use on the system</returns>
        </member>
        <member name="P:NUnit.Framework.Internal.CultureDetector.Reason">
            <summary>
            Return the last failure reason. Results are not
            defined if called before IsSupported( Attribute )
            is called.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.DefaultBlockingAwaitAdapter">
            <summary>
            Useful when wrapping awaiters whose <c>GetResult</c> method does not block until complete.
            Contains a default mechanism to implement <see cref="M:NUnit.Framework.Internal.AwaitAdapter.BlockUntilCompleted"/>
            via <see cref="P:NUnit.Framework.Internal.AwaitAdapter.IsCompleted"/> and <see cref="M:NUnit.Framework.Internal.AwaitAdapter.OnCompleted(System.Action)"/>.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.ExceptionHelper">
            <summary>
            ExceptionHelper provides static methods for working with exceptions
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.ExceptionHelper.Rethrow(System.Exception)">
            <summary>
            Rethrows an exception, preserving its stack trace
            </summary>
            <param name="exception">The exception to rethrow</param>
        </member>
        <member name="M:NUnit.Framework.Internal.ExceptionHelper.BuildMessage(System.Exception,System.Boolean)">
            <summary>
            Builds up a message, using the Message field of the specified exception
            as well as any InnerExceptions. Optionally excludes exception names,
            creating a more readable message.
            </summary>
            <param name="exception">The exception.</param>
            <param name="excludeExceptionNames">Flag indicating whether exception names should be excluded.</param>
            <returns>A combined message string.</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.ExceptionHelper.BuildStackTrace(System.Exception)">
            <summary>
            Builds up a message, using the Message field of the specified exception
            as well as any InnerExceptions.
            </summary>
            <param name="exception">The exception.</param>
            <returns>A combined stack trace.</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.ExceptionHelper.RecordException(System.Delegate,System.String)">
            <summary>
            Executes a parameterless synchronous or async delegate and returns the exception it throws, if any.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.CompositeWorkItem">
            <summary>
            A CompositeWorkItem represents a test suite and
            encapsulates the execution of the suite as well
            as all its child tests.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.CompositeWorkItem.Children">
            <summary>
            List of Child WorkItems
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.CompositeWorkItem.IsolateChildTests">
            <summary>
            Indicates whether this work item should use a separate dispatcher.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.CompositeWorkItem.#ctor(NUnit.Framework.Internal.TestSuite,NUnit.Framework.Interfaces.ITestFilter)">
            <summary>
            Construct a CompositeWorkItem for executing a test suite
            using a filter to select child tests.
            </summary>
            <param name="suite">The TestSuite to be executed</param>
            <param name="childFilter">A filter used to select child tests</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.CompositeWorkItem.PerformWork">
            <summary>
            Method that actually performs the work. Overridden
            in CompositeWorkItem to do one-time setup, run all child
            items and then dispatch the one-time teardown work item.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.CompositeWorkItem.OnAllChildItemsCompleted">
             <summary>
            
             </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.CompositeWorkItem.Cancel(System.Boolean)">
            <summary>
            Cancel (abort or stop) a CompositeWorkItem and all of its children
            </summary>
            <param name="force">true if the CompositeWorkItem and all of its children should be aborted, false if it should allow all currently running tests to complete</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.CompositeWorkItem.OneTimeTearDownWorkItem">
            <summary>
            OneTimeTearDownWorkItem represents the cleanup
            and one-time teardown phase of a CompositeWorkItem
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.CompositeWorkItem.OneTimeTearDownWorkItem.#ctor(NUnit.Framework.Internal.Execution.CompositeWorkItem)">
            <summary>
            Construct a OneTimeTearDownWOrkItem wrapping a CompositeWorkItem
            </summary>
            <param name="originalItem">The CompositeWorkItem being wrapped</param>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.CompositeWorkItem.OneTimeTearDownWorkItem.Name">
            <summary>
            The WorkItem name, overridden to indicate this is the teardown.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.CompositeWorkItem.OneTimeTearDownWorkItem.ExecutionStrategy">
            <summary>
            The ExecutionStrategy for use in running this work item
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.CompositeWorkItem.OneTimeTearDownWorkItem.Execute">
             <summary>
            
             </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.CompositeWorkItem.OneTimeTearDownWorkItem.PerformWork">
            <summary>
            PerformWork is not used in CompositeWorkItem
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.CompositeWorkItem.OneTimeTearDownWorkItem.WorkItemCancelled">
            <summary>
            WorkItemCancelled is called directly by the parallel dispatcher
            when a test suite is left hanging after a forced StopRun. We
            simulate WorkItemComplete() but without the ripple effect to
            higher level suites, since we are controlling it all directly.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.EventListenerTextWriter">
            <summary>
            EventListenerTextWriter sends text output to the currently active
            ITestEventListener in the form of a TestOutput object. If no event
            listener is active in the context, or if there is no context,
            the output is forwarded to the supplied default writer.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.#ctor(System.String,System.IO.TextWriter)">
            <summary>
            Construct an EventListenerTextWriter
            </summary>
            <param name="streamName">The name of the stream to use for events</param>
            <param name="defaultWriter">The default writer to use if no listener is available</param>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.EventListenerTextWriter.Encoding">
            <summary>
            Get the Encoding for this TextWriter
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write(System.String,System.Object[])">
            <summary>
            Write formatted string
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Write formatted string
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write(System.String,System.Object)">
            <summary>
            Write formatted string
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write(System.Object)">
            <summary>
            Write an object
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write(System.String)">
            <summary>
            Write a string
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write(System.Decimal)">
            <summary>
            Write a decimal
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write(System.Double)">
            <summary>
            Write a double
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write(System.String,System.Object,System.Object)">
            <summary>
            Write formatted string
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write(System.UInt64)">
            <summary>
            Write a ulong
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write(System.Int64)">
            <summary>
            Write a long
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write(System.UInt32)">
            <summary>
            Write a uint
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write(System.Int32)">
            <summary>
            Write an int
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write(System.Char)">
            <summary>
            Write a char
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write(System.Boolean)">
            <summary>
            Write a boolean
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Write chars
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write(System.Char[])">
            <summary>
            Write chars
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write(System.Single)">
            <summary>
            Write a float
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine(System.String)">
            <summary>
            Write a string with newline
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine(System.Object)">
            <summary>
            Write an object with newline
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine(System.String,System.Object[])">
            <summary>
            Write formatted string with newline
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            Write formatted string with newline
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Write formatted string with newline
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine(System.Decimal)">
            <summary>
            Write a decimal with newline
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine(System.String,System.Object)">
            <summary>
            Write a formatted string with newline
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine(System.Double)">
            <summary>
            Write a double with newline
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine(System.UInt32)">
            <summary>
            Write a uint with newline
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine(System.UInt64)">
            <summary>
            Write a ulong with newline
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine(System.Int64)">
            <summary>
            Write a long with newline
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine(System.Int32)">
            <summary>
            Write an int with newline
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine(System.Boolean)">
            <summary>
            Write a bool with newline
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
            <summary>
            Write chars with newline
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine(System.Char[])">
            <summary>
            Write chars with newline
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine(System.Char)">
            <summary>
            Write a char with newline
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine(System.Single)">
            <summary>
            Write a float with newline
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine">
            <summary>
            Write newline
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.EventPumpState">
            <summary>
            The EventPumpState enum represents the state of an
            EventPump.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Execution.EventPumpState.Stopped">
            <summary>
            The pump is stopped
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Execution.EventPumpState.Pumping">
            <summary>
            The pump is pumping events with no stop requested
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Execution.EventPumpState.Stopping">
            <summary>
            The pump is pumping events but a stop has been requested
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.EventPump">
            <summary>
            EventPump pulls events out of an EventQueue and sends
            them to a listener. It is used to send events back to
            the client without using the CallContext of the test
            runner thread.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Execution.EventPump._eventListener">
            <summary>
            The downstream listener to which we send events
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Execution.EventPump._events">
            <summary>
            The queue that holds our events
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Execution.EventPump._pumpThread">
            <summary>
            Thread to do the pumping
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Execution.EventPump._pumpState">
            <summary>
            The current state of the event pump
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventPump.#ctor(NUnit.Framework.Interfaces.ITestListener,NUnit.Framework.Internal.Execution.EventQueue)">
            <summary>
            Constructor
            </summary>
            <param name="eventListener">The EventListener to receive events</param>
            <param name="events">The event queue to pull events from</param>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.EventPump.PumpState">
            <summary>
            Gets or sets the current state of the pump
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.EventPump.Name">
            <summary>
            Gets or sets the name of this EventPump
            (used only internally and for testing).
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventPump.Dispose">
            <summary>
            Dispose stops the pump
            Disposes the used WaitHandle, too.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventPump.Start">
            <summary>
            Start the pump
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventPump.Stop">
            <summary>
            Tell the pump to stop after emptying the queue.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventPump.PumpThreadProc">
            <summary>
            Our thread proc for removing items from the event
            queue and sending them on. Note that this would
            need to do more locking if any other thread were
            removing events from the queue.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.Event">
            <summary>
            NUnit.Core.Event is the abstract base for all stored events.
            An Event is the stored representation of a call to the
            ITestListener interface and is used to record such calls
            or to queue them for forwarding on another thread or at
            a later time.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.Event.Send(NUnit.Framework.Interfaces.ITestListener)">
            <summary>
            The Send method is implemented by derived classes to send the event to the specified listener.
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.TestStartedEvent">
            <summary>
            TestStartedEvent holds information needed to call the TestStarted method.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.TestStartedEvent.#ctor(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.Execution.TestStartedEvent"/> class.
            </summary>
            <param name="test">The test.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.TestStartedEvent.Send(NUnit.Framework.Interfaces.ITestListener)">
            <summary>
            Calls TestStarted on the specified listener.
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.TestFinishedEvent">
            <summary>
            TestFinishedEvent holds information needed to call the TestFinished method.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.TestFinishedEvent.#ctor(NUnit.Framework.Interfaces.ITestResult)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.Execution.TestFinishedEvent"/> class.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.TestFinishedEvent.Send(NUnit.Framework.Interfaces.ITestListener)">
            <summary>
            Calls TestFinished on the specified listener.
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.TestOutputEvent">
            <summary>
            TestOutputEvent holds information needed to call the TestOutput method.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.TestOutputEvent.#ctor(NUnit.Framework.Interfaces.TestOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.Execution.TestOutputEvent"/> class.
            </summary>
            <param name="output">The output object.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.TestOutputEvent.Send(NUnit.Framework.Interfaces.ITestListener)">
            <summary>
            Calls TestOutput on the specified listener.
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.TestMessageEvent">
            <summary>
            TestMessageEvent holds information needed to call the SendMessage method.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.TestMessageEvent.#ctor(NUnit.Framework.Interfaces.TestMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.Execution.TestMessageEvent"/> class.
            </summary>
            <param name="testMessage">The test message object.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.TestMessageEvent.Send(NUnit.Framework.Interfaces.ITestListener)">
            <summary>
            Calls <see cref="M:NUnit.Framework.Internal.Execution.TestMessageEvent.Send(NUnit.Framework.Interfaces.ITestListener)"/> on the specified listener.
            </summary>
            <param name="listener">The listener.</param>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.TestMessageEvent.TestMessage">
            <summary>
            Holds <see cref="P:NUnit.Framework.Internal.Execution.TestMessageEvent.TestMessage"/> object for sending to all listeners
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.EventQueue">
            <summary>
            Implements a queue of work items each of which
            is queued as a WaitCallback.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.EventQueue.Count">
            <summary>
            Gets the count of items in the queue.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventQueue.Enqueue(NUnit.Framework.Internal.Execution.Event)">
            <summary>
            Enqueues the specified event
            </summary>
            <param name="e">The event to enqueue.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventQueue.Dequeue(System.Boolean)">
            <summary>
            Removes the first element from the queue and returns it (or <see langword="null"/>).
            </summary>
            <param name="blockWhenEmpty">
            If <see langword="true"/> and the queue is empty, the calling thread is blocked until
            either an element is enqueued, or <see cref="M:NUnit.Framework.Internal.Execution.EventQueue.Stop"/> is called.
            </param>
            <returns>
            <list type="bullet">
              <item>
                <term>If the queue not empty</term>
                <description>the first element.</description>
              </item>
              <item>
                <term>otherwise, if <paramref name="blockWhenEmpty"/>==<see langword="false"/>
                  or <see cref="M:NUnit.Framework.Internal.Execution.EventQueue.Stop"/> has been called</term>
                <description><see langword="null"/>.</description>
              </item>
            </list>
            </returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.EventQueue.Stop">
            <summary>
            Stop processing of the queue
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.IMethodValidator">
            <summary>
            Validates method to execute.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.IMethodValidator.Validate(System.Reflection.MethodInfo)">
            <summary>
            Determines whether a method is allowed to execute and throws an exception otherwise.
            </summary>
            <param name="method">The method to validate.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.IWorkItemDispatcher">
            <summary>
            An IWorkItemDispatcher handles execution of work items.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.IWorkItemDispatcher.LevelOfParallelism">
            <summary>
            The level of parallelism supported. Zero if not supported.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.IWorkItemDispatcher.Start(NUnit.Framework.Internal.Execution.WorkItem)">
            <summary>
            Start execution, performing any initialization. Sets
            the top level work item and dispatches it.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.IWorkItemDispatcher.Dispatch(NUnit.Framework.Internal.Execution.WorkItem)">
            <summary>
            Dispatch a single work item for execution. The first
            work item dispatched is saved as the top-level
            work item and used when stopping the run.
            </summary>
            <param name="work">The item to dispatch</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.IWorkItemDispatcher.CancelRun(System.Boolean)">
            <summary>
            Cancel the ongoing run completely.
            If no run is in process, the call has no effect.
            </summary>
            <param name="force">true if the IWorkItemDispatcher should abort all currently running WorkItems, false if it should allow all currently running WorkItems to complete</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.MainThreadWorkItemDispatcher">
            <summary>
            MainThreadWorkItemDispatcher handles execution of WorkItems by
            directly executing them on the main thread. This is different
            from the SimpleWorkItemDispatcher where the work item is dispatched
            onto its own thread.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.MainThreadWorkItemDispatcher.LevelOfParallelism">
            <summary>
             The level of parallelism supported
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.MainThreadWorkItemDispatcher.Start(NUnit.Framework.Internal.Execution.WorkItem)">
            <summary>
            Start execution, dispatching the top level
            work into the main thread.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.MainThreadWorkItemDispatcher.Dispatch(NUnit.Framework.Internal.Execution.WorkItem)">
            <summary>
            Dispatch a single work item for execution by
            executing it directly.
            </summary>
            <param name="work">The item to dispatch</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.MainThreadWorkItemDispatcher.CancelRun(System.Boolean)">
            <summary>
            This method is not supported for 
            this dispatcher. Using it will throw a
            NotSupportedException.
            </summary>
            <param name="force">Not used</param>
            <exception cref="T:System.NotSupportedException">If used, it will always throw this.</exception>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.ParallelExecutionStrategy">
            <summary>
            Enumeration representing the strategy to follow in executing a work item.
            The value is only relevant when running under the parallel dispatcher.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Execution.ParallelExecutionStrategy.Direct">
            <summary>
            Run directly on same thread
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Execution.ParallelExecutionStrategy.Parallel">
            <summary>
            Enqueue for parallel execution
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Execution.ParallelExecutionStrategy.NonParallel">
            <summary>
            Enqueue for non-parallel execution
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.ParallelWorkItemDispatcher">
            <summary>
            ParallelWorkItemDispatcher handles execution of work items by
            queuing them for worker threads to process.
            </summary>
        </member>
        <member name="E:NUnit.Framework.Internal.Execution.ParallelWorkItemDispatcher.ShiftStarting">
            <summary>
            Event raised whenever a shift is starting.
            </summary>
        </member>
        <member name="E:NUnit.Framework.Internal.Execution.ParallelWorkItemDispatcher.ShiftFinished">
            <summary>
            Event raised whenever a shift has ended.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.ParallelWorkItemDispatcher.#ctor(System.Int32)">
            <summary>
            Construct a ParallelWorkItemDispatcher
            </summary>
            <param name="levelOfParallelism">Number of workers to use</param>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.ParallelWorkItemDispatcher.LevelOfParallelism">
            <summary>
            Number of parallel worker threads
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.ParallelWorkItemDispatcher.Shifts">
            <summary>
            Enumerates all the shifts supported by the dispatcher
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.ParallelWorkItemDispatcher.Queues">
            <summary>
            Enumerates all the Queues supported by the dispatcher
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.ParallelWorkItemDispatcher.Start(NUnit.Framework.Internal.Execution.WorkItem)">
            <summary>
            Start execution, setting the top level work,
            enqueuing it and starting a shift to execute it.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.ParallelWorkItemDispatcher.Dispatch(NUnit.Framework.Internal.Execution.WorkItem)">
            <summary>
            Dispatch a single work item for execution. The first
            work item dispatched is saved as the top-level
            work item and used when stopping the run.
            </summary>
            <param name="work">The item to dispatch</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.ParallelWorkItemDispatcher.CancelRun(System.Boolean)">
            <summary>
            Cancel the ongoing run completely.
            If no run is in process, the call has no effect.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.ParallelWorkItemDispatcher.IsolateQueues(NUnit.Framework.Internal.Execution.WorkItem)">
            <summary>
            Save the state of the queues and create a new isolated set
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.ParallelWorkItemDispatcher.TryRestoreQueues">
            <summary>
            Try to remove isolated queues and restore old ones
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.QueuingEventListener">
            <summary>
            QueuingEventListener uses an EventQueue to store any
            events received on its EventListener interface.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.QueuingEventListener.Events">
            <summary>
            The EventQueue created and filled by this listener
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.QueuingEventListener.#ctor">
            <summary>
            Construct a QueuingEventListener
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.QueuingEventListener.TestStarted(NUnit.Framework.Interfaces.ITest)">
            <summary>
            A test has started
            </summary>
            <param name="test">The test that is starting</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.QueuingEventListener.TestFinished(NUnit.Framework.Interfaces.ITestResult)">
            <summary>
            A test case finished
            </summary>
            <param name="result">Result of the test case</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.QueuingEventListener.TestOutput(NUnit.Framework.Interfaces.TestOutput)">
            <summary>
            Called when a test produces output for immediate display
            </summary>
            <param name="output">A TestOutput object containing the text to display</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.QueuingEventListener.SendMessage(NUnit.Framework.Interfaces.TestMessage)">
            <summary>
            Called when a test produces a message to be sent to listeners
            </summary>
            <param name="message">A <see cref="T:NUnit.Framework.Interfaces.TestMessage"/> object containing the text to send</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.SimpleWorkItem">
            <summary>
            A SimpleWorkItem represents a single test case and is
            marked as completed immediately upon execution. This
            class is also used for skipped or ignored test suites.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.SimpleWorkItem.#ctor(NUnit.Framework.Internal.TestMethod,NUnit.Framework.Interfaces.ITestFilter)">
            <summary>
            Construct a simple work item for a test.
            </summary>
            <param name="test">The test to be executed</param>
            <param name="filter">The filter used to select this test</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.SimpleWorkItem.#ctor(NUnit.Framework.Internal.TestMethod,NUnit.Framework.Interfaces.ITestFilter,NUnit.Framework.Internal.Abstractions.IDebugger)">
            <summary>
            Construct a simple work item for a test.
            </summary>
            <param name="test">The test to be executed</param>
            <param name="filter">The filter used to select this test</param>
            <param name="debugger">An <see cref="T:NUnit.Framework.Internal.Abstractions.IDebugger"/> instance</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.SimpleWorkItem.PerformWork">
            <summary>
            Method that performs actually performs the work.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.SimpleWorkItem.MakeTestCommand">
            <summary>
            Creates a test command for use in running this test.
            </summary>
            <returns>A TestCommand</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.SimpleWorkItemDispatcher">
            <summary>
            SimpleWorkItemDispatcher handles execution of WorkItems by
            directly executing them. It is provided so that a dispatcher
            is always available in the context, thereby simplifying the
            code needed to run child tests.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.SimpleWorkItemDispatcher.LevelOfParallelism">
            <summary>
             The level of parallelism supported
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.SimpleWorkItemDispatcher.Start(NUnit.Framework.Internal.Execution.WorkItem)">
            <summary>
            Start execution, creating the execution thread,
            setting the top level work and dispatching it.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.SimpleWorkItemDispatcher.Dispatch(NUnit.Framework.Internal.Execution.WorkItem)">
            <summary>
            Dispatch a single work item for execution by
            executing it directly.
            </summary>
            <param name="work">The item to dispatch</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.SimpleWorkItemDispatcher.CancelRun(System.Boolean)">
            <summary>
            Cancel (abort or stop) the ongoing run.
            If no run is in process, the call has no effect.
            </summary>
            <param name="force">true if the run should be aborted, false if it should allow its currently running test to complete</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.StaticMethodValidator">
            <summary>
            Checks whether the method to execute is static.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.StaticMethodValidator.#ctor(System.String)">
            <summary>
            Construct a StaticMethodValidator.
            </summary>
            <param name="failMessage">The error message to output in case the validation fails.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.StaticMethodValidator.Validate(System.Reflection.MethodInfo)">
            <summary>
            Determines whether a method to execute is static and throws an InvalidOperationException otherwise.
            </summary>
            <param name="method">The method to validate.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.TestWorker">
            <summary>
            A TestWorker pulls work items from a queue
            and executes them.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.TestWorker.TestWorkerEventHandler">
            <summary>
            Event handler for TestWorker events
            </summary>
            <param name="worker">The TestWorker sending the event</param>
            <param name="work">The WorkItem that caused the event</param>
        </member>
        <member name="E:NUnit.Framework.Internal.Execution.TestWorker.Busy">
            <summary>
            Event signaled immediately before executing a WorkItem
            </summary>
        </member>
        <member name="E:NUnit.Framework.Internal.Execution.TestWorker.Idle">
            <summary>
            Event signaled immediately after executing a WorkItem
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.TestWorker.#ctor(NUnit.Framework.Internal.Execution.WorkItemQueue,System.String)">
            <summary>
            Construct a new TestWorker.
            </summary>
            <param name="queue">The queue from which to pull work items</param>
            <param name="name">The name of this worker</param>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.TestWorker.WorkQueue">
            <summary>
            The WorkItemQueue from which this worker pulls WorkItems
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.TestWorker.Name">
            <summary>
            The name of this worker - also used for the thread
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.TestWorker.IsAlive">
            <summary>
            Indicates whether the worker thread is running
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Execution.TestWorker._currentWorkItem">
            <summary>
            Our ThreadProc, which pulls and runs tests in a loop
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.TestWorker.Start">
            <summary>
            Create thread and start processing work items.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.TestWorker.Cancel(System.Boolean)">
            <summary>
            Stop the thread, either immediately or after finishing the current WorkItem
            </summary>
            <param name="force">true if the thread should be aborted, false if it should allow the currently running test to complete</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.TextCapture">
            <summary>
            The TextCapture class intercepts console output and writes it
            to the current execution context, if one is present on the thread.
            If no execution context is found, the output is written to a
            default destination, normally the original destination of the
            intercepted output.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.TextCapture.#ctor(System.IO.TextWriter)">
            <summary>
            Construct a TextCapture object
            </summary>
            <param name="defaultWriter">The default destination for non-intercepted output</param>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.TextCapture.Encoding">
            <summary>
            Gets the Encoding in use by this TextWriter
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.TextCapture.Write(System.Char)">
            <summary>
            Writes a single character
            </summary>
            <param name="value">The char to write</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.TextCapture.Write(System.String)">
            <summary>
            Writes a string
            </summary>
            <param name="value">The string to write</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.TextCapture.WriteLine(System.String)">
            <summary>
            Writes a string followed by a line terminator
            </summary>
            <param name="value">The string to write</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.WorkItem">
             <summary>
             A WorkItem may be an individual test case, a fixture or
             a higher level grouping of tests. All WorkItems inherit
             from the abstract WorkItem class, which uses the template
             pattern to allow derived classes to perform work in
             whatever way is needed.
            
             A WorkItem is created with a particular TestExecutionContext
             and is responsible for re-establishing that context in the
             current thread before it begins or resumes execution.
             </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkItem.#ctor(NUnit.Framework.Internal.Test,NUnit.Framework.Interfaces.ITestFilter)">
            <summary>
            Construct a WorkItem for a particular test.
            </summary>
            <param name="test">The test that the WorkItem will run</param>
            <param name="filter">Filter used to include or exclude child items</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkItem.#ctor(NUnit.Framework.Internal.Execution.WorkItem)">
            <summary>
            Construct a work Item that wraps another work Item.
            Wrapper items are used to represent independently
            dispatched tasks, which form part of the execution
            of a single test, such as OneTimeTearDown.
            </summary>
            <param name="wrappedItem">The WorkItem being wrapped</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkItem.InitializeContext(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Initialize the TestExecutionContext. This must be done
            before executing the WorkItem.
            </summary>
            <remarks>
            Originally, the context was provided in the constructor
            but delaying initialization of the context until the item
            is about to be dispatched allows changes in the parent
            context during OneTimeSetUp to be reflected in the child.
            </remarks>
            <param name="context">The TestExecutionContext to use</param>
        </member>
        <member name="E:NUnit.Framework.Internal.Execution.WorkItem.Completed">
            <summary>
            Event triggered when the item is complete
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.WorkItem.State">
            <summary>
            Gets the current state of the WorkItem
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.WorkItem.Test">
            <summary>
            The test being executed by the work item
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.WorkItem.Name">
            <summary>
            The name of the work item - defaults to the Test name.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.WorkItem.Filter">
            <summary>
            Filter used to include or exclude child tests
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.WorkItem.Context">
            <summary>
            The execution context
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.WorkItem.TestWorker">
            <summary>
            The worker executing this item.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.WorkItem.ExecutionStrategy">
            <summary>
            The ParallelExecutionStrategy to use for this work item
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.WorkItem.IsolateChildTests">
            <summary>
            Indicates whether this work item should use a separate dispatcher.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.WorkItem.Result">
            <summary>
            The test result
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.WorkItem.ParallelScope">
            <summary>
            Gets the ParallelScope associated with the test, if any,
            otherwise returning ParallelScope.Default;
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkItem.Execute">
            <summary>
            Execute the current work item, including any
            child work items.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkItem.WaitForCompletion">
            <summary>
            Wait until the execution of this item is complete
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkItem.MarkNotRunnable(System.String)">
            <summary>
            Marks the WorkItem as NotRunnable.
            </summary>
            <param name="reason">Reason for test being NotRunnable.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkItem.Cancel(System.Boolean)">
            <summary>
            Cancel (abort or stop) a WorkItem
            </summary>
            <param name="force">true if the WorkItem should be aborted, false if it should run to completion</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkItem.Dispose">
            <summary>
            Standard Dispose
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkItem.PerformWork">
            <summary>
            Method that performs actually performs the work. It should
            set the State to WorkItemState.Complete when done.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkItem.WorkItemComplete">
            <summary>
            Method called by the derived class when all work is complete
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkItem.BuildSetUpTearDownList(NUnit.Framework.Interfaces.IMethodInfo[],NUnit.Framework.Interfaces.IMethodInfo[],NUnit.Framework.Internal.Execution.IMethodValidator)">
            <summary>
            Builds the set up tear down list.
            </summary>
            <param name="setUpMethods">Unsorted array of setup MethodInfos.</param>
            <param name="tearDownMethods">Unsorted array of teardown MethodInfos.</param>
            <param name="methodValidator">Method validator used before each method execution.</param>
            <returns>A list of SetUpTearDownItems</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkItem.ChangeResult(NUnit.Framework.Interfaces.ResultState,System.String)">
            <summary>
            Changes the result of the test, logging the old and new states
            </summary>
            <param name="resultState">The new ResultState</param>
            <param name="message">The new message</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkItem.GetTargetApartment(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Recursively walks up the test hierarchy to see if the
            <see cref="T:System.Threading.ApartmentState"/> has been set on any of the parent tests.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.WorkItemBuilder">
            <summary>
            WorkItemBuilder class knows how to build a tree of work items from a tree of tests
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkItemBuilder.CreateWorkItem(NUnit.Framework.Interfaces.ITest,NUnit.Framework.Interfaces.ITestFilter,System.Boolean)">
            <summary>
            Creates a work item.
            </summary>
            <param name="test">The test for which this WorkItem is being created.</param>
            <param name="filter">The filter to be used in selecting any child Tests.</param>
            <param name="recursive">True if child work items should be created and added.</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkItemBuilder.CreateWorkItem(NUnit.Framework.Interfaces.ITest,NUnit.Framework.Interfaces.ITestFilter,NUnit.Framework.Internal.Abstractions.IDebugger,System.Boolean,System.Boolean)">
            <summary>
            Creates a work item.
            </summary>
            <param name="test">The test for which this WorkItem is being created.</param>
            <param name="filter">The filter to be used in selecting any child Tests.</param>
            <param name="debugger">An <see cref="T:NUnit.Framework.Internal.Abstractions.IDebugger" /> instance.</param>
            <param name="recursive">True if child work items should be created and added.</param>
            <param name="root"><see langword="true"/> if work item needs to be created unconditionally, if <see langword="false"/> <see langword="null"/> will be returned for tests that don't match the filter.</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkItemBuilder.WorkItemOrderComparer.Compare(NUnit.Framework.Internal.Execution.WorkItem,NUnit.Framework.Internal.Execution.WorkItem)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <returns>
            A signed integer that indicates the relative values of <paramref name="x"/> and <paramref name="y"/>, as shown in the following table.Value Meaning Less than zero<paramref name="x"/> is less than <paramref name="y"/>.Zero<paramref name="x"/> equals <paramref name="y"/>.Greater than zero<paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
            <param name="x">The first object to compare.</param><param name="y">The second object to compare.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.WorkItemQueueState">
            <summary>
            WorkItemQueueState indicates the current state of a WorkItemQueue
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Execution.WorkItemQueueState.Paused">
            <summary>
            The queue is paused
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Execution.WorkItemQueueState.Running">
            <summary>
            The queue is running
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Execution.WorkItemQueueState.Stopped">
            <summary>
            The queue is stopped
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.WorkItemQueue">
            <summary>
            A WorkItemQueue holds work items that are ready to
            be run, either initially or after some dependency
            has been satisfied.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkItemQueue.#ctor(System.String,System.Boolean,System.Threading.ApartmentState)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.Execution.WorkItemQueue"/> class.
            </summary>
            <param name="name">The name of the queue.</param>
            <param name="isParallel">Flag indicating whether this is a parallel queue</param>
            <param name="apartment">ApartmentState to use for items on this queue</param>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.WorkItemQueue.Name">
            <summary>
            Gets the name of the work item queue.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.WorkItemQueue.IsParallelQueue">
            <summary>
            Gets a flag indicating whether this queue is used for parallel execution
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.WorkItemQueue.TargetApartment">
            <summary>
            Gets the target ApartmentState for work items on this queue
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.WorkItemQueue.ItemsProcessed">
            <summary>
            Gets the total number of items processed so far
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.WorkItemQueue.State">
            <summary>
            Gets the current state of the queue
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.WorkItemQueue.IsEmpty">
            <summary>
            Get a bool indicating whether the queue is empty.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkItemQueue.Enqueue(NUnit.Framework.Internal.Execution.WorkItem)">
            <summary>
            Enqueue a WorkItem to be processed
            </summary>
            <param name="work">The WorkItem to process</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkItemQueue.Enqueue(NUnit.Framework.Internal.Execution.WorkItem,System.Int32)">
            <summary>
            Enqueue a WorkItem to be processed - internal for testing
            </summary>
            <param name="work">The WorkItem to process</param>
            <param name="priority">The priority at which to process the item</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkItemQueue.Dequeue">
            <summary>
            Dequeue a WorkItem for processing
            </summary>
            <returns>A WorkItem or null if the queue has stopped</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkItemQueue.Start">
            <summary>
             Start or restart processing of items from the queue
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkItemQueue.Stop">
            <summary>
            Signal the queue to stop
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkItemQueue.Pause">
            <summary>
            Pause the queue for restarting later
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkItemQueue.Save">
            <summary>
            Save the current inner queue and create new ones for use by
            a non-parallel fixture with parallel children.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkItemQueue.Restore">
            <summary>
            Restore the inner queue that was previously saved
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.WorkItemState">
            <summary>
            The current state of a work item
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Execution.WorkItemState.Ready">
            <summary>
            Ready to run or continue
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Execution.WorkItemState.Running">
            <summary>
            Work Item is executing
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Execution.WorkItemState.Complete">
            <summary>
            Complete
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.ShiftChangeEventHandler">
            <summary>
            Handler for ShiftChange events.
            </summary>
            <param name="shift">The shift that is starting or ending.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Execution.WorkShift">
             <summary>
             The dispatcher needs to do different things at different,
             non-overlapped times. For example, non-parallel tests may
             not be run at the same time as parallel tests. We model
             this using the metaphor of a working shift. The WorkShift
             class associates one or more WorkItemQueues with one or
             more TestWorkers.
            
             Work in the queues is processed until all queues are empty
             and all workers are idle. Both tests are needed because a
             worker that is busy may end up adding more work to one of
             the queues. At that point, the shift is over and another
             shift may begin. This cycle continues until all the tests
             have been run.
             </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkShift.#ctor(System.String)">
            <summary>
            Construct a WorkShift
            </summary>
        </member>
        <member name="E:NUnit.Framework.Internal.Execution.WorkShift.EndOfShift">
            <summary>
            Event that fires when the shift has ended
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.WorkShift.Name">
            <summary>
            The Name of this shift
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.WorkShift.IsActive">
            <summary>
            Gets a flag indicating whether the shift is currently active
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.WorkShift.HasWork">
            <summary>
            Gets a bool indicating whether this shift has any work to do
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.WorkShift.Queues">
            <summary>
            Gets a list of the queues associated with this shift.
            </summary>
            <remarks>Internal for testing - immutable once initialized</remarks>
        </member>
        <member name="P:NUnit.Framework.Internal.Execution.WorkShift.Workers">
            <summary>
            Gets the list of workers associated with this shift.
            </summary>
            <remarks>Internal for testing - immutable once initialized</remarks>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkShift.AddQueue(NUnit.Framework.Internal.Execution.WorkItemQueue)">
            <summary>
            Add a WorkItemQueue to the shift, starting it if the
            shift is currently active.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkShift.Assign(NUnit.Framework.Internal.Execution.TestWorker)">
            <summary>
            Assign a worker to the shift.
            </summary>
            <param name="worker"></param>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkShift.Start">
            <summary>
            Start or restart processing for the shift
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkShift.EndShift">
            <summary>
            End the shift, pausing all queues and raising
            the EndOfShift event.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkShift.ShutDown">
            <summary>
            Shut down the shift.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Execution.WorkShift.Cancel(System.Boolean)">
            <summary>
            Cancel (abort or stop) the shift without completing all work
            </summary>
            <param name="force">true if the WorkShift should be aborted, false if it should allow its currently running tests to complete</param>
        </member>
        <member name="T:NUnit.Framework.Internal.TextMessageWriter">
            <summary>
            TextMessageWriter writes constraint descriptions and messages
            in displayable form as a text stream. It tailors the display
            of individual message components to form the standard message
            format of NUnit assertion failure messages.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TextMessageWriter.Pfx_Expected">
            <summary>
            Prefix used for the expected value line of a message
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TextMessageWriter.Pfx_Actual">
            <summary>
            Prefix used for the actual value line of a message
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TextMessageWriter.Pfx_Difference">
            <summary>
            Prefix used for the actual difference between actual and expected values if compared with a tolerance
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TextMessageWriter.PrefixLength">
            <summary>
            Length of a message prefix
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.#ctor">
            <summary>
            Construct a TextMessageWriter
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.#ctor(System.String,System.Object[])">
            <summary>
            Construct a TextMessageWriter, specifying a user message
            and optional formatting arguments.
            </summary>
            <param name="userMessage"></param>
            <param name="args"></param>
        </member>
        <member name="P:NUnit.Framework.Internal.TextMessageWriter.MaxLineLength">
            <summary>
            Gets or sets the maximum line length for this writer
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.WriteMessageLine(System.Int32,System.String,System.Object[])">
            <summary>
            Method to write single line message with optional args, usually
            written to precede the general failure message, at a given
            indentation level.
            </summary>
            <param name="level">The indentation level of the message</param>
            <param name="message">The message to be written</param>
            <param name="args">Any arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.DisplayDifferences(NUnit.Framework.Constraints.ConstraintResult)">
            <summary>
            Display Expected and Actual lines for a constraint. This
            is called by MessageWriter's default implementation of
            WriteMessageTo and provides the generic two-line display.
            </summary>
            <param name="result">The result of the constraint that failed</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.ResolveTypeNameDifference(System.Object,System.Object,System.String@,System.String@)">
            <summary>
            Gets the unique type name between expected and actual.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value causing the failure</param>
            <param name="expectedType">Output of the unique type name for expected</param>
            <param name="actualType">Output of the unique type name for actual</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.DisplayDifferences(System.Object,System.Object)">
            <summary>
            Display Expected and Actual lines for given values. This
            method may be called by constraints that need more control over
            the display of actual and expected values than is provided
            by the default implementation.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value causing the failure</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.DisplayDifferences(System.Object,System.Object,NUnit.Framework.Constraints.Tolerance)">
            <summary>
            Display Expected and Actual lines for given values, including
            a tolerance value on the expected line.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value causing the failure</param>
            <param name="tolerance">The tolerance within which the test was made</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.DisplayStringDifferences(System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Display the expected and actual string values on separate lines.
            If the mismatch parameter is >=0, an additional line is displayed
            line containing a caret that points to the mismatch point.
            </summary>
            <param name="expected">The expected string value</param>
            <param name="actual">The actual string value</param>
            <param name="mismatch">The point at which the strings don't match or -1</param>
            <param name="ignoreCase">If true, case is ignored in string comparisons</param>
            <param name="clipping">If true, clip the strings to fit the max line length</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.WriteActualValue(System.Object)">
            <summary>
            Writes the text for an actual value.
            </summary>
            <param name="actual">The actual value.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.WriteValue(System.Object)">
            <summary>
            Writes the text for a generalized value.
            </summary>
            <param name="val">The value.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.WriteCollectionElements(System.Collections.IEnumerable,System.Int64,System.Int32)">
            <summary>
            Writes the text for a collection value,
            starting at a particular point, to a max length
            </summary>
            <param name="collection">The collection containing elements to write.</param>
            <param name="start">The starting point of the elements to write</param>
            <param name="max">The maximum number of elements to write</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.WriteExpectedLine(NUnit.Framework.Constraints.ConstraintResult)">
            <summary>
            Write the generic 'Expected' line for a constraint
            </summary>
            <param name="result">The constraint that failed</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.WriteExpectedLine(System.Object,NUnit.Framework.Constraints.Tolerance)">
            <summary>
            Write the generic 'Expected' line for a given value
            and tolerance.
            </summary>
            <param name="expected">The expected value</param>
            <param name="tolerance">The tolerance within which the test was made</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.WriteActualLine(NUnit.Framework.Constraints.ConstraintResult)">
            <summary>
            Write the generic 'Actual' line for a constraint
            </summary>
            <param name="result">The ConstraintResult for which the actual value is to be written</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TextMessageWriter.WriteActualLine(System.Object)">
            <summary>
            Write the generic 'Actual' line for a given value
            </summary>
            <param name="actual">The actual value causing a failure</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Extensions.IPropertyBagDataExtensions">
            <summary>
            Extensions to <see cref="T:NUnit.Framework.Interfaces.IPropertyBag"/>.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Extensions.IPropertyBagDataExtensions.AddIgnoreUntilReason(NUnit.Framework.Interfaces.IPropertyBag,System.DateTimeOffset,System.String)">
            <summary>
            Adds the skip reason to tests that are ignored until a specific date.
            </summary>
            <param name="properties">The test properties to add the skip reason to</param>
            <param name="untilDate">The date that the test is being ignored until</param>
            <param name="reason">The reason the test is being ignored until that date</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Filters.AndFilter">
            <summary>
            Combines multiple filters so that a test must pass all
            of them in order to pass this filter.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.AndFilter.#ctor">
            <summary>
            Constructs an empty AndFilter
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.AndFilter.#ctor(NUnit.Framework.Internal.TestFilter[])">
            <summary>
            Constructs an AndFilter from an array of filters
            </summary>
            <param name="filters"></param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.AndFilter.Pass(NUnit.Framework.Interfaces.ITest,System.Boolean)">
            <summary>
            Checks whether the AndFilter is matched by a test
            </summary>
            <param name="test">The test to be matched</param>
            <param name="negated">If set to <see langword="true"/> we are carrying a negation through</param>
            <returns>True if all the component filters pass, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.AndFilter.Match(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Checks whether the AndFilter is matched by a test
            </summary>
            <param name="test">The test to be matched</param>
            <returns>True if all the component filters match, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.AndFilter.IsExplicitMatch(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Checks whether the AndFilter is explicit matched by a test.
            </summary>
            <param name="test">The test to be matched</param>
            <returns>True if all the component filters explicit match, otherwise false</returns>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.AndFilter.ElementName">
            <summary>
            Gets the element name
            </summary>
            <value>Element name</value>
        </member>
        <member name="T:NUnit.Framework.Internal.Filters.CategoryFilter">
            <summary>
            CategoryFilter is able to select or exclude tests
            based on their categories.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.CategoryFilter.#ctor(System.String)">
            <summary>
            Construct a CategoryFilter using a single category name
            </summary>
            <param name="name">A category name</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.CategoryFilter.Match(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Check whether the filter matches a test
            </summary>
            <param name="test">The test to be matched</param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.CategoryFilter.ElementName">
            <summary>
            Gets the element name
            </summary>
            <value>Element name</value>
        </member>
        <member name="T:NUnit.Framework.Internal.Filters.ClassNameFilter">
            <summary>
            ClassName filter selects tests based on the class FullName
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.ClassNameFilter.#ctor(System.String)">
            <summary>
            Construct a FullNameFilter for a single name
            </summary>
            <param name="expectedValue">The name the filter will recognize.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.ClassNameFilter.Match(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Match a test against a single value.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.ClassNameFilter.ElementName">
            <summary>
            Gets the element name
            </summary>
            <value>Element name</value>
        </member>
        <member name="T:NUnit.Framework.Internal.Filters.CompositeFilter">
            <summary>
            A base class for multi-part filters
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.CompositeFilter.#ctor">
            <summary>
            Constructs an empty CompositeFilter
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.CompositeFilter.#ctor(NUnit.Framework.Internal.TestFilter[])">
            <summary>
            Constructs a CompositeFilter from an array of filters
            </summary>
            <param name="filters"></param>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.CompositeFilter.Filters">
            <summary>
            Return a list of the composing filters.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.CompositeFilter.Pass(NUnit.Framework.Interfaces.ITest,System.Boolean)">
            <summary>
            Checks whether the CompositeFilter is matched by a test.
            </summary>
            <param name="test">The test to be matched</param>
            <param name="negated">If set to <see langword="true"/> we are carrying a negation through</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.CompositeFilter.Match(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Checks whether the CompositeFilter is matched by a test.
            </summary>
            <param name="test">The test to be matched</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.CompositeFilter.IsExplicitMatch(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Checks whether the CompositeFilter is explicit matched by a test.
            </summary>
            <param name="test">The test to be matched</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.CompositeFilter.AddToXml(NUnit.Framework.Interfaces.TNode,System.Boolean)">
            <summary>
            Adds an XML node
            </summary>
            <param name="parentNode">Parent node</param>
            <param name="recursive">True if recursive</param>
            <returns>The added XML node</returns>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.CompositeFilter.ElementName">
            <summary>
            Gets the element name
            </summary>
            <value>Element name</value>
        </member>
        <member name="T:NUnit.Framework.Internal.Filters.FullNameFilter">
            <summary>
            FullName filter selects tests based on their FullName
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.FullNameFilter.#ctor(System.String)">
            <summary>
            Construct a FullNameFilter for a single name
            </summary>
            <param name="expectedValue">The name the filter will recognize.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.FullNameFilter.Match(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Match a test against a single value.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.FullNameFilter.ElementName">
            <summary>
            Gets the element name
            </summary>
            <value>Element name</value>
        </member>
        <member name="T:NUnit.Framework.Internal.Filters.IdFilter">
            <summary>
            IdFilter selects tests based on their id
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.IdFilter.#ctor(System.String)">
            <summary>
            Construct an IdFilter for a single value
            </summary>
            <param name="id">The id the filter will recognize.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.IdFilter.Match(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Match a test against a single value.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.IdFilter.ElementName">
            <summary>
            Gets the element name
            </summary>
            <value>Element name</value>
        </member>
        <member name="T:NUnit.Framework.Internal.Filters.InFilter">
            <summary>
            Optimized filter to check in condition using HashSet.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.InFilter.#ctor(System.Func{NUnit.Framework.Interfaces.ITest,System.String},System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Constructs new InFilter.
            </summary>
            <param name="selector">Selector to get value to check.</param>
            <param name="values">Valid values for the filter.</param>
            <param name="xmlElementName">The XML element name the original filter used.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.InFilter.TryOptimize(NUnit.Framework.Internal.Filters.OrFilter,NUnit.Framework.Internal.Filters.InFilter@)">
            <summary>
            Tries to optimize OrFilter into InFilter if contained filters are all same and non-regex.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Filters.MethodNameFilter">
            <summary>
            FullName filter selects tests based on their FullName
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.MethodNameFilter.#ctor(System.String)">
            <summary>
            Construct a MethodNameFilter for a single name
            </summary>
            <param name="expectedValue">The name the filter will recognize.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.MethodNameFilter.Match(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Match a test against a single value.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.MethodNameFilter.ElementName">
            <summary>
            Gets the element name
            </summary>
            <value>Element name</value>
        </member>
        <member name="T:NUnit.Framework.Internal.Filters.NamespaceFilter">
            <summary>
            ClassName filter selects tests based on the class FullName
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.NamespaceFilter.#ctor(System.String)">
            <summary>
            Construct a NamespaceFilter for a single namespace
            </summary>
            <param name="expectedValue">The namespace the filter will recognize.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.NamespaceFilter.Match(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Match a test against a single value.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.NamespaceFilter.ElementName">
            <summary>
            Gets the element name
            </summary>
            <value>Element name</value>
        </member>
        <member name="T:NUnit.Framework.Internal.Filters.NotFilter">
            <summary>
            NotFilter negates the operation of another filter
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.NotFilter.#ctor(NUnit.Framework.Internal.TestFilter)">
            <summary>
            Construct a not filter on another filter
            </summary>
            <param name="baseFilter">The filter to be negated</param>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.NotFilter.BaseFilter">
            <summary>
            Gets the base filter
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.NotFilter.Pass(NUnit.Framework.Interfaces.ITest,System.Boolean)">
            <summary>
            Determine if a particular test passes the filter criteria.
            </summary>
            <param name="test">The test to which the filter is applied</param>
            <param name="negated">If set to <see langword="true"/> we are carrying a negation through</param>
            <returns>True if the test passes the filter, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.NotFilter.Match(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Check whether the filter matches a test
            </summary>
            <param name="test">The test to be matched</param>
            <returns>True if it matches, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.NotFilter.IsExplicitMatch(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Determine if a test matches the filter explicitly. That is, it must
            be a direct match of the test itself or one of its children.
            </summary>
            <param name="test">The test to which the filter is applied</param>
            <returns>True if the test matches the filter explicitly, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.NotFilter.AddToXml(NUnit.Framework.Interfaces.TNode,System.Boolean)">
            <summary>
            Adds an XML node
            </summary>
            <param name="parentNode">Parent node</param>
            <param name="recursive">True if recursive</param>
            <returns>The added XML node</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.Filters.OrFilter">
            <summary>
            Combines multiple filters so that a test must pass one
            of them in order to pass this filter.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.OrFilter.#ctor">
            <summary>
            Constructs an empty OrFilter
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.OrFilter.#ctor(NUnit.Framework.Internal.TestFilter[])">
            <summary>
            Constructs an OrFilter from an array of filters
            </summary>
            <param name="filters"></param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.OrFilter.Pass(NUnit.Framework.Interfaces.ITest,System.Boolean)">
            <summary>
            Checks whether the OrFilter is matched by a test
            </summary>
            <param name="test">The test to be matched</param>
            <param name="negated">If set to <see langword="true"/> we are carrying a negation through</param>
            <returns>True if any of the component filters pass, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.OrFilter.Match(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Checks whether the OrFilter is matched by a test
            </summary>
            <param name="test">The test to be matched</param>
            <returns>True if any of the component filters match, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.OrFilter.IsExplicitMatch(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Checks whether the OrFilter is explicit matched by a test
            </summary>
            <param name="test">The test to be matched</param>
            <returns>True if any of the component filters explicit match, otherwise false</returns>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.OrFilter.ElementName">
            <summary>
            Gets the element name
            </summary>
            <value>Element name</value>
        </member>
        <member name="T:NUnit.Framework.Internal.Filters.PropertyFilter">
            <summary>
            PropertyFilter is able to select or exclude tests
            based on their properties.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.PropertyFilter.#ctor(System.String,System.String)">
            <summary>
            Construct a PropertyFilter using a property name and expected value
            </summary>
            <param name="propertyName">A property name</param>
            <param name="expectedValue">The expected value of the property</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.PropertyFilter.Match(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Check whether the filter matches a test
            </summary>
            <param name="test">The test to be matched</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.PropertyFilter.AddToXml(NUnit.Framework.Interfaces.TNode,System.Boolean)">
            <summary>
            Adds an XML node
            </summary>
            <param name="parentNode">Parent node</param>
            <param name="recursive">True if recursive</param>
            <returns>The added XML node</returns>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.PropertyFilter.ElementName">
            <summary>
            Gets the element name
            </summary>
            <value>Element name</value>
        </member>
        <member name="T:NUnit.Framework.Internal.Filters.TestNameFilter">
            <summary>
            TestName filter selects tests based on their Name
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.TestNameFilter.#ctor(System.String)">
            <summary>
            Construct a TestNameFilter for a single name
            </summary>
            <param name="expectedValue">The name the filter will recognize.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.TestNameFilter.Match(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Match a test against a single value.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.TestNameFilter.ElementName">
            <summary>
            Gets the element name
            </summary>
            <value>Element name</value>
        </member>
        <member name="T:NUnit.Framework.Internal.Filters.ValueMatchFilter">
            <summary>
            ValueMatchFilter selects tests based on some value, which
            is expected to be contained in the test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.ValueMatchFilter.ExpectedValue">
            <summary>
            Returns the value matched by the filter - used for testing
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.ValueMatchFilter.IsRegex">
            <summary>
            Indicates whether the value is a regular expression
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.ValueMatchFilter.#ctor(System.String)">
            <summary>
            Construct a ValueMatchFilter for a single value.
            </summary>
            <param name="expectedValue">The value to be included.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.ValueMatchFilter.Match(System.String)">
            <summary>
            Match the input provided by the derived class
            </summary>
            <param name="input">The value to be matched</param>
            <returns>True for a match, false otherwise.</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Filters.ValueMatchFilter.AddToXml(NUnit.Framework.Interfaces.TNode,System.Boolean)">
            <summary>
            Adds an XML node
            </summary>
            <param name="parentNode">Parent node</param>
            <param name="recursive">True if recursive</param>
            <returns>The added XML node</returns>
        </member>
        <member name="P:NUnit.Framework.Internal.Filters.ValueMatchFilter.ElementName">
            <summary>
            Gets the element name
            </summary>
            <value>Element name</value>
        </member>
        <member name="T:NUnit.Framework.Internal.GenericMethodHelper">
            <summary>
            GenericMethodHelper is able to deduce the Type arguments for
            a generic method from the actual arguments provided.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.GenericMethodHelper.ConflictingTypesMarker">
            <summary>
            A special value, which is used to indicate that BestCommonType() method
            was unable to find a common type for the specified arguments.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.GenericMethodHelper.#ctor(System.Reflection.MethodInfo)">
            <summary>
            Construct a GenericMethodHelper for a method
            </summary>
            <param name="method">MethodInfo for the method to examine</param>
        </member>
        <member name="M:NUnit.Framework.Internal.GenericMethodHelper.TryGetTypeArguments(System.Object[],System.Type[]@)">
            <summary>
            Return the type arguments for the method, deducing them
            from the arguments actually provided.
            </summary>
            <param name="argList">The arguments to the method</param>
            <param name="typeArguments">If successful, an array of type arguments.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.ImmutableStack`1">
            <summary>
            A minimalistic implementation of an immutable stack. Add members as needed.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.ImmutableStack`1.Empty">
            <summary>
            Represents an empty stack. <see langword="default"/> may be used instead.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.ImmutableStack`1.Push(`0)">
            <summary>
            Returns a new immutable stack which begins with the specified value and continues with the values in the
            current stack.
            </summary>
            <param name="value">The beginning value of the new stack.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.InvalidDataSourceException">
            <summary>
            InvalidTestFixtureException is thrown when an appropriate test
            fixture constructor using the provided arguments cannot be found.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.InvalidDataSourceException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.InvalidTestFixtureException"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.InvalidDataSourceException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.InvalidTestFixtureException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.InvalidDataSourceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.InvalidTestFixtureException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.InvalidDataSourceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.InvalidPlatformException">
            <summary>
            InvalidPlatformException is thrown when the platform name supplied
            to a test is not recognized.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.InvalidPlatformException.#ctor">
            <summary>
            Instantiates a new instance of the <see cref="T:NUnit.Framework.Internal.InvalidPlatformException"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.InvalidPlatformException.#ctor(System.String)">
            <summary>
            Instantiates a new instance of the <see cref="T:NUnit.Framework.Internal.InvalidPlatformException"/> class
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.InvalidPlatformException.#ctor(System.String,System.Exception)">
            <summary>
            Instantiates a new instance of the <see cref="T:NUnit.Framework.Internal.InvalidPlatformException"/> class
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.InvalidPlatformException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor for the <see cref="T:NUnit.Framework.Internal.InvalidPlatformException"/> class
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.InvalidTestFixtureException">
            <summary>
            InvalidTestFixtureException is thrown when an appropriate test
            fixture constructor using the provided arguments cannot be found.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.InvalidTestFixtureException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.InvalidTestFixtureException"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.InvalidTestFixtureException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.InvalidTestFixtureException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.InvalidTestFixtureException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.InvalidTestFixtureException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.InvalidTestFixtureException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.ILogger">
            <summary>
            Interface for logging within the engine
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.ILogger.Error(System.String)">
            <summary>
            Logs the specified message at the error level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.ILogger.Error(System.String,System.Object[])">
            <summary>
            Logs the specified message at the error level.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.ILogger.Warning(System.String)">
            <summary>
            Logs the specified message at the warning level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.ILogger.Warning(System.String,System.Object[])">
            <summary>
            Logs the specified message at the warning level.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.ILogger.Info(System.String)">
            <summary>
            Logs the specified message at the info level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.ILogger.Info(System.String,System.Object[])">
            <summary>
            Logs the specified message at the info level.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.ILogger.Debug(System.String)">
            <summary>
            Logs the specified message at the debug level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.ILogger.Debug(System.String,System.Object[])">
            <summary>
            Logs the specified message at the debug level.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.InternalTrace">
             <summary>
             InternalTrace provides facilities for tracing the execution
             of the NUnit framework. Tests and classes under test may make use
             of Console writes, System.Diagnostics.Trace or various loggers and
             NUnit itself traps and processes each of them. For that reason, a
             separate internal trace is needed.
            
             Note:
             InternalTrace uses a global lock to allow multiple threads to write
             trace messages. This can easily make it a bottleneck so it must be
             used sparingly. Keep the trace Level as low as possible and only
             insert InternalTrace writes where they are needed.
             TODO: add some buffering and a separate writer thread as an option.
             TODO: figure out a way to turn on trace in specific classes only.
             </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.InternalTrace.Initialized">
            <summary>
            Gets a flag indicating whether the InternalTrace is initialized
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.InternalTrace.Initialize(System.String,NUnit.Framework.Internal.InternalTraceLevel)">
            <summary>
            Initialize the internal trace facility using the name of the log
            to be written to and the trace level.
            </summary>
            <param name="logName">The log name</param>
            <param name="level">The trace level</param>
        </member>
        <member name="M:NUnit.Framework.Internal.InternalTrace.Initialize(System.IO.TextWriter,NUnit.Framework.Internal.InternalTraceLevel)">
            <summary>
            Initialize the internal trace using a provided TextWriter and level
            </summary>
            <param name="writer">A TextWriter</param>
            <param name="level">The InternalTraceLevel</param>
        </member>
        <member name="M:NUnit.Framework.Internal.InternalTrace.GetLogger(System.String)">
            <summary>
            Get a named Logger
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.InternalTrace.GetLogger(System.Type)">
            <summary>
            Get a logger named for a particular Type.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.InternalTraceLevel">
            <summary>
            InternalTraceLevel is an enumeration controlling the
            level of detailed presented in the internal log.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.InternalTraceLevel.Default">
            <summary>
            Use the default settings as specified by the user.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.InternalTraceLevel.Off">
            <summary>
            Do not display any trace messages
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.InternalTraceLevel.Error">
            <summary>
            Display Error messages only
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.InternalTraceLevel.Warning">
            <summary>
            Display Warning level and higher messages
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.InternalTraceLevel.Info">
            <summary>
            Display informational and higher messages
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.InternalTraceLevel.Debug">
            <summary>
            Display debug messages and higher - i.e. all messages
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.InternalTraceLevel.Verbose">
            <summary>
            Display debug messages and higher - i.e. all messages
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.InternalTraceWriter">
            <summary>
            A trace listener that writes to a separate file per domain
            and process using it.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.InternalTraceWriter.#ctor(System.String)">
            <summary>
            Construct an InternalTraceWriter that writes to a file.
            </summary>
            <param name="logPath">Path to the file to use</param>
        </member>
        <member name="M:NUnit.Framework.Internal.InternalTraceWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Construct an InternalTraceWriter that writes to a
            TextWriter provided by the caller.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="P:NUnit.Framework.Internal.InternalTraceWriter.Encoding">
            <summary>
            Returns the character encoding in which the output is written.
            </summary>
            <returns>The character encoding in which the output is written.</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.InternalTraceWriter.Write(System.Char)">
            <summary>
            Writes a character to the text string or stream.
            </summary>
            <param name="value">The character to write to the text stream.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.InternalTraceWriter.Write(System.String)">
            <summary>
            Writes a string to the text string or stream.
            </summary>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.InternalTraceWriter.WriteLine(System.String)">
            <summary>
            Writes a string followed by a line terminator to the text string or stream.
            </summary>
            <param name="value">The string to write. If <paramref name="value" /> is null, only the line terminator is written.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.InternalTraceWriter.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.TextWriter" /> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.InternalTraceWriter.Flush">
            <summary>
            Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Logger">
            <summary>
            Provides internal logging to the NUnit framework
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Logger.#ctor(System.String,NUnit.Framework.Internal.InternalTraceLevel,System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.Logger"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="level">The log level.</param>
            <param name="writer">The writer where logs are sent.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Logger.Error(System.String)">
            <summary>
            Logs the message at error level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Logger.Error(System.String,System.Object[])">
            <summary>
            Logs the message at error level.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Logger.Warning(System.String)">
            <summary>
            Logs the message at warm level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Logger.Warning(System.String,System.Object[])">
            <summary>
            Logs the message at warning level.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Logger.Info(System.String)">
            <summary>
            Logs the message at info level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Logger.Info(System.String,System.Object[])">
            <summary>
            Logs the message at info level.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Logger.Debug(System.String)">
            <summary>
            Logs the message at debug level.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Logger.Debug(System.String,System.Object[])">
            <summary>
            Logs the message at debug level.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The message arguments.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.MethodWrapper">
            <summary>
            The MethodWrapper class wraps a MethodInfo so that it may
            be used in a platform-independent manner.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.MethodWrapper.#ctor(System.Type,System.Reflection.MethodInfo)">
            <summary>
            Construct a MethodWrapper for a Type and a MethodInfo.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.MethodWrapper.#ctor(System.Type,System.String)">
            <summary>
            Construct a MethodInfo for a given Type and method name.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.MethodWrapper.TypeInfo">
            <summary>
            Gets the Type from which this method was reflected.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.MethodWrapper.MethodInfo">
            <summary>
            Gets the MethodInfo for this method.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.MethodWrapper.Name">
            <summary>
            Gets the name of the method.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.MethodWrapper.IsAbstract">
            <summary>
            Gets a value indicating whether the method is abstract.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.MethodWrapper.IsPublic">
            <summary>
            Gets a value indicating whether the method is public.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.MethodWrapper.IsStatic">
            <summary>
            Gets a value indicating whether the method is static.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.MethodWrapper.ContainsGenericParameters">
            <summary>
            Gets a value indicating whether the method contains unassigned generic type parameters.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.MethodWrapper.IsGenericMethod">
            <summary>
            Gets a value indicating whether the method is a generic method.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.MethodWrapper.IsGenericMethodDefinition">
            <summary>
            Gets a value indicating whether the MethodInfo represents the definition of a generic method.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.MethodWrapper.ReturnType">
            <summary>
            Gets the return Type of the method.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.MethodWrapper.GetParameters">
            <summary>
            Gets the parameters of the method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.MethodWrapper.GetGenericArguments">
            <summary>
            Returns the Type arguments of a generic method or the Type parameters of a generic method definition.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.MethodWrapper.MakeGenericMethod(System.Type[])">
            <summary>
            Replaces the type parameters of the method with the array of types provided and returns a new IMethodInfo.
            </summary>
            <param name="typeArguments">The type arguments to be used</param>
            <returns>A new IMethodInfo with the type arguments replaced</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.MethodWrapper.GetCustomAttributes``1(System.Boolean)">
            <summary>
            Returns an array of custom attributes of the specified type applied to this method
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.MethodWrapper.IsDefined``1(System.Boolean)">
            <summary>
            Gets a value indicating whether one or more attributes of the specified type are defined on the method.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.MethodWrapper.Invoke(System.Object,System.Object[])">
            <summary>
            Invokes the method, converting any TargetInvocationException to an NUnitException.
            </summary>
            <param name="fixture">The object on which to invoke the method</param>
            <param name="args">The argument list for the method</param>
            <returns>The return value from the invoked method</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.MethodWrapper.ToString">
            <summary>
            Override ToString() so that error messages in NUnit's own tests make sense
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.MethodWrapper.Equals(NUnit.Framework.Internal.MethodWrapper)">
            <inheritdoc />
        </member>
        <member name="M:NUnit.Framework.Internal.MethodWrapper.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:NUnit.Framework.Internal.MethodWrapper.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:NUnit.Framework.Internal.NUnitException">
            <summary>
            Thrown when an assertion failed. Here to preserve the inner
            exception and hence its stack trace.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.NUnitException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.NUnitException"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.NUnitException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.NUnitException"/> class.
            </summary>
            <param name="message">The error message that explains
            the reason for the exception</param>
        </member>
        <member name="M:NUnit.Framework.Internal.NUnitException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.NUnitException"/> class.
            </summary>
            <param name="message">The error message that explains
            the reason for the exception</param>
            <param name="inner">The exception that caused the
            current exception</param>
        </member>
        <member name="M:NUnit.Framework.Internal.NUnitException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.On">
            <summary>
            Enables the <see cref="M:NUnit.Framework.Internal.On.Dispose(System.Action)"/> syntax.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.On.Dispose(System.Action)">
            <summary>
            Wraps an action so that it is executed when the returned object is disposed.
            This disposal is thread-safe and the action will be executed at most once.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.OSPlatform">
            <summary>
            OSPlatform represents a particular operating system platform
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.OSPlatform.UnixPlatformID_Microsoft">
            <summary>
            Platform ID for Unix as defined by .NET
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.OSPlatform.UnixPlatformID_Mono">
            <summary>
            Platform ID for Unix as defined by Mono
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.OSPlatform.XBoxPlatformID">
            <summary>
            Platform ID for XBox as defined by .NET and Mono
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.OSPlatform.MacOSXPlatformID">
            <summary>
            Platform ID for MacOSX as defined by .NET and Mono
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.CurrentPlatform">
            <summary>
            Get the OSPlatform under which we are currently running
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.OSPlatform.GetWindows81PlusVersion(System.Version)">
            <summary>
            Gets the actual OS Version, not the incorrect value that might be
            returned for Win 8.1 and Win 10
            </summary>
            <remarks>
            If an application is not manifested as Windows 8.1 or Windows 10,
            the version returned from Environment.OSVersion will not be 6.3 and 10.0
            respectively, but will be 6.2 and 6.3. The correct value can be found in
            the registry.
            </remarks>
            <param name="version">The original version</param>
            <returns>The correct OS version</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.OSPlatform.ProductType">
            <summary>
            Product Type Enumeration used for Windows
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.OSPlatform.ProductType.Unknown">
            <summary>
            Product type is unknown or unspecified
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.OSPlatform.ProductType.WorkStation">
            <summary>
            Product type is Workstation
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.OSPlatform.ProductType.DomainController">
            <summary>
            Product type is Domain Controller
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.OSPlatform.ProductType.Server">
            <summary>
            Product type is Server
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.OSPlatform.#ctor(System.PlatformID,System.Version)">
            <summary>
            Construct from a platform ID and version
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.OSPlatform.#ctor(System.PlatformID,System.Version,NUnit.Framework.Internal.OSPlatform.ProductType)">
            <summary>
            Construct from a platform ID, version and product type
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.Platform">
            <summary>
            Get the platform ID of this instance
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.OSPlatform.ToString">
            <summary>
            Implemented to use in place of Environment.OSVersion.ToString()
            </summary>
            <returns>A representation of the platform ID and version in an approximation of the format used by Environment.OSVersion.ToString()</returns>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.Version">
            <summary>
            Get the Version of this instance
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.Product">
            <summary>
            Get the Product Type of this instance
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWindows">
            <summary>
            Return true if this is a windows platform
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsUnix">
            <summary>
            Return true if this is a Unix or Linux platform
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWin32S">
            <summary>
            Return true if the platform is Win32S
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWin32Windows">
            <summary>
            Return true if the platform is Win32Windows
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWin32NT">
            <summary>
             Return true if the platform is Win32NT
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWinCE">
            <summary>
            Return true if the platform is Windows CE
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsXbox">
            <summary>
            Return true if the platform is Xbox
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsMacOSX">
            <summary>
            Return true if the platform is MacOSX
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWin95">
            <summary>
            Return true if the platform is Windows 95
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWin98">
            <summary>
            Return true if the platform is Windows 98
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWinME">
            <summary>
            Return true if the platform is Windows ME
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsNT3">
            <summary>
            Return true if the platform is NT 3
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsNT4">
            <summary>
            Return true if the platform is NT 4
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsNT5">
            <summary>
            Return true if the platform is NT 5
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWin2K">
            <summary>
            Return true if the platform is Windows 2000
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWinXP">
            <summary>
            Return true if the platform is Windows XP
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWin2003Server">
            <summary>
            Return true if the platform is Windows 2003 Server
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsNT6">
            <summary>
            Return true if the platform is NT 6
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsNT60">
            <summary>
            Return true if the platform is NT 6.0
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsNT61">
            <summary>
            Return true if the platform is NT 6.1
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsNT62">
            <summary>
            Return true if the platform is NT 6.2
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsNT63">
            <summary>
            Return true if the platform is NT 6.3
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsVista">
            <summary>
            Return true if the platform is Vista
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWin2008Server">
            <summary>
            Return true if the platform is Windows 2008 Server (original or R2)
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWin2008ServerR1">
            <summary>
            Return true if the platform is Windows 2008 Server (original)
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWin2008ServerR2">
            <summary>
            Return true if the platform is Windows 2008 Server R2
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWin2012Server">
            <summary>
            Return true if the platform is Windows 2012 Server (original or R2)
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWin2012ServerR1">
            <summary>
            Return true if the platform is Windows 2012 Server (original)
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWin2012ServerR2">
            <summary>
            Return true if the platform is Windows 2012 Server R2
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWindows7">
            <summary>
            Return true if the platform is Windows 7
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWindows8">
            <summary>
            Return true if the platform is Windows 8
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWindows81">
            <summary>
            Return true if the platform is Windows 8.1
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWindows10">
            <summary>
            Return true if the platform is Windows 10
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.OSPlatform.IsWindowsServer10">
            <summary>
            Return true if the platform is Windows Server. This is named Windows
            Server 10 to distinguish it from previous versions of Windows Server.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.ParamAttributeTypeConversions">
            <summary>
            <para>
            Examines an attribute argument and tries to simulate what that value would have been if the literal syntax
            which might have defined the value in C# had instead been used as an argument to a given method parameter in a direct call.
            </para>
            <para>
            For example, since you can’t apply attributes using <see cref="T:System.Decimal"/> arguments, we allow the C# syntax
            <c>10</c> (<see cref="T:System.Int32"/> value) or <c>0.1</c> (<see cref="T:System.Double"/> value) to be specified.
            NUnit then converts it to match the method’s <see cref="T:System.Decimal"/> parameters, just as if you were actually
            using the syntax <c>TestMethod(10)</c> or <c>TestMethod(0.1)</c>.
            </para>
            <para>
            For another example, you might have written the syntax <c>10</c> and picked up the <see cref="T:System.Int32"/> attribute
            constructor overload; however, the test method for which this value is intended only has a <see cref="T:System.Byte"/>
            signature. Again, NUnit simulates what would have happened if the inferred C# syntax was transplanted
            and you were actually using the syntax <c>TestMethod(10)</c>.
            </para>
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.ParamAttributeTypeConversions.ConvertData(System.Object[],System.Type)">
            <summary>
            Converts an array of objects to the <paramref name="targetType"/>, if it is supported.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.ParamAttributeTypeConversions.Convert(System.Object,System.Type)">
            <summary>
            Converts a single value to the <paramref name="targetType"/>, if it is supported.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.ParamAttributeTypeConversions.TryConvert(System.Object,System.Type,System.Object@)">
            <summary>
            Performs several special conversions allowed by NUnit in order to
            permit arguments with types that cannot be used in the constructor
            of an Attribute such as TestCaseAttribute or to simplify their use.
            </summary>
            <param name="value">The value to be converted</param>
            <param name="targetType">The target <see cref="T:System.Type"/> in which the <paramref name="value"/> should be converted</param>
            <param name="convertedValue">If conversion was successfully applied, the <paramref name="value"/> converted into <paramref name="targetType"/></param>
            <returns>
            <see langword="true"/> if <paramref name="value"/> was converted and <paramref name="convertedValue"/> should be used;
            <see langword="false"/> is no conversion was applied and <paramref name="convertedValue"/> should be ignored
            </returns>
        </member>
        <member name="T:NUnit.Framework.Internal.ParameterWrapper">
            <summary>
            The ParameterWrapper class wraps a ParameterInfo so that it may
            be used in a platform-independent manner.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.ParameterWrapper.#ctor(NUnit.Framework.Interfaces.IMethodInfo,System.Reflection.ParameterInfo)">
            <summary>
            Construct a ParameterWrapper for a given method and parameter
            </summary>
            <param name="method"></param>
            <param name="parameterInfo"></param>
        </member>
        <member name="P:NUnit.Framework.Internal.ParameterWrapper.IsOptional">
            <summary>
            Gets a value indicating whether the parameter is optional
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.ParameterWrapper.Method">
            <summary>
            Gets an IMethodInfo representing the method for which this is a parameter.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.ParameterWrapper.ParameterInfo">
            <summary>
            Gets the underlying ParameterInfo
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.ParameterWrapper.ParameterType">
            <summary>
            Gets the Type of the parameter
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.ParameterWrapper.GetCustomAttributes``1(System.Boolean)">
            <summary>
            Returns an array of custom attributes of the specified type applied to this method
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.ParameterWrapper.IsDefined``1(System.Boolean)">
            <summary>
            Gets a value indicating whether one or more attributes of the specified type are defined on the parameter.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.PlatformHelper">
            <summary>
            PlatformHelper class is used by the PlatformAttribute class to
            determine whether a platform is supported.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PlatformHelper.OSPlatforms">
            <summary>
            Comma-delimited list of all supported OS platform constants
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PlatformHelper.RuntimePlatforms">
            <summary>
            Comma-delimited list of all supported Runtime platform constants
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.PlatformHelper.#ctor">
            <summary>
            Default constructor uses the operating system and
            common language runtime of the system.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.PlatformHelper.#ctor(NUnit.Framework.Internal.OSPlatform,NUnit.Framework.Internal.RuntimeFramework)">
            <summary>
            Construct a PlatformHelper for a particular operating
            system and common language runtime. Used in testing.
            </summary>
            <param name="rt">RuntimeFramework to be used</param>
            <param name="os">OperatingSystem to be used</param>
        </member>
        <member name="M:NUnit.Framework.Internal.PlatformHelper.IsPlatformSupported(System.String[])">
            <summary>
            Test to determine if one of a collection of platforms
            is being used currently.
            </summary>
            <param name="platforms"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.PlatformHelper.IsPlatformSupported(NUnit.Framework.PlatformAttribute)">
            <summary>
            Tests to determine if the current platform is supported
            based on a platform attribute.
            </summary>
            <param name="platformAttribute">The attribute to examine</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.PlatformHelper.IsPlatformSupported(NUnit.Framework.TestCaseAttribute)">
            <summary>
            Tests to determine if the current platform is supported
            based on a platform attribute.
            </summary>
            <param name="testCaseAttribute">The attribute to examine</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.PlatformHelper.IsPlatformSupported(System.String)">
            <summary>
            Test to determine if a particular platform or comma-delimited set of platforms is in use.
            </summary>
            <param name="platform">Name of the platform or comma-separated list of platform ids</param>
            <returns>True if the platform is in use on the system</returns>
        </member>
        <member name="P:NUnit.Framework.Internal.PlatformHelper.Reason">
            <summary>
            Return the last failure reason. Results are not
            defined if called before IsSupported( Attribute )
            is called.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.PreFilter">
            <summary>
            Implements a simplified filter for use in deciding which
            Types and Methods should be used to generate tests. It is constructed with a
            list of strings, each of which may end up being interpreted in various ways.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.PreFilter.Empty">
            <summary>
            Return a new PreFilter, without elements, which is considered
            empty and always matches.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.PreFilter.IsEmpty">
            <summary>
            Return true if the filter is empty, in which case it
            always succeeds. Technically, this is just a filter and
            you can add elements but it's best to use Empty when
            you need an empty filter and new when you plan to add.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.PreFilter.Add(System.String)">
            <summary>
            Add a new filter element to the filter
            </summary>
            <param name="filterText"></param>
        </member>
        <member name="M:NUnit.Framework.Internal.PreFilter.IsMatch(System.Type)">
            <summary>
            Use the filter on a Type, returning true if the type matches the filter
            and should therefore be included in the discovery process.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.PreFilter.IsMatch(System.Type,System.Reflection.MethodInfo)">
            <summary>
            Use the filter on a Type, returning true if the type matches the filter
            and should therefore be included in the discovery process.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.PropertyBag">
            <summary>
            A PropertyBag represents a collection of name value pairs
            that allows duplicate entries with the same key. Methods
            are provided for adding a new pair as well as for setting
            a key to a single value. All keys are strings but values
            may be of any type. Null values are not permitted, since
            a null entry represents the absence of the key.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.PropertyBag.Add(System.String,System.Object)">
            <summary>
            Adds a key/value pair to the property set
            </summary>
            <param name="key">The key</param>
            <param name="value">The value</param>
        </member>
        <member name="M:NUnit.Framework.Internal.PropertyBag.Set(System.String,System.Object)">
            <summary>
            Sets the value for a key, removing any other
            values that are already in the property set.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:NUnit.Framework.Internal.PropertyBag.Get(System.String)">
            <summary>
            Gets a single value for a key, using the first
            one if multiple values are present and returning
            null if the value is not found.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.PropertyBag.ContainsKey(System.String)">
            <summary>
            Gets a flag indicating whether the specified key has
            any entries in the property set.
            </summary>
            <param name="key">The key to be checked</param>
            <returns>
            True if their are values present, otherwise false
            </returns>
        </member>
        <member name="P:NUnit.Framework.Internal.PropertyBag.Keys">
            <summary>
            Gets a collection containing all the keys in the property set
            </summary>
            <value></value>
        </member>
        <member name="P:NUnit.Framework.Internal.PropertyBag.Item(System.String)">
            <summary>
            Gets or sets the list of values for a particular key
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.PropertyBag.ToXml(System.Boolean)">
            <summary>
            Returns an XmlNode representing the current PropertyBag.
            </summary>
            <param name="recursive">Not used</param>
            <returns>An XmlNode representing the PropertyBag</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.PropertyBag.AddToXml(NUnit.Framework.Interfaces.TNode,System.Boolean)">
            <summary>
            Returns an XmlNode representing the PropertyBag after
            adding it as a child of the supplied parent node.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="recursive">Not used</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Internal.PropertyNames">
            <summary>
            The PropertyNames class provides static constants for the
            standard property ids that NUnit uses on tests.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.AppDomain">
            <summary>
            The FriendlyName of the AppDomain in which the assembly is running
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.JoinType">
            <summary>
            The selected strategy for joining parameter data into test cases
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.ProcessId">
            <summary>
            The process ID of the executing assembly
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.ProviderStackTrace">
            <summary>
            The stack trace from any data provider that threw
            an exception.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.SkipReason">
            <summary>
            The reason a test was not run
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.Author">
            <summary>
            The author of the tests
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.ApartmentState">
            <summary>
            The ApartmentState required for running the test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.Category">
            <summary>
            The categories applying to a test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.Description">
            <summary>
            The Description of a test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.LevelOfParallelism">
            <summary>
            The number of threads to be used in running tests
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.MaxTime">
            <summary>
            The maximum time in ms, above which the test is considered to have failed
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.ParallelScope">
            <summary>
            The ParallelScope associated with a test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.RepeatCount">
            <summary>
            The number of times the test should be repeated
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.RequiresThread">
            <summary>
            Indicates that the test should be run on a separate thread
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.SetCulture">
            <summary>
            The culture to be set for a test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.SetUICulture">
            <summary>
            The UI culture to be set for a test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.TestOf">
            <summary>
            The type that is under test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.Timeout">
            <summary>
            The timeout value for the test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.IgnoreUntilDate">
            <summary>
            The test will be ignored until the given date
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.PropertyNames.Order">
            <summary>
            The optional Order the test will run in
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Randomizer">
             <summary>
             Randomizer returns a set of random values in a repeatable
             way, to allow re-running of tests if necessary. It extends
             the .NET Random class, providing random values for a much
             wider range of types.
            
             The class is used internally by the framework to generate
             test case data and is also exposed for use by users through
             the TestContext.Random property.
             </summary>
             <remarks>
             For consistency with the underlying Random Type, methods
             returning a single value use the prefix "Next..." Those
             without an argument return a non-negative value up to
             the full positive range of the Type. Overloads are provided
             for specifying a maximum or a range. Methods that return
             arrays or strings use the prefix "Get..." to avoid
             confusion with the single-value methods.
             </remarks>
        </member>
        <member name="P:NUnit.Framework.Internal.Randomizer.InitialSeed">
            <summary>
            Initial seed used to create randomizers for this run
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.GetRandomizer(System.Reflection.MemberInfo)">
            <summary>
            Get a Randomizer for a particular member, returning
            one that has already been created if it exists.
            This ensures that the same values are generated
            each time the tests are reloaded.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.GetRandomizer(System.Reflection.ParameterInfo)">
            <summary>
            Get a randomizer for a particular parameter, returning
            one that has already been created if it exists.
            This ensures that the same values are generated
            each time the tests are reloaded.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.CreateRandomizer">
            <summary>
            Create a new Randomizer using the next seed
            available to ensure that each randomizer gives
            a unique sequence of values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.#ctor(System.Int32)">
            <summary>
            Construct based on seed value
            </summary>
            <param name="seed"></param>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextUInt">
            <summary>
            Returns a random unsigned int.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextUInt(System.UInt32)">
            <summary>
            Returns a random unsigned int less than the specified maximum.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextUInt(System.UInt32,System.UInt32)">
            <summary>
            Returns a random unsigned int within a specified range.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextShort">
            <summary>
            Returns a non-negative random short.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextShort(System.Int16)">
            <summary>
            Returns a non-negative random short less than the specified maximum.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextShort(System.Int16,System.Int16)">
            <summary>
            Returns a non-negative random short within a specified range.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextUShort">
            <summary>
            Returns a random unsigned short.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextUShort(System.UInt16)">
            <summary>
            Returns a random unsigned short less than the specified maximum.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextUShort(System.UInt16,System.UInt16)">
            <summary>
            Returns a random unsigned short within a specified range.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextLong">
            <summary>
            Returns a random long.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextLong(System.Int64)">
            <summary>
            Returns a random long less than the specified maximum.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextLong(System.Int64,System.Int64)">
            <summary>
            Returns a non-negative random long within a specified range.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextULong">
            <summary>
            Returns a random ulong.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextULong(System.UInt64)">
            <summary>
            Returns a random ulong less than the specified maximum.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextULong(System.UInt64,System.UInt64)">
            <summary>
            Returns a non-negative random long within a specified range.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextByte">
            <summary>
            Returns a random Byte
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextByte(System.Byte)">
            <summary>
            Returns a random Byte less than the specified maximum.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextByte(System.Byte,System.Byte)">
            <summary>
            Returns a random Byte within a specified range
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextSByte">
            <summary>
            Returns a random SByte
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextSByte(System.SByte)">
            <summary>
            Returns a random sbyte less than the specified maximum.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextSByte(System.SByte,System.SByte)">
            <summary>
            Returns a random sbyte within a specified range
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextBool">
            <summary>
            Returns a random bool
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextBool(System.Double)">
            <summary>
            Returns a random bool based on the probability a true result
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextDouble(System.Double)">
            <summary>
            Returns a random double between 0.0 and the specified maximum.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextDouble(System.Double,System.Double)">
            <summary>
            Returns a random double within a specified range.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextFloat">
            <summary>
            Returns a random float.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextFloat(System.Single)">
            <summary>
            Returns a random float between 0.0 and the specified maximum.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextFloat(System.Single,System.Single)">
            <summary>
            Returns a random float within a specified range.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextEnum(System.Type)">
            <summary>
            Returns a random enum value of the specified Type as an object.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextEnum``1">
            <summary>
            Returns a random enum value of the specified Type.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Randomizer.DefaultStringChars">
            <summary>
            Default characters for random functions.
            </summary>
            <remarks>Default characters are the English alphabet (uppercase &amp; lowercase), Arabic numerals, and underscore</remarks>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.GetString(System.Int32,System.String)">
            <summary>
            Generate a random string based on the characters from the input string.
            </summary>
            <param name="outputLength">desired length of output string.</param>
            <param name="allowedChars">string representing the set of characters from which to construct the resulting string</param>
            <returns>A random string of arbitrary length</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.GetString(System.Int32)">
            <summary>
            Generate a random string based on the characters from the input string.
            </summary>
            <param name="outputLength">desired length of output string.</param>
            <returns>A random string of arbitrary length</returns>
            <remarks>Uses <see cref="F:NUnit.Framework.Internal.Randomizer.DefaultStringChars">DefaultStringChars</see> as the input character set </remarks>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.GetString">
            <summary>
            Generate a random string based on the characters from the input string.
            </summary>
            <returns>A random string of the default length</returns>
            <remarks>Uses <see cref="F:NUnit.Framework.Internal.Randomizer.DefaultStringChars">DefaultStringChars</see> as the input character set </remarks>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextDecimal">
            <summary>
            Returns a random decimal.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextDecimal(System.Decimal)">
            <summary>
            Returns a random decimal between positive zero and the specified maximum.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextDecimal(System.Decimal,System.Decimal)">
            <summary>
            Returns a random decimal within a specified range, which is not
            permitted to exceed decimal.MaxVal in the current implementation.
            </summary>
            <remarks>
            A limitation of this implementation is that the range from min
            to max must not exceed decimal.MaxVal.
            </remarks>
        </member>
        <member name="M:NUnit.Framework.Internal.Randomizer.NextGuid">
            <summary>
            Generates a valid version 4 <see cref="T:System.Guid"/>.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.Reflect">
             <summary>
             Helper methods for inspecting a type by reflection.
            
             Many of these methods take ICustomAttributeProvider as an
             argument to avoid duplication, even though certain attributes can
             only appear on specific types of members, like MethodInfo or Type.
            
             In the case where a type is being examined for the presence of
             an attribute, interface or named member, the Reflect methods
             operate with the full name of the member being sought. This
             removes the necessity of the caller having a reference to the
             assembly that defines the item being sought and allows the
             NUnit core to inspect assemblies that reference an older
             version of the NUnit framework.
             </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Reflect.HasMethodWithAttribute(System.Type,System.Type)">
            <summary>
            Examine a fixture type and return true if it has a method with
            a particular attribute.
            </summary>
            <param name="fixtureType">The type to examine</param>
            <param name="attributeType">The attribute Type to look for</param>
            <returns>True if found, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Reflect.Construct(System.Type)">
            <summary>
            Invoke the default constructor on a Type
            </summary>
            <param name="type">The Type to be constructed</param>
            <returns>An instance of the Type</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Reflect.Construct(System.Type,System.Object[])">
            <summary>
            Invoke a constructor on a Type with arguments
            </summary>
            <param name="type">The Type to be constructed</param>
            <param name="arguments">Arguments to the constructor</param>
            <returns>An instance of the Type</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Reflect.GetTypeArray(System.Object[])">
            <summary>
            Returns an array of types from an array of objects.
            Differs from <see cref="M:System.Type.GetTypeArray(System.Object[])"/> by returning <see langword="null"/>
            for null elements rather than throwing <see cref="T:System.ArgumentNullException"/>.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Reflect.GetConstructors(System.Type,System.Type[])">
            <summary>
            Gets the constructors to which the specified argument types can be coerced.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Reflect.ParametersMatch(System.Reflection.ParameterInfo[],System.Type[])">
            <summary>
            Determines if the given types can be coerced to match the given parameters.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Reflect.CanImplicitlyConvertTo(System.Type,System.Type)">
            <summary>
            Determines whether the current type can be implicitly converted to the specified type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Reflect.InvokeMethod(System.Reflection.MethodInfo,System.Object)">
            <summary>
            Invoke a parameterless method returning void on an object.
            </summary>
            <param name="method">A MethodInfo for the method to be invoked</param>
            <param name="fixture">The object on which to invoke the method</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Reflect.InvokeMethod(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
            Invoke a method, converting any TargetInvocationException to an NUnitException.
            </summary>
            <param name="method">A MethodInfo for the method to be invoked</param>
            <param name="fixture">The object on which to invoke the method</param>
            <param name="args">The argument list for the method</param>
            <returns>The return value from the invoked method</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Reflect.GetUltimateShadowingProperty(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            <para>
            Selects the ultimate shadowing property just like <c>dynamic</c> would,
            rather than throwing <see cref="T:System.Reflection.AmbiguousMatchException"/>
            for properties that shadow properties of a different property type
            which is what <see cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)"/> does.
            </para>
            <para>
            If you request both public and nonpublic properties, every public property is preferred
            over every nonpublic property. It would violate the principle of least surprise for a
            derived class’s implementation detail to be chosen over the public API for a type.
            </para>
            </summary>
            <param name="type">See <see cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)"/>.</param>
            <param name="name">See <see cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)"/>.</param>
            <param name="bindingFlags">See <see cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)"/>.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Reflect.GetNonGenericPublicInstanceMethod(System.Type,System.String,System.Type[])">
            <summary>
            Same as <c>GetMethod(<paramref name="name"/>, <see cref="F:System.Reflection.BindingFlags.Public"/> |
            <see cref="F:System.Reflection.BindingFlags.Instance"/>, <see langword="null"/>, <paramref name="parameterTypes"/>,
            <see langword="null"/>)</c> except that it also chooses only non-generic methods.
            Useful for avoiding the <see cref="T:System.Reflection.AmbiguousMatchException"/> you can have with <c>GetMethod</c>.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Reflect.GetDefaultIndexer(System.Type,System.Type[])">
            <summary>
            Returns the get accessor for the indexer.
            </summary>
            <param name="type">Type to reflect on for the indexer.</param>
            <param name="indexerTypes">List of indexer types that matches the indexer type order.</param>
            <returns>The Get accessor</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Reflect.GetMemberIncludingFromBase(System.Type,System.String,System.Reflection.BindingFlags)">
            <summary>
            Searches for the specified members, using the specified binding constraints.
            </summary>
            <remarks>
            Similar to <see cref="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)"/> but also finds private static members from the base class.
            </remarks>
            <param name="type">The type to find the members from.</param>
            <param name="name">The string containing the name of the members to get.</param>
            <param name="flags">A bitwise combination of the enumeration values that specify how the search is conducted.</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Internal.TestCaseResult">
            <summary>
            Represents the result of running a single test case.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestCaseResult.#ctor(NUnit.Framework.Internal.TestMethod)">
            <summary>
            Construct a TestCaseResult based on a TestMethod
            </summary>
            <param name="test">A TestMethod to which the result applies.</param>
        </member>
        <member name="P:NUnit.Framework.Internal.TestCaseResult.FailCount">
            <summary>
            Gets the number of test cases that failed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestCaseResult.TotalCount">
            <summary>
            Gets the number of test cases that executed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestCaseResult.WarningCount">
            <summary>
            Gets the number of test cases that had warnings
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestCaseResult.PassCount">
            <summary>
            Gets the number of test cases that passed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestCaseResult.SkipCount">
            <summary>
            Gets the number of test cases that were skipped
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestCaseResult.InconclusiveCount">
            <summary>
            Gets the number of test cases that were inconclusive
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestCaseResult.HasChildren">
            <summary>
            Indicates whether this result has any child results.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestCaseResult.Children">
            <summary>
            Gets the collection of child results.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.TestResult">
            <summary>
            The TestResult class represents the result of a test.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestResult.CHILD_ERRORS_MESSAGE">
            <summary>
            Error message for when child tests have errors
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestResult.CHILD_WARNINGS_MESSAGE">
            <summary>
            Error message for when child tests have warnings
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestResult.CHILD_IGNORE_MESSAGE">
            <summary>
            Error message for when child tests are ignored
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestResult.USER_CANCELLED_MESSAGE">
            <summary>
            Error message for when user has cancelled the test run
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestResult.MIN_DURATION">
            <summary>
            The minimum duration for tests
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestResult.InternalAssertCount">
            <summary>
            Aggregate assertion count
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestResult.RwLock">
            <summary>
            ReaderWriterLock
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.#ctor(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Construct a test result given a Test
            </summary>
            <param name="test">The test to be used</param>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.Test">
            <summary>
            Gets the test with which this result is associated.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.ResultState">
            <summary>
            Gets the ResultState of the test result, which
            indicates the success or failure of the test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.Name">
            <summary>
            Gets the name of the test result
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.FullName">
            <summary>
            Gets the full name of the test result
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.Duration">
            <summary>
            Gets or sets the elapsed time for running the test in seconds
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.StartTime">
            <summary>
            Gets or sets the time the test started running.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.EndTime">
            <summary>
            Gets or sets the time the test finished running.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.AddTestAttachment(NUnit.Framework.Interfaces.TestAttachment)">
            <summary>
            Adds a test attachment to the test result
            </summary>
            <param name="attachment">The TestAttachment object to attach</param>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.TestAttachments">
            <summary>
            Gets the collection of files attached to the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.Message">
            <summary>
            Gets the message associated with a test
            failure or with not running the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.StackTrace">
            <summary>
            Gets any stack trace associated with an
            error or failure.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.AssertCount">
            <summary>
            Gets or sets the count of asserts executed
            when running the test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.TotalCount">
            <summary>
            Gets the number of test cases executed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.FailCount">
            <summary>
            Gets the number of test cases that failed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.WarningCount">
            <summary>
            Gets the number of test cases that had warnings
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.PassCount">
            <summary>
            Gets the number of test cases that passed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.SkipCount">
            <summary>
            Gets the number of test cases that were skipped
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.InconclusiveCount">
            <summary>
            Gets the number of test cases that were inconclusive
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.HasChildren">
            <summary>
            Indicates whether this result has any child results.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.Children">
            <summary>
            Gets the collection of child results.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.OutWriter">
            <summary>
            Gets a TextWriter, which will write output to be included in the result.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.Output">
            <summary>
            Gets any text output written to this result.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.AssertionResults">
            <summary>
            Gets a list of assertion results associated with the test.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.ToXml(System.Boolean)">
            <summary>
            Returns the XML representation of the result.
            </summary>
            <param name="recursive">If true, descendant results are included</param>
            <returns>An XmlNode representing the result</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.AddToXml(NUnit.Framework.Interfaces.TNode,System.Boolean)">
            <summary>
            Adds the XML representation of the result as a child of the
            supplied parent node..
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="recursive">If true, descendant results are included</param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.PendingFailures">
            <summary>
            Gets a count of pending failures (from Multiple Assert)
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestResult.WorstAssertionStatus">
            <summary>
            Gets the worst assertion status (highest enum) in all the assertion results
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.SetResult(NUnit.Framework.Interfaces.ResultState)">
            <summary>
            Set the result of the test
            </summary>
            <param name="resultState">The ResultState to use in the result</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.SetResult(NUnit.Framework.Interfaces.ResultState,System.String)">
            <summary>
            Set the result of the test
            </summary>
            <param name="resultState">The ResultState to use in the result</param>
            <param name="message">A message associated with the result state</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.SetResult(NUnit.Framework.Interfaces.ResultState,System.String,System.String)">
            <summary>
            Set the result of the test
            </summary>
            <param name="resultState">The ResultState to use in the result</param>
            <param name="message">A message associated with the result state</param>
            <param name="stackTrace">Stack trace giving the location of the command</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.RecordException(System.Exception)">
            <summary>
            Set the test result based on the type of exception thrown
            </summary>
            <param name="ex">The exception that was thrown</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.RecordException(System.Exception,NUnit.Framework.Interfaces.FailureSite)">
            <summary>
            Set the test result based on the type of exception thrown
            </summary>
            <param name="ex">The exception that was thrown</param>
            <param name="site">The FailureSite to use in the result</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.RecordTearDownException(System.Exception)">
            <summary>
            RecordTearDownException appends the message and stack trace
            from an exception arising during teardown of the test
            to any previously recorded information, so that any
            earlier failure information is not lost. Note that
            calling Assert.Ignore, Assert.Inconclusive, etc. during
            teardown is treated as an error. If the current result
            represents a suite, it may show a teardown error even
            though all contained tests passed.
            </summary>
            <param name="ex">The Exception to be recorded</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.RecordTestCompletion">
            <summary>
            Update overall test result, including legacy Message, based
            on AssertionResults that have been saved to this point.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.RecordAssertion(NUnit.Framework.Interfaces.AssertionResult)">
            <summary>
            Record an assertion result
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.RecordAssertion(NUnit.Framework.Interfaces.AssertionStatus,System.String,System.String)">
            <summary>
            Record an assertion result
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.RecordAssertion(NUnit.Framework.Interfaces.AssertionStatus,System.String)">
            <summary>
            Record an assertion result
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.CreateLegacyFailureMessage">
            <summary>
            Creates a failure message incorporating failures
            from a Multiple Assert block for use by runners
            that don't know about AssertionResults.
            </summary>
            <returns>Message as a string</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.AddFailureElement(NUnit.Framework.Interfaces.TNode)">
            <summary>
            Adds a failure element to a node and returns it.
            </summary>
            <param name="targetNode">The target node.</param>
            <returns>The new failure element.</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestResult.AddAttachmentsElement(NUnit.Framework.Interfaces.TNode)">
            <summary>
            Adds an attachments element to a node and returns it.
            </summary>
            <param name="targetNode">The target node.</param>
            <returns>The new attachments element.</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.TestSuiteResult">
            <summary>
            Represents the result of running a test suite
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuiteResult.#ctor(NUnit.Framework.Internal.TestSuite)">
            <summary>
            Construct a TestSuiteResult base on a TestSuite
            </summary>
            <param name="suite">The TestSuite to which the result applies</param>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuiteResult.TotalCount">
            <summary>
            Gets the number of test cases that executed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuiteResult.FailCount">
            <summary>
            Gets the number of test cases that failed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuiteResult.PassCount">
            <summary>
            Gets the number of test cases that passed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuiteResult.WarningCount">
            <summary>
            Gets the number of test cases that passed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuiteResult.SkipCount">
            <summary>
            Gets the number of test cases that were skipped
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuiteResult.InconclusiveCount">
            <summary>
            Gets the number of test cases that were inconclusive
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuiteResult.HasChildren">
            <summary>
            Indicates whether this result has any child results.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuiteResult.Children">
            <summary>
            Gets the collection of child results.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuiteResult.AddResult(NUnit.Framework.Interfaces.ITestResult)">
            <summary>
            Adds a child result to this result, setting this result's
            ResultState to Failure if the child result failed.
            </summary>
            <param name="result">The result to be added</param>
        </member>
        <member name="T:NUnit.Framework.Internal.RuntimeFramework">
            <summary>
            RuntimeFramework represents a particular version
            of a common language runtime implementation.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.RuntimeFramework.DefaultVersion">
            <summary>
            DefaultVersion is an empty Version, used to indicate that
            NUnit should select the CLR version to use for the test.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.RuntimeFramework.#ctor(NUnit.Framework.Internal.RuntimeType,System.Version)">
            <summary>
            Construct from a runtime type and version. If the version has
            two parts, it is taken as a framework version. If it has three
            or more, it is taken as a CLR version. In either case, the other
            version is deduced based on the runtime type and provided version.
            </summary>
            <param name="runtime">The runtime type of the framework</param>
            <param name="version">The version of the framework</param>
        </member>
        <member name="P:NUnit.Framework.Internal.RuntimeFramework.CurrentFramework">
            <summary>
            Static method to return a RuntimeFramework object
            for the framework that is currently in use.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.RuntimeFramework.Runtime">
            <summary>
            The type of this runtime framework
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.RuntimeFramework.FrameworkVersion">
            <summary>
            The framework version for this runtime framework
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.RuntimeFramework.ClrVersion">
            <summary>
            The CLR version for this runtime framework
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.RuntimeFramework.AllowAnyVersion">
            <summary>
            Return true if any CLR version may be used in
            matching this RuntimeFramework object.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.RuntimeFramework.DisplayName">
            <summary>
            Returns the Display name for this framework
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.RuntimeFramework.Parse(System.String)">
            <summary>
            Parses a string representing a RuntimeFramework.
            The string may be just a RuntimeType name or just
            a Version or a hyphenated RuntimeType-Version or
            a Version prefixed by 'versionString'.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.RuntimeFramework.ToString">
            <summary>
            Overridden to return the short name of the framework
            </summary>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.RuntimeFramework.Supports(NUnit.Framework.Internal.RuntimeFramework)">
            <summary>
            Returns true if the current framework matches the
            one supplied as an argument. Two frameworks match
            if their runtime types are the same or either one
            is RuntimeType.Any and all specified version components
            are equal. Negative (i.e. unspecified) version
            components are ignored.
            </summary>
            <param name="target">The RuntimeFramework to be matched.</param>
            <returns>True on match, otherwise false</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.RuntimeType">
            <summary>
            Enumeration identifying a common language
            runtime implementation.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.RuntimeType.Any">
            <summary>Any supported runtime framework</summary>
        </member>
        <member name="F:NUnit.Framework.Internal.RuntimeType.NetFramework">
            <summary>Microsoft .NET Framework</summary>
        </member>
        <member name="F:NUnit.Framework.Internal.RuntimeType.Net">
            <summary>Microsoft .NET Framework</summary>
        </member>
        <member name="F:NUnit.Framework.Internal.RuntimeType.SSCLI">
            <summary>Microsoft Shared Source CLI</summary>
        </member>
        <member name="F:NUnit.Framework.Internal.RuntimeType.Mono">
            <summary>Mono</summary>
        </member>
        <member name="F:NUnit.Framework.Internal.RuntimeType.MonoTouch">
            <summary>MonoTouch</summary>
        </member>
        <member name="F:NUnit.Framework.Internal.RuntimeType.NetCore">
            <summary>Microsoft .NET Core, including .NET 5+</summary>
        </member>
        <member name="T:NUnit.Framework.Internal.SandboxedThreadState">
            <summary>
            Holds thread state which is captured and restored in order to sandbox user code.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.SandboxedThreadState.Principal">
            <summary>
            Thread principal.
            This will be null on platforms that don't support <see cref="P:System.Threading.Thread.CurrentPrincipal"/>.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.SandboxedThreadState.Capture">
            <summary>
            Captures a snapshot of the tracked state of the current thread to be restored later.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.SandboxedThreadState.Restore">
            <summary>
            Restores the tracked state of the current thread to the previously captured state.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.SandboxedThreadState.WithCulture(System.Globalization.CultureInfo)">
            <summary>
            Returns a copy with the specified culture.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.SandboxedThreadState.WithUICulture(System.Globalization.CultureInfo)">
            <summary>
            Returns a copy with the specified UI culture.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.SandboxedThreadState.WithPrincipal(System.Security.Principal.IPrincipal)">
            <summary>
            Returns a copy with the specified principal.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.SingleThreadedTestSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            May be called from any thread.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.SingleThreadedTestSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            May be called from any thread.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.SingleThreadedTestSynchronizationContext.ShutDown">
            <summary>
            May be called from any thread.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.SingleThreadedTestSynchronizationContext.Run">
            <summary>
            May be called from any thread, but may only be called once.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.StackFilter">
            <summary>
            StackFilter class is used to remove internal NUnit
            entries from a stack trace so that the resulting
            trace provides better information about the test.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.StackFilter.DefaultFilter">
            <summary>
            Single instance of our default filter
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.StackFilter.#ctor(System.String,System.String)">
            <summary>
            Construct a stack filter instance
            </summary>
            <param name="topOfStackPattern">Regex pattern used to delete lines from the top of the stack</param>
            <param name="bottomOfStackPattern">Regex pattern used to delete lines from the bottom of the stack</param>
        </member>
        <member name="M:NUnit.Framework.Internal.StackFilter.#ctor(System.String)">
            <summary>
            Construct a stack filter instance
            </summary>
            <param name="topOfStackPattern">Regex pattern used to delete lines from the top of the stack</param>
        </member>
        <member name="M:NUnit.Framework.Internal.StackFilter.#ctor">
            <summary>
            Construct a stack filter instance
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.StackFilter.Filter(System.String)">
            <summary>
            Filters a raw stack trace and returns the result.
            </summary>
            <param name="rawTrace">The original stack trace</param>
            <returns>A filtered stack trace</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.StringUtil">
            <summary>
            Provides methods to support legacy string comparison methods.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.StringUtil.Compare(System.String,System.String,System.Boolean)">
            <summary>
            Compares two strings for equality, ignoring case if requested.
            </summary>
            <param name="strA">The first string.</param>
            <param name="strB">The second string..</param>
            <param name="ignoreCase">if set to <see langword="true"/>, the case of the letters in the strings is ignored.</param>
            <returns>Zero if the strings are equivalent, a negative number if strA is sorted first, a positive number if
            strB is sorted first</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.StringUtil.StringsEqual(System.String,System.String,System.Boolean)">
            <summary>
            Compares two strings for equality, ignoring case if requested.
            </summary>
            <param name="strA">The first string.</param>
            <param name="strB">The second string..</param>
            <param name="ignoreCase">if set to <see langword="true"/>, the case of the letters in the strings is ignored.</param>
            <returns>True if the strings are equivalent, false if not.</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.TestCaseParameters">
            <summary>
            The TestCaseParameters class encapsulates method arguments and
            other selected parameters needed for constructing
            a parameterized test case.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestCaseParameters._expectedResult">
            <summary>
            The expected result to be returned
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestCaseParameters.#ctor">
            <summary>
            Default Constructor creates an empty parameter set
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestCaseParameters.#ctor(System.Exception)">
            <summary>
            Construct a non-runnable ParameterSet, specifying
            the provider exception that made it invalid.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestCaseParameters.#ctor(System.Object[])">
            <summary>
            Construct a parameter set with a list of arguments
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestCaseParameters.#ctor(NUnit.Framework.Interfaces.ITestCaseData)">
            <summary>
            Construct a ParameterSet from an object implementing ITestCaseData
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:NUnit.Framework.Internal.TestCaseParameters.ExpectedResult">
            <summary>
            The expected result of the test, which
            must match the method return type.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestCaseParameters.HasExpectedResult">
            <summary>
            Gets a value indicating whether an expected result was specified.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.TestCaseTimeoutException">
            <summary>
            TestCaseTimeoutException is thrown when a test running directly
            on a TestWorker thread is cancelled due to timeout.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestCaseTimeoutException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestCaseTimeoutException"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestCaseTimeoutException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestCaseTimeoutException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestCaseTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestCaseTimeoutException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestCaseTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.TestExecutionContext">
            <summary>
            Helper class used to save and restore certain static or
            singleton settings in the environment that affect tests
            or which might be changed by the user tests.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestExecutionContext._priorContext">
            <summary>
            Link to a prior saved context
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestExecutionContext._executionStatus">
            <summary>
            Indicates that a stop has been requested
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestExecutionContext._listener">
            <summary>
            The event listener currently receiving notifications
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestExecutionContext._assertCount">
            <summary>
            The number of assertions for the current test
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestExecutionContext._currentResult">
            <summary>
            The current test result
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestExecutionContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestExecutionContext"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestExecutionContext.#ctor(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestExecutionContext"/> class.
            </summary>
            <param name="other">An existing instance of TestExecutionContext.</param>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.CurrentContext">
            <summary>
            Gets and sets the current context.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.CurrentTest">
            <summary>
            Gets or sets the current test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.StartTime">
            <summary>
            The time the current test started execution
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.StartTicks">
            <summary>
            The time the current test started in Ticks
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.Duration">
            <summary>
            Gets the elapsed time for running the test in seconds
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.CurrentResult">
            <summary>
            Gets or sets the current test result
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.OutWriter">
            <summary>
            Gets a TextWriter that will send output to the current test result.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.TestObject">
            <summary>
            The current test object - that is the user fixture
            object on which tests are being executed.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.StopOnError">
            <summary>
            Get or set indicator that run should stop on the first error
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.ExecutionStatus">
            <summary>
            Gets an enum indicating whether a stop has been requested.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.Listener">
            <summary>
            The current test event listener
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.Dispatcher">
            <summary>
            The current WorkItemDispatcher. Made public for
            use by nunitlite.tests
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.ParallelScope">
            <summary>
            The ParallelScope to be used by tests running in this context.
            For builds with out the parallel feature, it has no effect.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.DefaultFloatingPointTolerance">
            <summary>
            Default tolerance value used for floating point equality
            when no other tolerance is specified.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.TestWorker">
            <summary>
            The worker that spawned the context.
            For builds without the parallel feature, it is null.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.RandomGenerator">
            <summary>
            Gets the RandomGenerator specific to this Test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.AssertCount">
            <summary>
            Gets the assert count.
            </summary>
            <value>The assert count.</value>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.MultipleAssertLevel">
            <summary>
            The current nesting level of multiple assert blocks
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.TestCaseTimeout">
            <summary>
            Gets or sets the test case timeout value
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.UpstreamActions">
            <summary>
            Gets a list of ITestActions set by upstream tests
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.CurrentCulture">
            <summary>
            Saves or restores the CurrentCulture
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.CurrentUICulture">
            <summary>
            Saves or restores the CurrentUICulture
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.CurrentPrincipal">
            <summary>
            Gets or sets the current <see cref="T:System.Security.Principal.IPrincipal"/> for the Thread.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.CurrentValueFormatter">
            <summary>
            The current head of the ValueFormatter chain, copied from MsgUtils.ValueFormatter
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.IsSingleThreaded">
            <summary>
            If true, all tests must run on the same thread. No new thread may be spawned.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestExecutionContext.CurrentRepeatCount">
            <summary>
            The number of times the current test has been scheduled for execution.
            Currently only being executed in a test using the <see cref="T:NUnit.Framework.RetryAttribute"/>
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestExecutionContext.UpdateContextFromEnvironment">
            <summary>
            Record any changes in the environment made by
            the test code in the execution context so it
            will be passed on to lower level tests.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestExecutionContext.EstablishExecutionEnvironment">
            <summary>
            Set up the execution environment to match a context.
            Note that we may be running on the same thread where the
            context was initially created or on a different thread.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestExecutionContext.IncrementAssertCount">
            <summary>
            Increments the assert count by one.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestExecutionContext.IncrementAssertCount(System.Int32)">
            <summary>
            Increments the assert count by a specified amount.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestExecutionContext.AddFormatter(NUnit.Framework.Constraints.ValueFormatterFactory)">
            <summary>
            Adds a new ValueFormatterFactory to the chain of formatters
            </summary>
            <param name="formatterFactory">The new factory</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestExecutionContext.SendMessage(System.String,System.String)">
            <summary>
            Sends a message from test to listeners. This message is not kind of test output and doesn't go to test result.
            </summary>
            <param name="destination">A name recognized by the intended listeners.</param>
            <param name="message">A message to be sent</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestExecutionContext.InitializeLifetimeService">
            <summary>
            Obtain lifetime service object
            </summary>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.Internal.TestExecutionContext.IsolatedContext">
            <summary>
            An IsolatedContext is used when running code
            that may effect the current result in ways that
            should not impact the final result of the test.
            A new TestExecutionContext is created with an
            initially clear result, which is discarded on
            exiting the context.
            </summary>
            <example>
                using (new TestExecutionContext.IsolatedContext())
                {
                    // Code that should not impact the result
                }
            </example>
        </member>
        <member name="M:NUnit.Framework.Internal.TestExecutionContext.IsolatedContext.#ctor">
            <summary>
            Save the original current TestExecutionContext and
            make a new isolated context current.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestExecutionContext.IsolatedContext.Dispose">
            <summary>
            Restore the original TestExecutionContext.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.TestExecutionContext.AdhocContext">
            <summary>
            An AdhocTestExecutionContext is created whenever a context is needed
            but not available in CurrentContext. This happens when tests are run
            on an ad-hoc basis or Asserts are used outside of tests.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestExecutionContext.AdhocContext.#ctor">
            <summary>
            Construct an AdhocTestExecutionContext, which is used
            whenever the current TestExecutionContext is found to be null.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.TestExecutionStatus">
            <summary>
            Enumeration indicating whether the tests are 
            running normally or being cancelled.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestExecutionStatus.Running">
            <summary>
            Running normally with no stop requested
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestExecutionStatus.StopRequested">
            <summary>
            A graceful stop has been requested
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestExecutionStatus.AbortRequested">
            <summary>
            A forced stop has been requested
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.TestFilter">
            <summary>
            Interface to be implemented by filters applied to tests.
            The filter applies when running the test, after it has been
            loaded, since this is the only time an ITest exists.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestFilter.Empty">
            <summary>
            Unique Empty filter.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestFilter.IsEmpty">
            <summary>
            Indicates whether this is the EmptyFilter
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestFilter.TopLevel">
            <summary>
            Indicates whether this is a top-level filter,
            not contained in any other filter.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFilter.Pass(NUnit.Framework.Interfaces.ITest)">
             <summary>
             Determine if a particular test passes the filter criteria. The default
             implementation checks the test itself, its parents and any descendants.
            
             Derived classes may override this method or any of the Match methods
             to change the behavior of the filter.
             </summary>
             <param name="test">The test to which the filter is applied</param>
             <returns>True if the test passes the filter, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFilter.Pass(NUnit.Framework.Interfaces.ITest,System.Boolean)">
             <summary>
             Determine if a particular test passes the filter criteria. The default
             implementation checks the test itself, its parents and any descendants.
            
             Derived classes may override this method or any of the Match methods
             to change the behavior of the filter.
             </summary>
             <param name="test">The test to which the filter is applied</param>
             <param name="negated">If set to <see langword="true"/> we are carrying a negation through</param>
             <returns>True if the test passes the filter, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFilter.IsExplicitMatch(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Determine if a test matches the filter explicitly. That is, it must
            be a direct match of the test itself or one of its children.
            </summary>
            <param name="test">The test to which the filter is applied</param>
            <returns>True if the test matches the filter explicitly, otherwise false</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFilter.Match(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Determine whether the test itself matches the filter criteria, without
            examining either parents or descendants. This is overridden by each
            different type of filter to perform the necessary tests.
            </summary>
            <param name="test">The test to which the filter is applied</param>
            <returns>True if the filter matches the any parent of the test</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFilter.MatchParent(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Determine whether any ancestor of the test matches the filter criteria
            </summary>
            <param name="test">The test to which the filter is applied</param>
            <returns>True if the filter matches the an ancestor of the test</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFilter.MatchDescendant(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Determine whether any descendant of the test matches the filter criteria.
            </summary>
            <param name="test">The test to be matched</param>
            <returns>True if at least one descendant matches the filter criteria</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFilter.FromXml(System.String)">
            <summary>
            Create a TestFilter instance from an XML representation.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFilter.FromXml(NUnit.Framework.Interfaces.TNode)">
            <summary>
            Create a TestFilter from its TNode representation
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.TestFilter.EmptyFilter">
            <summary>
            Nested class provides an empty filter - one that always
            returns true when called. It never matches explicitly.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFilter.ToXml(System.Boolean)">
            <summary>
            Adds an XML node
            </summary>
            <param name="recursive">True if recursive</param>
            <returns>The added XML node</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFilter.AddToXml(NUnit.Framework.Interfaces.TNode,System.Boolean)">
            <summary>
            Adds an XML node
            </summary>
            <param name="parentNode">Parent node</param>
            <param name="recursive">True if recursive</param>
            <returns>The added XML node</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.TestFixtureParameters">
            <summary>
            The TestCaseParameters class encapsulates method arguments and
            other selected parameters needed for constructing
            a parameterized test case.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFixtureParameters.#ctor">
            <summary>
            Default Constructor creates an empty parameter set
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFixtureParameters.#ctor(System.Exception)">
            <summary>
            Construct a non-runnable ParameterSet, specifying
            the provider exception that made it invalid.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFixtureParameters.#ctor(System.Object[])">
            <summary>
            Construct a parameter set with a list of arguments
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFixtureParameters.#ctor(NUnit.Framework.Interfaces.ITestFixtureData)">
            <summary>
            Construct a ParameterSet from an object implementing ITestCaseData
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:NUnit.Framework.Internal.TestFixtureParameters.TypeArgs">
            <summary>
            Type arguments used to create a generic fixture instance
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.TestListener">
            <summary>
            TestListener provides an implementation of ITestListener that
            does nothing. It is used only through its NULL property.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestListener.TestStarted(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Called when a test has just started
            </summary>
            <param name="test">The test that is starting</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestListener.TestFinished(NUnit.Framework.Interfaces.ITestResult)">
            <summary>
            Called when a test case has finished
            </summary>
            <param name="result">The result of the test</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestListener.TestOutput(NUnit.Framework.Interfaces.TestOutput)">
            <summary>
            Called when a test produces output for immediate display
            </summary>
            <param name="output">A TestOutput object containing the text to display</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestListener.SendMessage(NUnit.Framework.Interfaces.TestMessage)">
            <summary>
            Called when a test produces a message to be sent to listeners
            </summary>
            <param name="message">A <see cref="T:NUnit.Framework.Interfaces.TestMessage"/> object containing the message to send</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestListener.#ctor">
            <summary>
            Construct a new TestListener - private so it may not be used.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestListener.NULL">
            <summary>
            Get a listener that does nothing
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.TestNameGenerator">
            <summary>
            TestNameGenerator is able to create test names according to
            a coded pattern.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestNameGenerator.DefaultTestNamePattern">
            <summary>
            Default pattern used to generate names
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestNameGenerator.#ctor">
            <summary>
            Construct a TestNameGenerator
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestNameGenerator.#ctor(System.String)">
            <summary>
            Construct a TestNameGenerator
            </summary>
            <param name="pattern">The pattern used by this generator.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestNameGenerator.GetDisplayName(NUnit.Framework.Internal.TestMethod)">
            <summary>
            Get the display name for a TestMethod and its arguments
            </summary>
            <param name="testMethod">A TestMethod</param>
            <returns>The display name</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestNameGenerator.GetDisplayName(NUnit.Framework.Internal.TestMethod,System.Object[])">
            <summary>
            Get the display name for a TestMethod and its arguments
            </summary>
            <param name="testMethod">A TestMethod</param>
            <param name="args">Arguments to be used</param>
            <returns>The display name</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestNameGenerator.NameFragment.MayNeedEscape(System.String)">
            <summary>
            Checks if string contains any character that might need escaping.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestNameGenerator.NameFragment.MayNeedEscape(System.Char)">
            <summary>
            Checks whether given char *might* need escaping.
            </summary>
            <returns>False when absolutely no escaping is needed, otherwise true.</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.TestParameters">
            <summary>
            TestParameters is the abstract base class for all classes
            that know how to provide data for constructing a test.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestParameters.#ctor">
            <summary>
            Default Constructor creates an empty parameter set
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestParameters.#ctor(System.Object[])">
            <summary>
            Construct a parameter set with a list of arguments
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestParameters.#ctor(System.Exception)">
            <summary>
            Construct a non-runnable ParameterSet, specifying
            the provider exception that made it invalid.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestParameters.#ctor(NUnit.Framework.Interfaces.ITestData)">
            <summary>
            Construct a ParameterSet from an object implementing ITestData
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:NUnit.Framework.Internal.TestParameters.RunState">
            <summary>
            The RunState for this set of parameters.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestParameters.Arguments">
            <summary>
            The arguments to be used in running the test,
            which must match the method signature.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestParameters.TestName">
            <summary>
            A name to be used for this test case in lieu
            of the standard generated name containing
            the argument list.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestParameters.Properties">
            <summary>
            Gets the property dictionary for this test
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestParameters.ApplyToTest(NUnit.Framework.Internal.Test)">
            <summary>
            Applies ParameterSet values to the test itself.
            </summary>
            <param name="test">A test.</param>
        </member>
        <member name="P:NUnit.Framework.Internal.TestParameters.OriginalArguments">
            <summary>
            The original arguments provided by the user,
            used for display purposes.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestParameters.ArgDisplayNames">
            <summary>
            The list of display names to use as the parameters in the test name.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.TestProgressReporter">
            <summary>
            TestProgressReporter translates ITestListener events into
            the async callbacks that are used to inform the client
            software about the progress of a test run.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestProgressReporter.#ctor(System.Web.UI.ICallbackEventHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestProgressReporter"/> class.
            </summary>
            <param name="handler">The callback handler to be used for reporting progress.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestProgressReporter.TestStarted(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Called when a test has just started
            </summary>
            <param name="test">The test that is starting</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestProgressReporter.TestFinished(NUnit.Framework.Interfaces.ITestResult)">
            <summary>
            Called when a test has finished. Sends a result summary to the callback.
            to 
            </summary>
            <param name="result">The result of the test</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestProgressReporter.TestOutput(NUnit.Framework.Interfaces.TestOutput)">
            <summary>
            Called when a test produces output for immediate display
            </summary>
            <param name="output">A TestOutput object containing the text to display</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestProgressReporter.SendMessage(NUnit.Framework.Interfaces.TestMessage)">
            <summary>
            Called when a test produces a message to be sent to listeners
            </summary>
            <param name="message">A <see cref="T:NUnit.Framework.Interfaces.TestMessage"/> object containing the text to send</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestProgressReporter.GetParent(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Returns the parent test item for the target test item if it exists
            </summary>
            <param name="test"></param>
            <returns>parent test item</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestProgressReporter.FormatAttributeValue(System.String)">
            <summary>
            Makes a string safe for use as an attribute, replacing
            characters that can't be used with their
            corresponding XML representations.
            </summary>
            <param name="original">The string to be used</param>
            <returns>A new string with the values replaced</returns>
        </member>
        <member name="T:NUnit.Framework.Internal.ParameterizedFixtureSuite">
            <summary>
            ParameterizedFixtureSuite serves as a container for the set of test
            fixtures created from a given Type using various parameters.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.ParameterizedFixtureSuite.#ctor(NUnit.Framework.Interfaces.ITypeInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.ParameterizedFixtureSuite"/> class.
            </summary>
            <param name="typeInfo">The ITypeInfo for the type that represents the suite.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.ParameterizedFixtureSuite.#ctor(NUnit.Framework.Internal.ParameterizedFixtureSuite,NUnit.Framework.Interfaces.ITestFilter)">
            <summary>
            Creates a copy of the given suite with only the descendants that pass the specified filter.
            </summary>
            <param name="suite">The <see cref="T:NUnit.Framework.Internal.ParameterizedFixtureSuite"/> to copy.</param>
            <param name="filter">Determines which descendants are copied.</param>
        </member>
        <member name="P:NUnit.Framework.Internal.ParameterizedFixtureSuite.TestType">
            <summary>
            Gets a string representing the type of test
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.ParameterizedFixtureSuite.Copy(NUnit.Framework.Interfaces.ITestFilter)">
            <summary>
            Creates a filtered copy of the test suite.
            </summary>
            <param name="filter">Determines which descendants are copied.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.ParameterizedMethodSuite">
            <summary>
            ParameterizedMethodSuite holds a collection of individual
            TestMethods with their arguments applied.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.ParameterizedMethodSuite.#ctor(NUnit.Framework.Interfaces.IMethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.ParameterizedMethodSuite"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.ParameterizedMethodSuite.#ctor(NUnit.Framework.Internal.ParameterizedMethodSuite,NUnit.Framework.Interfaces.ITestFilter)">
            <summary>
            Creates a copy of the given suite with only the descendants that pass the specified filter.
            </summary>
            <param name="suite">The <see cref="T:NUnit.Framework.Internal.ParameterizedMethodSuite"/> to copy.</param>
            <param name="filter">Determines which descendants are copied.</param>
        </member>
        <member name="P:NUnit.Framework.Internal.ParameterizedMethodSuite.Method">
            <summary>
            Gets a MethodInfo for the method implementing this test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.ParameterizedMethodSuite.TestType">
            <summary>
            Gets a string representing the type of test
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.ParameterizedMethodSuite.Copy(NUnit.Framework.Interfaces.ITestFilter)">
            <summary>
            Creates a filtered copy of the test suite.
            </summary>
            <param name="filter">Determines which descendants are copied.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.SetUpFixture">
            <summary>
            SetUpFixture extends TestSuite and supports
            Setup and TearDown methods.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.SetUpFixture.#ctor(NUnit.Framework.Interfaces.ITypeInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.SetUpFixture"/> class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.SetUpFixture.#ctor(NUnit.Framework.Internal.SetUpFixture,NUnit.Framework.Interfaces.ITestFilter)">
            <summary>
            Creates a copy of the given suite with only the descendants that pass the specified filter.
            </summary>
            <param name="setUpFixture">The <see cref="T:NUnit.Framework.Internal.SetUpFixture"/> to copy.</param>
            <param name="filter">Determines which descendants are copied.</param>
        </member>
        <member name="P:NUnit.Framework.Internal.SetUpFixture.TypeInfo">
            <summary>
            Gets the TypeInfo of the fixture used in running this test.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.SetUpFixture.Copy(NUnit.Framework.Interfaces.ITestFilter)">
            <summary>
            Creates a filtered copy of the test suite.
            </summary>
            <param name="filter">Determines which descendants are copied.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.Test">
            <summary>
            The Test abstract class represents a test within the framework.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Test._nextID">
            <summary>
            Static value to seed ids. It's started at 1000 so any
            uninitialized ids will stand out.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Test._declaringTypeInfo">
            <summary>
            Used to cache the declaring type for this MethodInfo
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.Test._method">
            <summary>
            Method property backing field
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.#ctor(System.String)">
            <summary>
            Constructs a test given its name
            </summary>
            <param name="name">The name of the test</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.#ctor(System.String,System.String)">
            <summary>
            Constructs a test given the path through the
            test hierarchy to its parent and a name.
            </summary>
            <param name="pathName">The parent tests full name</param>
            <param name="name">The name of the test</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.#ctor(NUnit.Framework.Interfaces.ITypeInfo)">
            <summary>
            Constructs a test for a specific type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.#ctor(NUnit.Framework.Interfaces.IMethodInfo)">
            <summary>
            Constructs a test for a specific method.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.Id">
            <summary>
            Gets or sets the id of the test
            </summary>
            <value></value>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.Name">
            <summary>
            Gets or sets the name of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.FullName">
            <summary>
            Gets or sets the fully qualified name of the test
            </summary>
            <value></value>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.ClassName">
            <summary>
            Gets the name of the class where this test was declared.
            Returns null if the test is not associated with a class.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.MethodName">
            <summary>
            Gets the name of the method implementing this test.
            Returns null if the test is not implemented as a method.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.Arguments">
            <summary>
            The arguments to use in creating the test or empty array if none required.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.TypeInfo">
            <summary>
            Gets the TypeInfo of the fixture used in running this test
            or null if no fixture type is associated with it.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.Method">
            <summary>
            Gets a MethodInfo for the method implementing this test.
            Returns null if the test is not implemented as a method.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.RunState">
            <summary>
            Whether or not the test should be run
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.XmlElementName">
            <summary>
            Gets the name used for the top-level element in the
            XML representation of this test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.TestType">
            <summary>
            Gets a string representing the type of test. Used as an attribute
            value in the XML representation of a test and has no other
            function in the framework.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.TestCaseCount">
            <summary>
            Gets a count of test cases represented by
            or contained under this test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.Properties">
            <summary>
            Gets the properties for this test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.IsSuite">
            <summary>
            Returns true if this is a TestSuite
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.HasChildren">
            <summary>
            Gets a bool indicating whether the current test
            has any descendant tests.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.Parent">
            <summary>
            Gets the parent as a Test object.
            Used by the core to set the parent.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.Tests">
            <summary>
            Gets this test's child tests
            </summary>
            <value>A list of child tests</value>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.Fixture">
            <summary>
            Gets or sets a fixture object for running this test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.IdPrefix">
            <summary>
            Static prefix used for ids in this AppDomain.
            Set by FrameworkController.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.Seed">
            <summary>
            Gets or Sets the Int value representing the seed for the RandomGenerator
            </summary>
            <value></value>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.SetUpMethods">
            <summary>
            The SetUp methods.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.Test.TearDownMethods">
            <summary>
            The teardown methods
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.MakeTestResult">
            <summary>
            Creates a TestResult for this test.
            </summary>
            <returns>A TestResult suitable for this type of test.</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.ApplyAttributesToTest(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Modify a newly constructed test by applying any of NUnit's common
            attributes, based on a supplied <see cref="T:System.Reflection.ICustomAttributeProvider"/>, which is
            usually the reflection element from which the test was constructed,
            but may not be in some instances. The attributes retrieved are
            saved for use in subsequent operations.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.MakeInvalid(System.String)">
            <summary>
            Mark the test as Invalid (not runnable) specifying a reason
            </summary>
            <param name="reason">The reason the test is not runnable</param>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.GetCustomAttributes``1(System.Boolean)">
            <summary>
            Get custom attributes applied to a test
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.PopulateTestNode(NUnit.Framework.Interfaces.TNode,System.Boolean)">
            <summary>
            Add standard attributes and members to a test node.
            </summary>
            <param name="thisNode"></param>
            <param name="recursive"></param>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.ToXml(System.Boolean)">
            <summary>
            Returns the XML representation of the test
            </summary>
            <param name="recursive">If true, include child tests recursively</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.AddToXml(NUnit.Framework.Interfaces.TNode,System.Boolean)">
            <summary>
            Returns an XmlNode representing the current result after
            adding it as a child of the supplied parent node.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="recursive">If true, descendant results are included</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.CompareTo(System.Object)">
            <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</summary>
            <param name="obj">An object to compare with this instance. </param>
        </member>
        <member name="M:NUnit.Framework.Internal.Test.CompareTo(NUnit.Framework.Internal.Test)">
            <summary>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. </summary>
            <param name="other">An object to compare with this instance.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.TestAssembly">
            <summary>
            TestAssembly is a TestSuite that represents the execution
            of tests in a managed assembly.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestAssembly.#ctor(System.Reflection.Assembly,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestAssembly"/> class
            specifying the Assembly and the suite name.
            </summary>
            <param name="assembly">The assembly this test represents.</param>
            <param name="assemblyNameOrPath">
            This becomes the full name of the suite and the filename part is used as the suite name.
            </param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestAssembly.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestAssembly"/> class
            specifying the suite name for an assembly that could not be loaded.
            </summary>
            <param name="assemblyNameOrPath">
            This becomes the full name of the suite and the filename part is used as the suite name.
            </param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestAssembly.#ctor(NUnit.Framework.Internal.TestAssembly,NUnit.Framework.Interfaces.ITestFilter)">
            <summary>
            Creates a copy of the given assembly with only the descendants that pass the specified filter.
            </summary>
            <param name="assembly">The <see cref="T:NUnit.Framework.Internal.TestAssembly"/> to copy.</param>
            <param name="filter">Determines which descendants are copied.</param>
        </member>
        <member name="P:NUnit.Framework.Internal.TestAssembly.Assembly">
            <summary>
            Gets the Assembly represented by this instance.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestAssembly.TestType">
            <summary>
            Gets the name used for the top-level element in the
            XML representation of this test
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestAssembly.GetCustomAttributes``1(System.Boolean)">
            <summary>
            Get custom attributes specified on the assembly
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestAssembly.Copy(NUnit.Framework.Interfaces.ITestFilter)">
            <summary>
            Creates a filtered copy of the test suite.
            </summary>
            <param name="filter">Determines which descendants are copied.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.TestFixture">
            <summary>
            TestFixture is a surrogate for a user test fixture class,
            containing one or more tests.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestFixture.LifeCycle">
            <summary>
            The life cycle specified for the current test fixture.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFixture.#ctor(NUnit.Framework.Interfaces.ITypeInfo,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestFixture"/> class.
            </summary>
            <param name="fixtureType">Type of the fixture.</param>
            <param name="arguments">Arguments used to instantiate the test fixture, or null if none used</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFixture.#ctor(NUnit.Framework.Internal.TestFixture,NUnit.Framework.Interfaces.ITestFilter)">
            <summary>
            Creates a copy of the given suite with only the descendants that pass the specified filter.
            </summary>
            <param name="fixture">The <see cref="T:NUnit.Framework.Internal.TestFixture"/> to copy.</param>
            <param name="filter">Determines which descendants are copied.</param>
        </member>
        <member name="P:NUnit.Framework.Internal.TestFixture.TypeInfo">
            <summary>
            Gets the TypeInfo of the fixture used in running this test.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestFixture.Copy(NUnit.Framework.Interfaces.ITestFilter)">
            <summary>
            Creates a filtered copy of the test suite.
            </summary>
            <param name="filter">Determines which descendants are copied.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.TestMethod">
            <summary>
            The TestMethod class represents a Test implemented as a method.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestMethod.parms">
            <summary>
            The ParameterSet used to create this test method
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestMethod.#ctor(NUnit.Framework.Interfaces.IMethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestMethod"/> class.
            </summary>
            <param name="method">The method to be used as a test.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestMethod.#ctor(NUnit.Framework.Interfaces.IMethodInfo,NUnit.Framework.Internal.Test)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestMethod"/> class.
            </summary>
            <param name="method">The method to be used as a test.</param>
            <param name="parentSuite">The suite or fixture to which the new test will be added</param>
        </member>
        <member name="P:NUnit.Framework.Internal.TestMethod.Method">
            <summary>
            Gets a MethodInfo for the method implementing this test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestMethod.Arguments">
            <summary>
            The arguments to use in executing the test method, or empty array if none are provided.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestMethod.MakeTestResult">
            <summary>
            Overridden to return a TestCaseResult.
            </summary>
            <returns>A TestResult for this test.</returns>
        </member>
        <member name="P:NUnit.Framework.Internal.TestMethod.HasChildren">
            <summary>
            Gets a bool indicating whether the current test
            has any descendant tests.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestMethod.AddToXml(NUnit.Framework.Interfaces.TNode,System.Boolean)">
            <summary>
            Returns a TNode representing the current result after
            adding it as a child of the supplied parent node.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="recursive">If true, descendant results are included</param>
            <returns></returns>
        </member>
        <member name="P:NUnit.Framework.Internal.TestMethod.Tests">
            <summary>
            Gets this test's child tests
            </summary>
            <value>A list of child tests</value>
        </member>
        <member name="P:NUnit.Framework.Internal.TestMethod.XmlElementName">
            <summary>
            Gets the name used for the top-level element in the
            XML representation of this test
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestMethod.MethodName">
            <summary>
            Returns the name of the method
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.TestSuite">
            <summary>
            TestSuite represents a composite test, which contains other tests.
            </summary>
        </member>
        <member name="F:NUnit.Framework.Internal.TestSuite.tests">
            <summary>
            Our collection of child tests
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuite.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestSuite"/> class.
            </summary>
            <param name="name">The name of the suite.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuite.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestSuite"/> class.
            </summary>
            <param name="parentSuiteName">Name of the parent suite.</param>
            <param name="name">The name of the suite.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuite.#ctor(NUnit.Framework.Interfaces.ITypeInfo,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestSuite"/> class.
            </summary>
            <param name="fixtureType">Type of the fixture.</param>
            <param name="arguments">Arguments used to instantiate the test fixture, or null if none used.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuite.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.TestSuite"/> class.
            </summary>
            <param name="fixtureType">Type of the fixture.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuite.#ctor(NUnit.Framework.Internal.TestSuite,NUnit.Framework.Interfaces.ITestFilter)">
            <summary>
            Creates a copy of the given suite with only the descendants that pass the specified filter.
            </summary>
            <param name="suite">The <see cref="T:NUnit.Framework.Internal.TestSuite"/> to copy.</param>
            <param name="filter">Determines which descendants are copied.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuite.Sort">
            <summary>
            Sorts tests under this suite.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuite.Add(NUnit.Framework.Internal.Test)">
            <summary>
            Adds a test to the suite.
            </summary>
            <param name="test">The test.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuite.Copy(NUnit.Framework.Interfaces.ITestFilter)">
            <summary>
            Creates a filtered copy of the test suite.
            </summary>
            <param name="filter">Determines which descendants are copied.</param>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuite.Tests">
            <summary>
            Gets this test's child tests
            </summary>
            <value>The list of child tests</value>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuite.TestCaseCount">
            <summary>
            Gets a count of test cases represented by
            or contained under this test.
            </summary>
            <value></value>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuite.Arguments">
            <summary>
            The arguments to use in creating the fixture, or empty array if none are provided.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuite.MaintainTestOrder">
            <summary>
            Set to true to suppress sorting this suite's contents
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuite.OneTimeSetUpMethods">
            <summary>
            OneTimeSetUp methods for this suite
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuite.OneTimeTearDownMethods">
            <summary>
            OneTimeTearDown methods for this suite
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuite.MakeTestResult">
            <summary>
            Overridden to return a TestSuiteResult.
            </summary>
            <returns>A TestResult for this test.</returns>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuite.HasChildren">
            <summary>
            Gets a bool indicating whether the current test
            has any descendant tests.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TestSuite.XmlElementName">
            <summary>
            Gets the name used for the top-level element in the
            XML representation of this test
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuite.AddToXml(NUnit.Framework.Interfaces.TNode,System.Boolean)">
            <summary>
            Returns an XmlNode representing the current result after
            adding it as a child of the supplied parent node.
            </summary>
            <param name="parentNode">The parent node.</param>
            <param name="recursive">If true, descendant results are included</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TestSuite.CheckSetUpTearDownMethods(NUnit.Framework.Interfaces.IMethodInfo[])">
            <summary>
            Check that setup and teardown methods marked by certain attributes
            meet NUnit's requirements and mark the tests not runnable otherwise.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.ThreadUtility">
            <summary>
            ThreadUtility provides a set of static methods convenient
            for working with threads.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.ThreadUtility.GetCurrentThreadPrincipal">
            <summary>Gets <see cref="P:System.Threading.Thread.CurrentPrincipal"/> or <see langword="null" /> if the current platform does not support it.</summary>
        </member>
        <member name="M:NUnit.Framework.Internal.ThreadUtility.SetCurrentThreadPrincipal(System.Security.Principal.IPrincipal)">
            <summary>Sets <see cref="P:System.Threading.Thread.CurrentPrincipal"/> if current platform supports it.</summary>
            <param name="principal">Value to set. If the current platform does not support <see cref="P:System.Threading.Thread.CurrentPrincipal"/> then the only allowed value is <see langword="null"/>.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.TypeHelper">
            <summary>
            TypeHelper provides static methods that operate on Types.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeHelper.GetDisplayName(System.Type)">
            <summary>
            Gets the display name for a Type as used by NUnit.
            </summary>
            <param name="type">The Type for which a display name is needed.</param>
            <returns>The display name for the Type</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeHelper.GetDisplayName(System.Type,System.Object[])">
            <summary>
            Gets the display name for a Type as used by NUnit.
            </summary>
            <param name="type">The Type for which a display name is needed.</param>
            <param name="arglist">The arglist provided.</param>
            <returns>The display name for the Type</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeHelper.TryGetBestCommonType(System.Type,System.Type,System.Type@)">
            <summary>
            Returns the best fit for a common type to be used in
            matching actual arguments to a methods Type parameters.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeHelper.IsNumeric(System.Type)">
            <summary>
            Determines whether the specified type is numeric.
            </summary>
            <param name="type">The type to be examined.</param>
            <returns>
            	<see langword="true"/> if the specified type is numeric; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeHelper.ConvertArgumentList(System.Object[],NUnit.Framework.Interfaces.IParameterInfo[])">
            <summary>
            Convert an argument list to the required parameter types.
            Currently, only widening numeric conversions are performed.
            </summary>
            <param name="arglist">An array of args to be converted</param>
            <param name="parameters">A ParameterInfo[] whose types will be used as targets</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeHelper.CanDeduceTypeArgsFromArgs(System.Type,System.Object[],System.Type[]@)">
            <summary>
            Determines whether this instance can deduce type args for a generic type from the supplied arguments.
            </summary>
            <param name="type">The type to be examined.</param>
            <param name="arglist">The arglist.</param>
            <param name="typeArgsOut">The type args to be used.</param>
            <returns>
            	<see langword="true"/> if this the provided args give sufficient information to determine the type args to be used; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeHelper.GetDeclaredInterfaces(System.Type)">
            <summary>
            Return the interfaces implemented by a Type.
            </summary>
            <param name="type">The Type to be examined.</param>
            <returns>An array of Types for the interfaces.</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeHelper.IsValueTuple(System.Type)">
            <summary>
            Return whether or not the given type is a ValueTuple.
            </summary>
            <param name="type">Type.</param>
            <returns>Whether or not the given type is a ValueTuple.</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeHelper.IsTuple(System.Type)">
            <summary>
            Return whether or not the given type is a Tuple.
            </summary>
            <param name="type">Type.</param>
            <returns>Whether or not the given type is a Tuple.</returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeHelper.CanCast``1(System.Object)">
            <summary>
            Determines whether the cast to the given type would succeed.
            If <paramref name="obj"/> is <see langword="null"/> and <typeparamref name="T"/>
            can be <see langword="null"/>, the cast succeeds just like the C# language feature.
            </summary>
            <param name="obj">The object to cast.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeHelper.TryCast``1(System.Object,``0@)">
            <summary>
            Casts to a value of the given type if possible.
            If <paramref name="obj"/> is <see langword="null"/> and <typeparamref name="T"/>
            can be <see langword="null"/>, the cast succeeds just like the C# language feature.
            </summary>
            <param name="obj">The object to cast.</param>
            <param name="value">The value of the object, if the cast succeeded.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.TypeNameDifferenceResolver">
            <summary>
            Used for resolving the type difference between objects.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeNameDifferenceResolver.ResolveTypeNameDifference(System.Object,System.Object,System.String@,System.String@)">
            <summary>
            Gets the shortened type name difference between <paramref name="expected"/> and <paramref name="actual"/>.
            </summary>
            <param name="expected">The expected object.</param>
            <param name="actual">The actual object.</param>
            <param name="expectedTypeShortened">Output of the unique type name for the expected object.</param>
            <param name="actualTypeShortened">Output of the unique type name for actual object.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeNameDifferenceResolver.ResolveTypeNameDifference(System.Type,System.Type,System.String@,System.String@)">
            <summary>
            Gets the shortened type name difference between <paramref name="expected"/> and <paramref name="actual"/>.
            </summary>
            <param name="expected">The expected object <see cref="T:System.Type"/>.</param>
            <param name="actual">The actual object <see cref="T:System.Type"/>.</param>
            <param name="expectedTypeShortened">Output of the unique type name for the expected object.</param>
            <param name="actualTypeShortened">Output of the unique type name for actual object.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeNameDifferenceResolver.GetShortenedGenericParams(System.Type,System.Type,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@)">
            <summary>
            Obtain the shortened generic template parameters of the given <paramref name="expectedFullType"/> and <paramref name="actualFullType"/>,
            if they are generic.
            </summary>
            <param name="expectedFullType">The expected <see cref="T:System.Type"/>.</param>
            <param name="actualFullType">The actual <see cref="T:System.Type"/>.</param>
            <param name="shortenedParamsExpected">Shortened generic parameters of the expected <see cref="T:System.Type"/>.</param>
            <param name="shortenedParamsActual">Shortened generic parameters of the actual <see cref="T:System.Type"/>.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeNameDifferenceResolver.FullyShortenTypeName(System.Type)">
            <summary>
            Obtain a shortened name of the given <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeNameDifferenceResolver.ShortenTypeNames(System.Type,System.Type,System.String@,System.String@)">
            <summary>
            Shorten the given <see cref="T:System.Type"/> names by only including the relevant differing namespaces/types, if they differ.
            </summary>
            <param name="expectedType">The expected <see cref="T:System.Type"/>.</param>
            <param name="actualType">The actual <see cref="T:System.Type"/>.</param>
            <param name="expectedTypeShortened">The shortened expected <see cref="T:System.Type"/> name.</param>
            <param name="actualTypeShortened">The shortened actual <see cref="T:System.Type"/> name.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeNameDifferenceResolver.IsTypeGeneric(System.Type)">
            <summary>
            Returns whether or not the <see cref="T:System.Type"/> is generic.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeNameDifferenceResolver.GetGenericTypeName(System.Type)">
            <summary>
            Returns the fully qualified generic <see cref="T:System.Type"/> name of a given <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeNameDifferenceResolver.ReconstructGenericTypeName(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Reconstruct a generic type name using the provided generic type name, and a
            <see cref="T:NUnit.Framework.List"/> of the template parameters.
            </summary>
            <param name="genericTypeName">The name of the generic type, including the number of template parameters expected.</param>
            <param name="templateParamNames">A <see cref="T:NUnit.Framework.List"/> of names of the template parameters of the provided generic type.</param>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeNameDifferenceResolver.GetShortenedGenericTypes(System.Type,System.Type,System.String@,System.String@)">
            <summary>
            Obtain the shortened generic <see cref="T:System.Type"/> names of the given expected and actual <see cref="T:System.Type"/>s.
            </summary>
            <param name="expected">The expected <see cref="T:System.Type"/>.</param>
            <param name="actual">The actual <see cref="T:System.Type"/>.</param>
            <param name="shortenedGenericNameExpected">The shortened expected generic name.</param>
            <param name="shortenedGenericNameActual">The shortened actual generic name.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.TypeWrapper">
            <summary>
            The TypeWrapper class wraps a Type so it may be used in
            a platform-independent manner.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeWrapper.#ctor(System.Type)">
            <summary>
            Construct a TypeWrapper for a specified Type.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TypeWrapper.Type">
            <summary>
            Gets the underlying Type on which this TypeWrapper is based.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TypeWrapper.BaseType">
            <summary>
            Gets the base type of this type as an ITypeInfo
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TypeWrapper.Name">
            <summary>
            Gets the Name of the Type
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TypeWrapper.FullName">
            <summary>
            Gets the FullName of the Type
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TypeWrapper.Assembly">
            <summary>
            Gets the assembly in which the type is declared
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TypeWrapper.Namespace">
            <summary>
            Gets the namespace of the Type
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TypeWrapper.IsAbstract">
            <summary>
            Gets a value indicating whether the type is abstract.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TypeWrapper.IsGenericType">
            <summary>
            Gets a value indicating whether the Type is a generic Type
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeWrapper.IsType(System.Type)">
            <summary>
            Returns true if the Type wrapped is T
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TypeWrapper.ContainsGenericParameters">
            <summary>
            Gets a value indicating whether the Type has generic parameters that have not been replaced by specific Types.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TypeWrapper.IsGenericTypeDefinition">
            <summary>
            Gets a value indicating whether the Type is a generic Type definition
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TypeWrapper.IsSealed">
            <summary>
            Gets a value indicating whether the type is sealed.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Internal.TypeWrapper.IsStaticClass">
            <summary>
            Gets a value indicating whether this type represents a static class.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeWrapper.GetDisplayName">
            <summary>
            Get the display name for this type
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeWrapper.GetDisplayName(System.Object[])">
            <summary>
            Get the display name for an object of this type, constructed with the specified args.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeWrapper.MakeGenericType(System.Type[])">
            <summary>
            Returns a new ITypeInfo representing an instance of this generic Type using the supplied Type arguments
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeWrapper.GetGenericTypeDefinition">
            <summary>
            Returns a Type representing a generic type definition from which this Type can be constructed.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeWrapper.GetCustomAttributes``1(System.Boolean)">
            <summary>
            Returns an array of custom attributes of the specified type applied to this type
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeWrapper.IsDefined``1(System.Boolean)">
            <summary>
            Returns a value indicating whether the type has an attribute of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="inherit"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeWrapper.HasMethodWithAttribute(System.Type)">
            <summary>
            Returns a flag indicating whether this type has a method with an attribute of the specified type.
            </summary>
            <param name="attributeType"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeWrapper.GetMethods(System.Reflection.BindingFlags)">
            <summary>
            Returns an array of IMethodInfos for methods of this Type
            that match the specified flags.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeWrapper.GetConstructor(System.Type[])">
            <summary>
            Gets the public constructor taking the specified argument Types
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeWrapper.HasConstructor(System.Type[])">
            <summary>
            Returns a value indicating whether this Type has a public constructor taking the specified argument Types.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeWrapper.Construct(System.Object[])">
            <summary>
            Construct an object of this Type, using the specified arguments.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeWrapper.ToString">
            <summary>
            Override ToString() so that error messages in NUnit's own tests make sense
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.TypeWrapper.GetMethodsWithAttribute``1(System.Boolean)">
            <summary>
            Returns all methods declared by this type that have the specified attribute, optionally
            including base classes. Methods from a base class are always returned before methods from a class that
            inherits from it.
            </summary>
            <param name="inherit">Specifies whether to search the fixture type inheritance chain.</param>
        </member>
        <member name="T:NUnit.Framework.Internal.ValueGenerator.Step">
            <summary>
            Encapsulates the ability to increment a value by an amount which may be of a different type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.ValueGenerator.CreateStep(System.Object)">
            <summary>
            Creates a <see cref="T:NUnit.Framework.Internal.ValueGenerator.Step"/> from the specified value if the current instance is able to
            use it to increment the on values which it operates. If the creation fails,
            <see cref="T:System.NotSupportedException"/> is thrown.
            </summary>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:NUnit.Framework.Internal.ValueGenerator.TryCreateStep(System.Object,NUnit.Framework.Internal.ValueGenerator.Step@)">
            <summary>
            Creates a <see cref="T:NUnit.Framework.Internal.ValueGenerator.Step"/> from the specified value if the current instance is able to
            use it to increment values on which it operates. A return value indicates
            whether the creation succeeded.
            </summary>
        </member>
        <member name="T:NUnit.Framework.Internal.ValueGenerator`1.ComparableStep`1">
            <summary>
            Provides a convenient shorthand when <typeparamref name="TStep"/> is <see cref="T:System.IComparable`1"/>
            and the default value of <typeparamref name="TStep"/> represents zero.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.ValueGenerator`1.ComparableStep`1.#ctor(`1,System.Func{`0,`1,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.Internal.ValueGenerator`1.ComparableStep`1"/> class.
            </summary>
            <param name="value">The amount by which to increment each time this step is applied.</param>
            <param name="apply">
            Must increment the given value and return the result.
            If the result is outside the range representable by <typeparamref name="T"/>,
            must throw <see cref="T:System.OverflowException"/>. If the result does not change due to lack
            of precision representable by <typeparamref name="T"/>, must throw <see cref="T:System.ArithmeticException"/>.
            </param>
        </member>
        <member name="M:NUnit.Framework.Internal.ValueGenerator`1.ComparableStep`1.Apply(`0)">
            <summary>
            Increments the given value and returns the result.
            If the result is outside the range representable by <typeparamref name="T"/>,
            throws <see cref="T:System.OverflowException"/>. If the result does not change due to lack
            of precision representable by <typeparamref name="T"/>, throws <see cref="T:System.ArithmeticException"/>.
            </summary>
            <exception cref="T:System.OverflowException"/>
            <exception cref="T:System.ArithmeticException"/>
        </member>
        <member name="T:NUnit.Framework.Internal.ValueGenerator`1.Step">
            <summary>
            Encapsulates the ability to increment a <typeparamref name="T"/> value by an amount
            which may be of a different type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Internal.ValueGenerator`1.Step.Apply(`0)">
            <summary>
            Increments the given value and returns the result.
            If the result is outside the range representable by <typeparamref name="T"/>,
            throws <see cref="T:System.OverflowException"/>. If the result does not change due to lack
            of precision representable by <typeparamref name="T"/>, throws <see cref="T:System.ArithmeticException"/>.
            </summary>
            <exception cref="T:System.OverflowException"/>
            <exception cref="T:System.ArithmeticException"/>
        </member>
        <member name="M:NUnit.Framework.Internal.ValueGenerator`1.CreateStep(System.Object)">
            <summary>
            Creates a <see cref="T:NUnit.Framework.Internal.ValueGenerator`1.Step"/> from the specified value if the current instance is able to
            use it to increment values of type <typeparamref name="T"/>. If the creation fails,
            <see cref="T:System.NotSupportedException"/> is thrown.
            </summary>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:NUnit.Framework.Internal.ValueGenerator`1.TryCreateStep(System.Object,NUnit.Framework.Internal.ValueGenerator.Step@)">
            <summary>
            Creates a <see cref="T:NUnit.Framework.Internal.ValueGenerator`1.Step"/> from the specified value if the current instance is able to
            use it to increment values of type <typeparamref name="T"/>. A return value indicates
            whether the creation succeeded.
            </summary>
        </member>
        <member name="T:NUnit.Framework.IgnoredTestCaseData">
            <summary>
            The IgnoredTestCaseData class represents a ignored TestCaseData. It adds
            the ability to set a date until which the test will be ignored.
            </summary>
        </member>
        <member name="F:NUnit.Framework.IgnoredTestCaseData._prevRunState">
            <summary>
            The previous RunState
            </summary>
        </member>
        <member name="M:NUnit.Framework.IgnoredTestCaseData.Until(System.DateTimeOffset)">
            <summary>
            Set the date that the test is being ignored until
            </summary>
            <param name="datetime">The date that the test is being ignored until</param>
            <returns>A modified TestCaseData.</returns>
        </member>
        <member name="T:NUnit.Framework.Is">
            <summary>
            Helper class with properties and methods that supply
            a number of constraints used in Asserts.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.Not">
            <summary>
            Returns a ConstraintExpression that negates any
            following constraint.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.All">
            <summary>
            Returns a ConstraintExpression, which will apply
            the following constraint to all members of a collection,
            succeeding if all of them succeed.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.Null">
            <summary>
            Returns a constraint that tests for null
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.True">
            <summary>
            Returns a constraint that tests for True
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.False">
            <summary>
            Returns a constraint that tests for False
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.Positive">
            <summary>
            Returns a constraint that tests for a positive value
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.Negative">
            <summary>
            Returns a constraint that tests for a negative value
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.Zero">
            <summary>
            Returns a constraint that tests for equality with zero
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.NaN">
            <summary>
            Returns a constraint that tests for NaN
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.Empty">
            <summary>
            Returns a constraint that tests for empty
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.Unique">
            <summary>
            Returns a constraint that tests whether a collection
            contains all unique items.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.BinarySerializable">
            <summary>
            Returns a constraint that tests whether an object graph is serializable in binary format.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.XmlSerializable">
            <summary>
            Returns a constraint that tests whether an object graph is serializable in XML format.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.EqualTo(System.Object)">
            <summary>
            Returns a constraint that tests two items for equality
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.SameAs(System.Object)">
            <summary>
            Returns a constraint that tests that two references are the same object
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.GreaterThan(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.GreaterThanOrEqualTo(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than or equal to the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.AtLeast(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is greater than or equal to the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.LessThan(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.LessThanOrEqualTo(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than or equal to the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.AtMost(System.Object)">
            <summary>
            Returns a constraint that tests whether the
            actual value is less than or equal to the supplied argument
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.TypeOf(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.TypeOf``1">
            <summary>
            Returns a constraint that tests whether the actual
            value is of the exact type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.InstanceOf(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.InstanceOf``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is of the type supplied as an argument or a derived type.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.AssignableFrom(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.AssignableFrom``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable from the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.AssignableTo(System.Type)">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable to the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.AssignableTo``1">
            <summary>
            Returns a constraint that tests whether the actual value
            is assignable to the type supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.EquivalentTo(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a collection containing the same elements as the
            collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.SubsetOf(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a subset of the collection supplied as an argument.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.SupersetOf(System.Collections.IEnumerable)">
            <summary>
            Returns a constraint that tests whether the actual value
            is a superset of the collection supplied as an argument.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Is.Ordered">
            <summary>
            Returns a constraint that tests whether a collection is ordered
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.SamePath(System.String)">
            <summary>
            Returns a constraint that tests whether the path provided
            is the same as an expected path after canonicalization.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.SubPathOf(System.String)">
            <summary>
            Returns a constraint that tests whether the path provided
            is a subpath of the expected path after canonicalization.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.SamePathOrUnder(System.String)">
            <summary>
            Returns a constraint that tests whether the path provided
            is the same path or under an expected path after canonicalization.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Is.InRange(System.Object,System.Object)">
            <summary>
            Returns a constraint that tests whether the actual value falls
            inclusively within a specified range.
            </summary>
            <param name="from">Inclusive beginning of the range.</param>
            <param name="to">Inclusive end of the range.</param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.Is.AnyOf(System.Object[])">
            <summary>
            Returns a constraint that tests if an item is equal to any of parameters
            </summary>
            <param name="expected">Expected values</param>
        </member>
        <member name="T:NUnit.Framework.ITestAction">
            <summary>
            When implemented by an attribute, this interface implemented to provide actions to execute before and after tests.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ITestAction.BeforeTest(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Executed before each test is run
            </summary>
            <param name="test">The test that is going to be run.</param>
        </member>
        <member name="M:NUnit.Framework.ITestAction.AfterTest(NUnit.Framework.Interfaces.ITest)">
            <summary>
            Executed after each test is run
            </summary>
            <param name="test">The test that has just been run.</param>
        </member>
        <member name="P:NUnit.Framework.ITestAction.Targets">
            <summary>
            Provides the target for the action attribute
            </summary>
            <returns>The target for the action attribute</returns>
        </member>
        <member name="T:NUnit.Framework.Iz">
            <summary>
            The Iz class is a synonym for Is intended for use in VB,
            which regards Is as a keyword.
            </summary>
        </member>
        <member name="T:NUnit.Framework.List">
            <summary>
            The List class is a helper class with properties and methods
            that supply a number of constraints used with lists and collections.
            </summary>
        </member>
        <member name="M:NUnit.Framework.List.Map(System.Collections.ICollection)">
            <summary>
            List.Map returns a ListMapper, which can be used to map
            the original collection to another collection.
            </summary>
            <param name="actual"></param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.ListMapper">
            <summary>
            ListMapper is used to transform a collection used as an actual argument
            producing another collection to be used in the assertion.
            </summary>
        </member>
        <member name="M:NUnit.Framework.ListMapper.#ctor(System.Collections.ICollection)">
            <summary>
            Construct a ListMapper based on a collection
            </summary>
            <param name="original">The collection to be transformed</param>
        </member>
        <member name="M:NUnit.Framework.ListMapper.Property(System.String)">
            <summary>
            Produces a collection containing all the values of a property
            </summary>
            <param name="name">The collection of property values</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.StringAssert">
            <summary>
            Basic Asserts on strings.
            </summary>
        </member>
        <member name="M:NUnit.Framework.StringAssert.Equals(System.Object,System.Object)">
            <summary>
            DO NOT USE! Use StringAssert.AreEqualIgnoringCase(...) or Assert.AreEqual(...) instead.
            The Equals method throws an InvalidOperationException. This is done
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.ReferenceEquals(System.Object,System.Object)">
            <summary>
            DO NOT USE!
            The ReferenceEquals method throws an InvalidOperationException. This is done
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.Contains(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string is found within another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.Contains(System.String,System.String)">
            <summary>
            Asserts that a string is found within another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotContain(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string is not found within another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotContain(System.String,System.String)">
            <summary>
            Asserts that a string is found within another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.StartsWith(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string starts with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.StartsWith(System.String,System.String)">
            <summary>
            Asserts that a string starts with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotStartWith(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string does not start with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotStartWith(System.String,System.String)">
            <summary>
            Asserts that a string does not start with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.EndsWith(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string ends with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.EndsWith(System.String,System.String)">
            <summary>
            Asserts that a string ends with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotEndWith(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string does not end with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotEndWith(System.String,System.String)">
            <summary>
            Asserts that a string does not end with another string.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The string to be examined</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.AreEqualIgnoringCase(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that two strings are equal, without regard to case.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The actual string</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.AreEqualIgnoringCase(System.String,System.String)">
            <summary>
            Asserts that two strings are equal, without regard to case.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The actual string</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.AreNotEqualIgnoringCase(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that two strings are not equal, without regard to case.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The actual string</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.AreNotEqualIgnoringCase(System.String,System.String)">
            <summary>
            Asserts that two strings are not equal, without regard to case.
            </summary>
            <param name="expected">The expected string</param>
            <param name="actual">The actual string</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.IsMatch(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string matches an expected regular expression pattern.
            </summary>
            <param name="pattern">The regex pattern to be matched</param>
            <param name="actual">The actual string</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.IsMatch(System.String,System.String)">
            <summary>
            Asserts that a string matches an expected regular expression pattern.
            </summary>
            <param name="pattern">The regex pattern to be matched</param>
            <param name="actual">The actual string</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotMatch(System.String,System.String,System.String,System.Object[])">
            <summary>
            Asserts that a string does not match an expected regular expression pattern.
            </summary>
            <param name="pattern">The regex pattern to be used</param>
            <param name="actual">The actual string</param>
            <param name="message">The message to display in case of failure</param>
            <param name="args">Arguments used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.StringAssert.DoesNotMatch(System.String,System.String)">
            <summary>
            Asserts that a string does not match an expected regular expression pattern.
            </summary>
            <param name="pattern">The regex pattern to be used</param>
            <param name="actual">The actual string</param>
        </member>
        <member name="T:NUnit.Framework.TestCaseData">
            <summary>
            The TestCaseData class represents a set of arguments
            and other parameter info to be used for a parameterized
            test case. It is derived from TestCaseParameters and adds a
            fluent syntax for use in initializing the test case.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.TestCaseData"/> class.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.TestCaseData"/> class.
            </summary>
            <param name="arg">The argument.</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.TestCaseData"/> class.
            </summary>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.TestCaseData"/> class.
            </summary>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.Returns(System.Object)">
            <summary>
            Sets the expected result for the test
            </summary>
            <param name="result">The expected result</param>
            <returns>A modified TestCaseData</returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.SetName(System.String)">
            <summary>
            Sets the name of the test case
            </summary>
            <returns>The modified TestCaseData instance</returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.SetArgDisplayNames(System.String[])">
            <summary>
            Sets the list of display names to use as the parameters in the test name.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.SetDescription(System.String)">
            <summary>
            Sets the description for the test case
            being constructed.
            </summary>
            <param name="description">The description.</param>
            <returns>The modified TestCaseData instance.</returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.SetCategory(System.String)">
            <summary>
            Applies a category to the test
            </summary>
            <param name="category"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.SetProperty(System.String,System.String)">
            <summary>
            Applies a named property to the test
            </summary>
            <param name="propName"></param>
            <param name="propValue"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.SetProperty(System.String,System.Int32)">
            <summary>
            Applies a named property to the test
            </summary>
            <param name="propName"></param>
            <param name="propValue"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.SetProperty(System.String,System.Double)">
            <summary>
            Applies a named property to the test
            </summary>
            <param name="propName"></param>
            <param name="propValue"></param>
            <returns></returns>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.Explicit">
            <summary>
            Marks the test case as explicit.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.Explicit(System.String)">
            <summary>
            Marks the test case as explicit, specifying the reason.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestCaseData.Ignore(System.String)">
            <summary>
            Ignores this TestCase, specifying the reason.
            </summary>
            <param name="reason">The reason.</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.TestContext">
            <summary>
            Provide the context information of the current test.
            This is an adapter for the internal ExecutionContext
            class, hiding the internals from the user test.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.#ctor(NUnit.Framework.Internal.TestExecutionContext)">
            <summary>
            Construct a TestContext for an ExecutionContext
            </summary>
            <param name="testExecutionContext">The ExecutionContext to adapt</param>
        </member>
        <member name="P:NUnit.Framework.TestContext.CurrentContext">
            <summary>
            Get the current test context. This is created
            as needed. The user may save the context for
            use within a test, but it should not be used
            outside the test for which it is created.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.Out">
            <summary>
            Gets a TextWriter that will send output to the current test result.
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestContext.Error">
            <summary>
            Gets a TextWriter that will send output directly to Console.Error
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestContext.Progress">
            <summary>
            Gets a TextWriter for use in displaying immediate progress messages
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestContext.Parameters">
            <summary>
            TestParameters object holds parameters for the test run, if any are specified
            </summary>
        </member>
        <member name="F:NUnit.Framework.TestContext.DefaultWorkDirectory">
            <summary>
            Static DefaultWorkDirectory is now used as the source
            of the public instance property WorkDirectory. This is
            a bit odd but necessary to avoid breaking user tests.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.Test">
            <summary>
            Get a representation of the current test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.Result">
            <summary>
            Gets a Representation of the TestResult for the current test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.WorkerId">
            <summary>
            Gets the unique name of the Worker that is executing this test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.TestDirectory">
            <summary>
            Gets the directory containing the current test assembly.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.WorkDirectory">
            <summary>
            Gets the directory to be used for outputting files created
            by this test run.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.Random">
            <summary>
            Gets the random generator.
            </summary>
            <value>
            The random generator.
            </value>
        </member>
        <member name="P:NUnit.Framework.TestContext.AssertCount">
            <summary>
            Gets the number of assertions executed
            up to this point in the test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.CurrentRepeatCount">
            <summary>
            Get the number of times the current Test has been repeated 
            when using the <see cref="T:NUnit.Framework.RetryAttribute"/> or <see cref="T:NUnit.Framework.RepeatAttribute"/>.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.Write(System.Boolean)">
            <summary>Write the string representation of a boolean value to the current result</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.Write(System.Char)">
            <summary>Write a char to the current result</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.Write(System.Char[])">
            <summary>Write a char array to the current result</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.Write(System.Double)">
            <summary>Write the string representation of a double to the current result</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.Write(System.Int32)">
            <summary>Write the string representation of an Int32 value to the current result</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.Write(System.Int64)">
            <summary>Write the string representation of an Int64 value to the current result</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.Write(System.Decimal)">
            <summary>Write the string representation of a decimal value to the current result</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.Write(System.Object)">
            <summary>Write the string representation of an object to the current result</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.Write(System.Single)">
            <summary>Write the string representation of a Single value to the current result</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.Write(System.String)">
            <summary>Write a string to the current result</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.Write(System.UInt32)">
            <summary>Write the string representation of a UInt32 value to the current result</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.Write(System.UInt64)">
            <summary>Write the string representation of a UInt64 value to the current result</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.Write(System.String,System.Object)">
            <summary>Write a formatted string to the current result</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.Write(System.String,System.Object,System.Object)">
            <summary>Write a formatted string to the current result</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>Write a formatted string to the current result</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.Write(System.String,System.Object[])">
            <summary>Write a formatted string to the current result</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.WriteLine">
            <summary>Write a line terminator to the current result</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.WriteLine(System.Boolean)">
            <summary>Write the string representation of a boolean value to the current result followed by a line terminator</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.WriteLine(System.Char)">
            <summary>Write a char to the current result followed by a line terminator</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.WriteLine(System.Char[])">
            <summary>Write a char array to the current result followed by a line terminator</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.WriteLine(System.Double)">
            <summary>Write the string representation of a double to the current result followed by a line terminator</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.WriteLine(System.Int32)">
            <summary>Write the string representation of an Int32 value to the current result followed by a line terminator</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.WriteLine(System.Int64)">
            <summary>Write the string representation of an Int64 value to the current result followed by a line terminator</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.WriteLine(System.Decimal)">
            <summary>Write the string representation of a decimal value to the current result followed by a line terminator</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.WriteLine(System.Object)">
            <summary>Write the string representation of an object to the current result followed by a line terminator</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.WriteLine(System.Single)">
            <summary>Write the string representation of a Single value to the current result followed by a line terminator</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.WriteLine(System.String)">
            <summary>Write a string to the current result followed by a line terminator</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.WriteLine(System.UInt32)">
            <summary>Write the string representation of a UInt32 value to the current result followed by a line terminator</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.WriteLine(System.UInt64)">
            <summary>Write the string representation of a UInt64 value to the current result followed by a line terminator</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.WriteLine(System.String,System.Object)">
            <summary>Write a formatted string to the current result followed by a line terminator</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.WriteLine(System.String,System.Object,System.Object)">
            <summary>Write a formatted string to the current result followed by a line terminator</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>Write a formatted string to the current result followed by a line terminator</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.WriteLine(System.String,System.Object[])">
            <summary>Write a formatted string to the current result followed by a line terminator</summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.AddFormatter(NUnit.Framework.Constraints.ValueFormatterFactory)">
            <summary>
            This method adds the a new ValueFormatterFactory to the
            chain of responsibility used for formatting values in messages.
            The scope of the change is the current TestContext.
            </summary>
            <param name="formatterFactory">The factory delegate</param>
        </member>
        <member name="M:NUnit.Framework.TestContext.AddTestAttachment(System.String,System.String)">
            <summary>
            Attach a file to the current test result
            </summary>
            <param name="filePath">Relative or absolute file path to attachment</param>
            <param name="description">Optional description of attachment</param>
        </member>
        <member name="M:NUnit.Framework.TestContext.AddFormatter``1(NUnit.Framework.Constraints.ValueFormatter)">
            <summary>
            This method provides a simplified way to add a ValueFormatter
            delegate to the chain of responsibility, creating the factory
            delegate internally. It is useful when the Type of the object
            is the only criterion for selection of the formatter, since
            it can be used without getting involved with a compound function.
            </summary>
            <typeparam name="TSupported">The type supported by this formatter</typeparam>
            <param name="formatter">The ValueFormatter delegate</param>
        </member>
        <member name="T:NUnit.Framework.TestContext.TestAdapter">
            <summary>
            TestAdapter adapts a Test for consumption by
            the user test code.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.TestAdapter.#ctor(NUnit.Framework.Internal.Test)">
            <summary>
            Construct a TestAdapter for a Test
            </summary>
            <param name="test">The Test to be adapted</param>
        </member>
        <member name="P:NUnit.Framework.TestContext.TestAdapter.ID">
            <summary>
            Gets the unique Id of a test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.TestAdapter.Name">
            <summary>
            The name of the test, which may or may not be
            the same as the method name.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.TestAdapter.MethodName">
            <summary>
            The name of the method representing the test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.TestAdapter.FullName">
            <summary>
            The FullName of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.TestAdapter.ClassName">
            <summary>
            The ClassName of the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.TestAdapter.Properties">
            <summary>
            A shallow copy of the properties of the test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.TestAdapter.Arguments">
            <summary>
            The arguments to use in creating the test or empty array if none are required.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestContext.ResultAdapter">
            <summary>
            ResultAdapter adapts a TestResult for consumption by
            the user test code.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.ResultAdapter.#ctor(NUnit.Framework.Internal.TestResult)">
            <summary>
            Construct a ResultAdapter for a TestResult
            </summary>
            <param name="result">The TestResult to be adapted</param>
        </member>
        <member name="P:NUnit.Framework.TestContext.ResultAdapter.Outcome">
            <summary>
            Gets a ResultState representing the outcome of the test
            up to this point in its execution.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.ResultAdapter.Assertions">
            <summary>
            Gets a list of the assertion results generated
            up to this point in the test.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.ResultAdapter.Message">
            <summary>
            Gets the message associated with a test
            failure or with not running the test
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.ResultAdapter.StackTrace">
            <summary>
            Gets any stack trace associated with an
            error or failure.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.ResultAdapter.FailCount">
            <summary>
            Gets the number of test cases that failed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.ResultAdapter.WarningCount">
            <summary>
            Gets the number of test cases that had warnings
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.ResultAdapter.PassCount">
            <summary>
            Gets the number of test cases that passed
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.ResultAdapter.SkipCount">
            <summary>
            Gets the number of test cases that were skipped
            when running the test and all its children.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.ResultAdapter.InconclusiveCount">
            <summary>
            Gets the number of test cases that were inconclusive
            when running the test and all its children.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestContext.PropertyBagAdapter">
            <summary>
            <see cref="T:NUnit.Framework.TestContext.PropertyBagAdapter"/> adapts an <see cref="T:NUnit.Framework.Interfaces.IPropertyBag"/>
            for consumption by the user.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.PropertyBagAdapter.#ctor(NUnit.Framework.Interfaces.IPropertyBag)">
            <summary>
            Construct a <see cref="T:NUnit.Framework.TestContext.PropertyBagAdapter"/> from a source
            <see cref="T:NUnit.Framework.Interfaces.IPropertyBag"/>.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.PropertyBagAdapter.Get(System.String)">
            <summary>
            Get the first property with the given <paramref name="key"/>, if it can be found, otherwise
            returns null.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.PropertyBagAdapter.ContainsKey(System.String)">
            <summary>
            Indicates whether <paramref name="key"/> is found in this
            <see cref="T:NUnit.Framework.TestContext.PropertyBagAdapter"/>.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.PropertyBagAdapter.Item(System.String)">
            <summary>
            Returns a collection of properties
            with the given <paramref name="key"/>.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestContext.PropertyBagAdapter.Count(System.String)">
            <summary>
            Returns the count of elements with the given <paramref name="key"/>.
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestContext.PropertyBagAdapter.Keys">
            <summary>
            Returns a collection of the property keys.
            </summary>
        </member>
        <member name="T:NUnit.Framework.TestFixtureData">
            <summary>
            The TestFixtureData class represents a set of arguments
            and other parameter info to be used for a parameterized
            fixture. It is derived from TestFixtureParameters and adds a
            fluent syntax for use in initializing the fixture.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestFixtureData.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.TestFixtureData"/> class.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:NUnit.Framework.TestFixtureData.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.TestFixtureData"/> class.
            </summary>
            <param name="arg">The argument.</param>
        </member>
        <member name="M:NUnit.Framework.TestFixtureData.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.TestFixtureData"/> class.
            </summary>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
        </member>
        <member name="M:NUnit.Framework.TestFixtureData.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NUnit.Framework.TestFixtureData"/> class.
            </summary>
            <param name="arg1">The first argument.</param>
            <param name="arg2">The second argument.</param>
            <param name="arg3">The third argument.</param>
        </member>
        <member name="M:NUnit.Framework.TestFixtureData.SetName(System.String)">
            <summary>
            Sets the name of the test fixture
            </summary>
            <returns>The modified TestFixtureData instance</returns>
        </member>
        <member name="M:NUnit.Framework.TestFixtureData.SetArgDisplayNames(System.String[])">
            <summary>
            Sets the list of display names to use as the parameters in the test name.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestFixtureData.Explicit">
            <summary>
            Marks the test fixture as explicit.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestFixtureData.Explicit(System.String)">
            <summary>
            Marks the test fixture as explicit, specifying the reason.
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestFixtureData.Ignore(System.String)">
            <summary>
            Ignores this TestFixture, specifying the reason.
            </summary>
            <param name="reason">The reason.</param>
            <returns></returns>
        </member>
        <member name="T:NUnit.Framework.TestParameters">
            <summary>
            TestParameters class holds any named parameters supplied to the test run
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestParameters.Count">
            <summary>
            Gets the number of test parameters
            </summary>
        </member>
        <member name="P:NUnit.Framework.TestParameters.Names">
            <summary>
            Gets a collection of the test parameter names
            </summary>
        </member>
        <member name="M:NUnit.Framework.TestParameters.Exists(System.String)">
            <summary>
            Gets a flag indicating whether a parameter with the specified name exists.
            </summary>
            <param name="name">Name of the parameter</param>
            <returns>True if it exists, otherwise false</returns>
        </member>
        <member name="P:NUnit.Framework.TestParameters.Item(System.String)">
            <summary>
            Indexer provides access to the internal dictionary
            </summary>
            <param name="name">Name of the parameter</param>
            <returns>Value of the parameter or null if not present</returns>
        </member>
        <member name="M:NUnit.Framework.TestParameters.Get(System.String)">
            <summary>
            Get method is a simple alternative to the indexer
            </summary>
            <param name="name">Name of the parameter</param>
            <returns>Value of the parameter or null if not present</returns>
        </member>
        <member name="M:NUnit.Framework.TestParameters.Get(System.String,System.String)">
            <summary>
            Get the value of a parameter or a default string
            </summary>
            <param name="name">Name of the parameter</param>
            <param name="defaultValue">Default value of the parameter</param>
            <returns>Value of the parameter or default value if not present</returns>
        </member>
        <member name="M:NUnit.Framework.TestParameters.Get``1(System.String,``0)">
            <summary>
            Get the value of a parameter or return a default
            </summary>
            <typeparam name="T">The return Type</typeparam>
            <param name="name">Name of the parameter</param>
            <param name="defaultValue">Default value of the parameter</param>
            <returns>Value of the parameter or default value if not present</returns>
        </member>
        <member name="M:NUnit.Framework.TestParameters.Add(System.String,System.String)">
            <summary>
            Adds a parameter to the list
            </summary>
            <param name="name">Name of the parameter</param>
            <param name="value">Value of the parameter</param>
        </member>
        <member name="T:NUnit.Framework.Throws">
            <summary>
            Helper class with properties and methods that supply
            constraints that operate on exceptions.
            </summary>
        </member>
        <member name="P:NUnit.Framework.Throws.Exception">
            <summary>
            Creates a constraint specifying an expected exception
            </summary>
        </member>
        <member name="P:NUnit.Framework.Throws.InnerException">
            <summary>
            Creates a constraint specifying an exception with a given InnerException
            </summary>
        </member>
        <member name="P:NUnit.Framework.Throws.TargetInvocationException">
            <summary>
            Creates a constraint specifying an expected TargetInvocationException
            </summary>
        </member>
        <member name="P:NUnit.Framework.Throws.ArgumentException">
            <summary>
            Creates a constraint specifying an expected ArgumentException
            </summary>
        </member>
        <member name="P:NUnit.Framework.Throws.ArgumentNullException">
            <summary>
            Creates a constraint specifying an expected ArgumentNullException
            </summary>
        </member>
        <member name="P:NUnit.Framework.Throws.InvalidOperationException">
            <summary>
            Creates a constraint specifying an expected InvalidOperationException
            </summary>
        </member>
        <member name="P:NUnit.Framework.Throws.Nothing">
            <summary>
            Creates a constraint specifying that no exception is thrown
            </summary>
        </member>
        <member name="M:NUnit.Framework.Throws.TypeOf(System.Type)">
            <summary>
            Creates a constraint specifying the exact type of exception expected
            </summary>
        </member>
        <member name="M:NUnit.Framework.Throws.TypeOf``1">
            <summary>
            Creates a constraint specifying the exact type of exception expected
            </summary>
        </member>
        <member name="M:NUnit.Framework.Throws.InstanceOf(System.Type)">
            <summary>
            Creates a constraint specifying the type of exception expected
            </summary>
        </member>
        <member name="M:NUnit.Framework.Throws.InstanceOf``1">
            <summary>
            Creates a constraint specifying the type of exception expected
            </summary>
        </member>
        <member name="T:NUnit.Framework.Warn">
            <summary>
            Provides static methods to express conditions
            that must be met for the test to succeed. If
            any test fails, a warning is issued.
            </summary>
        </member>
        <member name="M:NUnit.Framework.Warn.Equals(System.Object,System.Object)">
            <summary>
            DO NOT USE!
            The Equals method throws an InvalidOperationException. This is done
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a">The left object.</param>
            <param name="b">The right object.</param>
            <returns>Not applicable</returns>
        </member>
        <member name="M:NUnit.Framework.Warn.ReferenceEquals(System.Object,System.Object)">
            <summary>
            DO NOT USE!
            The ReferenceEquals method throws an InvalidOperationException. This is done
            to make sure there is no mistake by calling this function.
            </summary>
            <param name="a">The left object.</param>
            <param name="b">The right object.</param>
        </member>
        <member name="M:NUnit.Framework.Warn.Unless``1(NUnit.Framework.Constraints.ActualValueDelegate{``0},NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and issuing a warning on failure.
            </summary>
            <typeparam name="TActual">The Type being compared.</typeparam>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
            <param name="expr">A Constraint expression to be applied</param>
        </member>
        <member name="M:NUnit.Framework.Warn.Unless``1(NUnit.Framework.Constraints.ActualValueDelegate{``0},NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and issuing a warning on failure.
            </summary>
            <typeparam name="TActual">The Type being compared.</typeparam>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Warn.Unless``1(NUnit.Framework.Constraints.ActualValueDelegate{``0},NUnit.Framework.Constraints.IResolveConstraint,System.Func{System.String})">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and issuing a warning on failure.
            </summary>
            <typeparam name="TActual">The Type being compared.</typeparam>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="getExceptionMessage">A function to build the message included with the Exception</param>
        </member>
        <member name="M:NUnit.Framework.Warn.Unless(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false, a warning is issued.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is false</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Warn.Unless(System.Boolean)">
            <summary>
            Asserts that a condition is true. If the condition is false, a warning is issued.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Warn.Unless(System.Boolean,System.Func{System.String})">
            <summary>
            Asserts that a condition is true. If the condition is false, a warning is issued.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="getExceptionMessage">A function to build the message included with the Exception</param>
        </member>
        <member name="M:NUnit.Framework.Warn.Unless(System.Func{System.Boolean},System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false, a warning is issued.
            </summary>
            <param name="condition">A lambda that returns a Boolean</param>
            <param name="message">The message to display if the condition is false</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Warn.Unless(System.Func{System.Boolean})">
            <summary>
            Asserts that a condition is true. If the condition is false, a warning is issued.
            </summary>
            <param name="condition">A lambda that returns a Boolean</param>
        </member>
        <member name="M:NUnit.Framework.Warn.Unless(System.Func{System.Boolean},System.Func{System.String})">
            <summary>
            Asserts that a condition is true. If the condition is false, a warning is issued.
            </summary>
            <param name="condition">A lambda that returns a Boolean</param>
            <param name="getExceptionMessage">A function to build the message included with the Exception</param>
        </member>
        <member name="M:NUnit.Framework.Warn.Unless(NUnit.Framework.TestDelegate,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Asserts that the code represented by a delegate throws an exception
            that satisfies the constraint provided.
            </summary>
            <param name="code">A TestDelegate to be executed</param>
            <param name="constraint">A Constraint expression to be applied</param>
        </member>
        <member name="M:NUnit.Framework.Warn.Unless``1(``0,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and issuing a warning on failure.
            </summary>
            <typeparam name="TActual">The Type being compared.</typeparam>
            <param name="actual">The actual value to test</param>
            <param name="expression">A Constraint expression to be applied</param>
        </member>
        <member name="M:NUnit.Framework.Warn.Unless``1(``0,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and issuing a warning on failure.
            </summary>
            <typeparam name="TActual">The Type being compared.</typeparam>
            <param name="actual">The actual value to test</param>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Warn.Unless``1(``0,NUnit.Framework.Constraints.IResolveConstraint,System.Func{System.String})">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and issuing a warning on failure.
            </summary>
            <typeparam name="TActual">The Type being compared.</typeparam>
            <param name="actual">The actual value to test</param>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="getExceptionMessage">A function to build the message included with the Exception</param>
        </member>
        <member name="M:NUnit.Framework.Warn.If``1(NUnit.Framework.Constraints.ActualValueDelegate{``0},NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            fails and issuing a warning on success.
            </summary>
            <typeparam name="TActual">The Type being compared.</typeparam>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
            <param name="expr">A Constraint expression to be applied</param>
        </member>
        <member name="M:NUnit.Framework.Warn.If``1(NUnit.Framework.Constraints.ActualValueDelegate{``0},NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            fails and issuing a warning on success.
            </summary>
            <typeparam name="TActual">The Type being compared.</typeparam>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Warn.If``1(NUnit.Framework.Constraints.ActualValueDelegate{``0},NUnit.Framework.Constraints.IResolveConstraint,System.Func{System.String})">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            fails and issuing a warning on failure.
            </summary>
            <typeparam name="TActual">The Type being compared.</typeparam>
            <param name="del">An ActualValueDelegate returning the value to be tested</param>
            <param name="expr">A Constraint expression to be applied</param>
            <param name="getExceptionMessage">A function to build the message included with the Exception</param>
        </member>
        <member name="M:NUnit.Framework.Warn.If(System.Boolean,System.String,System.Object[])">
            <summary>
            Asserts that a condition is true. If the condition is false, a warning is issued.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="message">The message to display if the condition is false</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Warn.If(System.Boolean)">
            <summary>
            Asserts that a condition is true. If the condition is false, a warning is issued.
            </summary>
            <param name="condition">The evaluated condition</param>
        </member>
        <member name="M:NUnit.Framework.Warn.If(System.Boolean,System.Func{System.String})">
            <summary>
            Asserts that a condition is true. If the condition is false, a warning is issued.
            </summary>
            <param name="condition">The evaluated condition</param>
            <param name="getExceptionMessage">A function to build the message included with the Exception</param>
        </member>
        <member name="M:NUnit.Framework.Warn.If(System.Func{System.Boolean},System.String,System.Object[])">
            <summary>
            Asserts that a condition is false. If the condition is true a warning is issued.
            </summary>
            <param name="condition">A lambda that returns a Boolean</param>
            <param name="message">The message to display if the condition is true</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Warn.If(System.Func{System.Boolean})">
            <summary>
            Asserts that a condition is false. If the condition is true a warning is issued.
            </summary>
            <param name="condition">A lambda that returns a Boolean</param>
        </member>
        <member name="M:NUnit.Framework.Warn.If(System.Func{System.Boolean},System.Func{System.String})">
            <summary>
            Asserts that a condition is false. If the condition is true a warning is issued.
            </summary>
            <param name="condition">A lambda that returns a Boolean</param>
            <param name="getExceptionMessage">A function to build the message included with the Exception</param>
        </member>
        <member name="M:NUnit.Framework.Warn.If``1(``0,NUnit.Framework.Constraints.IResolveConstraint)">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            fails and issuing a warning if it succeeds.
            </summary>
            <typeparam name="TActual">The Type being compared.</typeparam>
            <param name="actual">The actual value to test</param>
            <param name="expression">A Constraint expression to be applied</param>
        </member>
        <member name="M:NUnit.Framework.Warn.If``1(``0,NUnit.Framework.Constraints.IResolveConstraint,System.String,System.Object[])">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            fails and issuing a warning if it succeeds.
            </summary>
            <typeparam name="TActual">The Type being compared.</typeparam>
            <param name="actual">The actual value to test</param>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="message">The message that will be displayed on failure</param>
            <param name="args">Arguments to be used in formatting the message</param>
        </member>
        <member name="M:NUnit.Framework.Warn.If``1(``0,NUnit.Framework.Constraints.IResolveConstraint,System.Func{System.String})">
            <summary>
            Apply a constraint to an actual value, succeeding if the constraint
            is satisfied and issuing a warning on failure.
            </summary>
            <typeparam name="TActual">The Type being compared.</typeparam>
            <param name="actual">The actual value to test</param>
            <param name="expression">A Constraint expression to be applied</param>
            <param name="getExceptionMessage">A function to build the message included with the Exception</param>
        </member>
        <member name="T:NUnit.FrameworkPackageSettings">
            <summary>
            FrameworkPackageSettings is a static class containing constant values that
            are used as keys in setting up a TestPackage. These values are used in
            the framework, and set in the runner. Setting values may be a string, int or bool.
            </summary>
        </member>
        <member name="F:NUnit.FrameworkPackageSettings.DebugTests">
            <summary>
            Flag (bool) indicating whether tests are being debugged.
            </summary>
        </member>
        <member name="F:NUnit.FrameworkPackageSettings.PauseBeforeRun">
            <summary>
            Flag (bool) indicating whether to pause execution of tests to allow
            the user to attach a debugger.
            </summary>
        </member>
        <member name="F:NUnit.FrameworkPackageSettings.InternalTraceLevel">
            <summary>
            The InternalTraceLevel for this run. Values are: "Default",
            "Off", "Error", "Warning", "Info", "Debug", "Verbose".
            Default is "Off". "Debug" and "Verbose" are synonyms.
            </summary>
        </member>
        <member name="F:NUnit.FrameworkPackageSettings.WorkDirectory">
            <summary>
            Full path of the directory to be used for work and result files.
            This path is provided to tests by the framework TestContext.
            </summary>
        </member>
        <member name="F:NUnit.FrameworkPackageSettings.DefaultTimeout">
            <summary>
            Integer value in milliseconds for the default timeout value
            for test cases. If not specified, there is no timeout except
            as specified by attributes on the tests themselves.
            </summary>
        </member>
        <member name="F:NUnit.FrameworkPackageSettings.DefaultCulture">
            <summary>
            A string representing the default thread culture to be used for
            running tests. String should be a valid BCP-47 culture name. If
            culture is unset, tests run on the machine's default culture.
            </summary>
        </member>
        <member name="F:NUnit.FrameworkPackageSettings.DefaultUICulture">
            <summary>
            A string representing the default thread UI culture to be used for
            running tests. String should be a valid BCP-47 culture name. If
            culture is unset, tests run on the machine's default culture.
            </summary>
        </member>
        <member name="F:NUnit.FrameworkPackageSettings.InternalTraceWriter">
            <summary>
            A TextWriter to which the internal trace will be sent.
            </summary>
        </member>
        <member name="F:NUnit.FrameworkPackageSettings.LOAD">
            <summary>
            A list of tests to be loaded. 
            </summary>
        </member>
        <member name="F:NUnit.FrameworkPackageSettings.NumberOfTestWorkers">
            <summary>
            The number of test threads to run for the assembly. If set to
            1, a single queue is used. If set to 0, tests are executed
            directly, without queuing.
            </summary>
        </member>
        <member name="F:NUnit.FrameworkPackageSettings.RandomSeed">
            <summary>
            The random seed to be used for this assembly. If specified
            as the value reported from a prior run, the framework should
            generate identical random values for tests as were used for
            that run, provided that no change has been made to the test
            assembly. Default is a random value itself.
            </summary>
        </member>
        <member name="F:NUnit.FrameworkPackageSettings.StopOnError">
            <summary>
            If true, execution stops after the first error or failure.
            </summary>
        </member>
        <member name="F:NUnit.FrameworkPackageSettings.SynchronousEvents">
            <summary>
            If true, use of the event queue is suppressed and test events are synchronous.
            </summary>
        </member>
        <member name="F:NUnit.FrameworkPackageSettings.DefaultTestNamePattern">
            <summary>
            The default naming pattern used in generating test names
            </summary>
        </member>
        <member name="F:NUnit.FrameworkPackageSettings.TestParameters">
            <summary>
            Parameters to be passed on to the tests, serialized to a single string which needs parsing. Obsoleted by <see cref="F:NUnit.FrameworkPackageSettings.TestParametersDictionary"/>; kept for backward compatibility.
            </summary>
        </member>
        <member name="F:NUnit.FrameworkPackageSettings.TestParametersDictionary">
            <summary>
            Parameters to be passed on to the tests, already parsed into an IDictionary&lt;string, string>. Replaces <see cref="F:NUnit.FrameworkPackageSettings.TestParameters"/>.
            </summary>
        </member>
        <member name="F:NUnit.FrameworkPackageSettings.RunOnMainThread">
            <summary>
            If true, the tests will run on the same thread as the NUnit runner itself
            </summary>
        </member>
        <member name="T:NUnit.Compatibility.AttributeHelper">
            <summary>
            Provides a platform-independent methods for getting attributes
            for use by AttributeConstraint and AttributeExistsConstraint.
            </summary>
        </member>
        <member name="M:NUnit.Compatibility.AttributeHelper.GetCustomAttributes(System.Object,System.Type,System.Boolean)">
            <summary>
            Gets the custom attributes from the given object.
            </summary>
            <param name="actual">The actual.</param>
            <param name="attributeType">Type of the attribute.</param>
            <param name="inherit">if set to <see langword="true"/> [inherit].</param>
            <returns>A list of the given attribute on the given object.</returns>
        </member>
        <member name="T:NUnit.Compatibility.LongLivedMarshalByRefObject">
            <summary>
            A MarshalByRefObject that lives forever
            </summary>
        </member>
        <member name="M:NUnit.Compatibility.LongLivedMarshalByRefObject.InitializeLifetimeService">
            <summary>
            Obtains a lifetime service object to control the lifetime policy for this instance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Web.UI.ICallbackEventHandler">
            <summary>
            A shim of the .NET interface for platforms that do not support it.
            Used to indicate that a control can be the target of a callback event on the server.
            </summary>
        </member>
        <member name="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)">
            <summary>
            Processes a callback event that targets a control.
            </summary>
            <param name="report"></param>
        </member>
        <member name="M:System.Web.UI.ICallbackEventHandler.GetCallbackResult">
            <summary>
            Returns the results of a callback event that targets a control.
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
